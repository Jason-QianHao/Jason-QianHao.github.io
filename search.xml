<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《开发内功修炼-磁盘篇》学习笔记</title>
      <link href="/2022/03/01/kai-fa-nei-gong-xiu-lian-ci-pan-pian-xue-xi-bi-ji/"/>
      <url>/2022/03/01/kai-fa-nei-gong-xiu-lian-ci-pan-pian-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《开发内功修炼-磁盘篇》学习笔记"><a href="#《开发内功修炼-磁盘篇》学习笔记" class="headerlink" title="《开发内功修炼-磁盘篇》学习笔记"></a>《开发内功修炼-磁盘篇》学习笔记</h1><blockquote><p>目录</p><ol><li>磁盘结构<ol><li>  机械硬盘</li><li> 固态硬盘</li><li> Linux查看磁盘信息</li></ol></li><li>磁盘IO<ol><li>IO延时</li><li>Linux IO 读取</li><li>Linux IO 写入</li><li>磁盘的随机IO和顺序IO</li></ol></li><li> 磁盘分区</li><li> 文件系统</li></ol><p>参考/来源</p><ul><li>《开发内功修炼》微信公众号</li></ul></blockquote><h1 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h1><h2 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>常见的机械磁盘，分磁盘面、磁道、柱面和扇区。</p><p>机械硬盘拆开以后，结构如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102349744.png" alt="image-20220302102349744"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302101558496.png" alt="image-20220302101558496"></p><p>可见有以下概念 ：</p><ol><li><p>磁盘面：磁盘是由一叠磁盘面叠加组合构成，每个磁盘面上都会有一个磁头负责读写。</p></li><li><p>磁道(Track)：每个盘面会围绕圆心划分出多个同心圆圈，每个圆圈叫做一个磁道。</p></li><li><p>柱面(Cylinders)：所有盘片上的同一位置的磁道组成的立体叫做一个柱面。</p></li><li><p>扇区(Sector)：以磁道为单位管理磁盘仍然太大，所以计算机前辈们又把每个磁道划分出了多个扇区。</p></li></ol><p>**所以，磁盘存储的最小组成单位就是扇区。 **</p><p>单柱面的存储容量 = 每个扇区的字节数 * 每柱面扇区数 * 磁盘面数 </p><p>整体磁盘的容量 = 单柱面容量 * 总的柱面数字。</p><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><p>把带有机械技术基因的磁盘搭到计算机，尤其是再应用到服务器领域的时候，暴露出了机械技术的两个严重问题：</p><ul><li><p>第一，速度慢。如果把内存和CPU的速度比作汽车和飞机的话，这个大哥毫秒级别的延迟几乎就是牛车级别的。 </p></li><li><p>第二，容易坏。经常听说谁谁的磁盘坏了，很少有听说过谁的内存条，CPU坏了。笔者就有在读研期间实验室里正在拷贝资料，突然一个断电直接废了一块硬盘的经历。</p></li></ul><p><strong>RAID即是为了解决机械硬盘既慢又容易坏的问题，应运而生。</strong></p><h4 id="多硬盘连接"><a href="#多硬盘连接" class="headerlink" title="多硬盘连接"></a>多硬盘连接</h4><ul><li><p>RAID0</p><p>把一个文件分成N片，每一片都散列在不同的硬盘上。这样当文件进行读取的时候，就可以N块硬盘一起来工作，从而达到读取速度提高到N倍的效果，这就是RAID 0。</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102359897.png" alt="image-20220302102359897"></p><p>​        不过这个方案没有解决容易坏的问题，任何一块硬盘坏了都会导致存储系统故障。</p><ul><li><p>RAID1</p><p>仍然把文件分片，但是所有的分片都存在一块硬盘上，其它的硬盘只存拷贝。这既提高了硬盘的访问速度，也解决了坏的问题。任意一块硬盘坏了，存储系统都可以正常使用，只不过速度会打一点折扣。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102407195.png" alt="image-20220302102407195"></p><p>不过这个方案又带来了新的问题，那就是实现成本有点高了。假如我们用256G硬盘想实现512G的存储容量的话，最少得需要4块硬盘才能实现。</p></li><li><p>RAID5</p><p>最常见的raid5 RAID 5同样要对文件进行分片，但是不对存储的数据进行备份，而是会再单独存一个校验数据片。假如文件分为A1 A2 A3，然后需要再存一个校验片到别的磁盘上。这样不管A1，A2还是A3那一片丢失了，都可以根据另外两片和校验片合成出来。既保证了数据的安全性，又只用了一块磁盘做冗余存储。</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102413105.png" alt="image-20220302102413105"></p><p>​    假如我们有8块256GB的硬盘，那么RAID5方案下的磁盘阵列从用户角度来看可用的存储空间是7<em>256GB，只“浪费”了一块盘的空间，所以*<em>目前RAID5应用比较广泛~~</em></em></p><h4 id="RAID缓存"><a href="#RAID缓存" class="headerlink" title="RAID缓存"></a>RAID缓存</h4><p>磁盘本身也基本都带了缓存，另外在一些比较新的raid卡里，硬件开发者们又搞出来了一层“内存”，并且还自己附带一块电池，这就是RAID卡缓存。</p><p>电池的作用就是当发现主机意外断电的时候，能够快速把缓存中的数据写回到磁盘中去。对于写入，一般操作系统写到这个RAID卡里就完事了，所以速度快。对于读取也是，只要缓存里有，就不会透传到磁盘的机械轴上。</p><blockquote><ul><li><p>PERC S120 入门软件阵列卡，主板集成无缓存 支持RAID0 1</p></li><li><p>PERC H330 入门硬件RAID卡，无板载缓存, 支持RAID 0 1 5 10 50</p></li><li><p><strong>PERC H730 主流硬件RAID卡带有1G缓存和电池 支持RAID 0 1 5 6 10 50 60</strong></p></li><li><p><strong>PERC H730P 高性能硬件RAID卡带有2G缓存和电池 支持RAID 0 1 5 6 10 50 60</strong></p></li><li><p>PERC H830 同H730P,没有内置接口，使用外置接口连接附加存储磁盘柜用</p></li></ul></blockquote><h2 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h2><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p>机械硬盘和ssd虽然都同为硬盘，但底层实现技术却完全不一样，机械硬盘使用的是磁性材料记忆，而<strong>SSD用的是类似u盘的闪存技术</strong>。实现技术的不同，必然在硬盘内部结构上他们就有天壤之别。他们的果照对比如下图所示：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102419990.png" alt="image-20220302102419990"></p><ul><li><p>SSD是由一些电路和<strong>黑色的存储颗粒构成</strong>。</p><p>SSD硬盘是基于NAND Flash存储技术的，属于非易失性存储设备，换成人话说，就是掉电了数据不会丢。</p></li><li><p>其中每一个黑色的存储颗粒也叫做一个<strong>Die</strong>。我们“拆开”一个Die来看一下</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102426747.png" alt="image-20220302102426747"></p><ul><li><p>每个Die有若干个<strong>Plane</strong></p></li><li><p>每个Plane有若干个<strong>Block</strong></p></li><li><p>每个Block有若干个<strong>Page</strong>。</p><p>Page是磁盘进行读写的最小单位，一般为2KB/4KB/8KB/16KB等。</p></li><li><p>每一个Page里，又包含了许许多多的<strong>闪存单元</strong>。</p><p>现代的闪存单元有多种类型，目前主流的主要分为SLC、MLC和TLC。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102434489.png" alt="image-20220302102434489"></p><p>以上三种闪存单元对比：从性能和稳定性角度来看，SLC最好。从容量角度看，TLC最大。</p><p>这就是为什么日常我们看到的工业级的SSD要比笔记本SSD要贵很多，其中一个很重要的原因就是<strong>工业级的盘往往采用的闪存单元是SLC或MLC，而我们家用的笔记本一般都是TCL，因为便宜嘛</strong>。我们用表格再对它们直观对比一下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102442132.png" alt="image-20220302102442132"></p><p>目前主流闪存类型TLC居多，因为价格便宜，容量大。</p></li></ul><h3 id="扇区"><a href="#扇区" class="headerlink" title="扇区"></a>扇区</h3><p>新的机械硬盘虽然把物理扇区已经做到4KB的了，但为了兼容老系统还得整出个逻辑扇区的概念来适配。到了SSD里也一样，虽然每一个物理Page的大小为2K到16K不等，但是<strong>为了兼容性，也必须得整出个逻辑扇区才行。</strong></p><p>SSD控制器在逻辑上会把整个磁盘再重新划分成一个个的“扇区”，采用和新机械硬盘一样的LBA方式来进行编址（整个磁盘的扇区从0到某个最大值方式排列，并连成一条线）。、</p><p>当需要读取某几个”扇区”上数据的时候，SSD控制器通过访问这个<code>LBA MapTable</code>, 再来找到要实际访问的物理Page，如下图：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102451208.png" alt="image-20220302102451208"></p><p><strong>不过SSD最小的读写单位就是Page，他是没办法用扇区来进行读写的。</strong></p><h3 id="文件存储方式"><a href="#文件存储方式" class="headerlink" title="文件存储方式"></a>文件存储方式</h3><p>假设某SSD的Page大小是4KB，一个文件是16KB。那么该文件是存在一个黑色的存储颗粒里,还是多个颗粒里？</p><p>我们先把SSD的逻辑结构用个直观一点的图来看：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102458183.png" alt="image-20220302102458183"></p><p>假设只写在一个颗粒里，那么对该文件进行读取的时候，就只能用到一条Flash通道，这样速度就会比较慢。如果存在相邻的4个颗粒里，每个写入4KB。这样多个Flash通道的带宽会充分发挥出来，传输速度也更快。所以，实际中是分散在多个。</p><h2 id="Linux查看磁盘信息"><a href="#Linux查看磁盘信息" class="headerlink" title="Linux查看磁盘信息"></a>Linux查看磁盘信息</h2><ul><li><p><code>lsblk</code>，查看服务器上安装的硬盘数量以及大小</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># lsblk</span>NAME                     MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTsdb                        <span class="token number">8</span>:16   <span class="token number">0</span>    20T  <span class="token number">0</span> disk<span class="token variable"><span class="token variable">`</span>-sdb1                     <span class="token number">8</span>:17   <span class="token number">0</span>    20T  <span class="token number">0</span> part /searchsda                        <span class="token number">8</span>:0    <span class="token number">0</span> <span class="token number">278</span>.5G  <span class="token number">0</span> disk<span class="token operator">|</span>-sda1                     <span class="token number">8</span>:1    <span class="token number">0</span>   200M  <span class="token number">0</span> part /boot<span class="token variable">`</span></span>-sda2                     <span class="token number">8</span>:2    <span class="token number">0</span> <span class="token number">278</span>.3G  <span class="token number">0</span> part  <span class="token operator">|</span>-vgroot-lvroot <span class="token punctuation">(</span>dm-0<span class="token punctuation">)</span> <span class="token number">253</span>:0    <span class="token number">0</span>    10G  <span class="token number">0</span> lvm  /  <span class="token operator">|</span>-vgroot-lvswap <span class="token punctuation">(</span>dm-1<span class="token punctuation">)</span> <span class="token number">253</span>:1    <span class="token number">0</span>     8G  <span class="token number">0</span> lvm  <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>  <span class="token operator">|</span>-vgroot-lvvar <span class="token punctuation">(</span>dm-2<span class="token punctuation">)</span>  <span class="token number">253</span>:2    <span class="token number">0</span>    15G  <span class="token number">0</span> lvm  /var  <span class="token operator">|</span>-vgroot-lvusr <span class="token punctuation">(</span>dm-3<span class="token punctuation">)</span>  <span class="token number">253</span>:3    <span class="token number">0</span>    10G  <span class="token number">0</span> lvm  /usr  `-vgroot-lvopt <span class="token punctuation">(</span>dm-4<span class="token punctuation">)</span>  <span class="token number">253</span>:4    <span class="token number">0</span> <span class="token number">136</span>.7G  <span class="token number">0</span> lvm  /opt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>fdisk</code>，查看硬盘更详细的信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#fdisk -l /dev/sda</span>Disk /dev/sda: <span class="token number">299.0</span> GB, <span class="token number">298999349248</span> bytes<span class="token number">255</span> heads, <span class="token number">63</span> sectors/track, <span class="token number">36351</span> cylindersUnits <span class="token operator">=</span> cylinders of <span class="token number">16065</span> * <span class="token number">512</span> <span class="token operator">=</span> <span class="token number">8225280</span> bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: <span class="token number">512</span> bytes / <span class="token number">4096</span> bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: <span class="token number">4096</span> bytes / <span class="token number">4096</span> bytesDisk identifier: 0x00053169   Device Boot      Start         End      Blocks   Id  System/dev/sda1   *           <span class="token number">1</span>          <span class="token number">26</span>      <span class="token number">204800</span>   <span class="token number">83</span>  LinuxPartition <span class="token number">1</span> does not end on cylinder boundary./dev/sda2              <span class="token number">26</span>       <span class="token number">36352</span>   <span class="token number">291785728</span>   8e  Linux LVM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sda</code>这块磁盘：</p><ol><li><p>有255个heads(磁头)，也就是说共有255个盘面。</p></li><li><p>36351个cylinders，也就是说每个盘面上都有36351个磁道，</p></li><li><p>63sectors/track说的是每个磁道上共有63个扇区。</p></li><li><p>逻辑扇区大小是512 bytes</p></li><li><p>上面的Units说的是每个磁道的存储容量大小</p></li></ol><blockquote><p>几个特殊的参数：</p><ol><li><p>physical Sector size</p><p>现代科技进步了，磁盘底层的最小组成单位并不是扇区512字节，而是physical Sector size 4KB。</p><p>但这时存在一个问题是扇区大小为512字节的假设已经贯穿于整个软件链，比如BIOS，启动加载器，操作系统内核，文件系统代码，以及磁盘工具，等等。直接切换到4096 byte兼容性问题太大了，所以每个<strong>新的磁盘控制器将4096字节的物理扇区对应成了8个512字节的逻辑扇区</strong>，兼容各种老软件。</p></li><li><p>虚拟的磁头head和磁道cylinders</p><p>从磁盘上拆下来的磁头的真实照片</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102507282.png" alt="image-20220302102507282"></p><p>上面的图片里只有几个磁头，如果硬盘里真的装下255个这样的磁头的话，很难想象磁盘得有多厚。而且磁头多了以后硬盘的可靠性就越差，因为多磁头出故障的几率总会比单磁头要高一些。所以<code>fdisk -l</code>里看到的255 heads其实和扇区一样，也是虚拟出来的。 另外cylinders也一样，也是虚拟出来的。</p></li></ol></blockquote></li></ul><h1 id="磁盘IO"><a href="#磁盘IO" class="headerlink" title="磁盘IO"></a>磁盘IO</h1><h2 id="IO延时"><a href="#IO延时" class="headerlink" title="IO延时"></a>IO延时</h2><p>读写原理说起来也简单，就是磁头要找到指定的磁道，指定的扇区，进而把数据读取出来或者写入进去的过程。这个过程分成如下三步：</p><ul><li>第一步，首先是磁头径向移动来寻找数据所在的磁道。这部分时间叫寻道时间。寻道时间，现代磁盘大概在3-15ms，其中寻道时间大小主要受磁头当前所在位置和目标磁道所在位置相对距离的影响</li><li>第二步，找到目标磁道后通过盘面旋转，将目标扇区移动到磁头的正下方，这部分时间叫旋转延迟。现在主流服务器上经常使用的是1W转/分钟的磁盘，每旋转一周所需的时间为60*1000/10000=6ms，故其旋转延迟为（0-6ms）</li><li>第三步，向目标扇区读取或者写入数据，这部分时间叫存取时间。这个是电磁操作，所以一般耗时较短，为零点几ms。</li></ul><p>到此为止，<strong>单次磁盘IO时间 = 寻道时间 + 旋转延迟 + 存取时间</strong></p><h2 id="Linux-IO-读取"><a href="#Linux-IO-读取" class="headerlink" title="Linux IO 读取"></a>Linux IO 读取</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/640.png" alt="640"></p><p>Linux读取文件的过程：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/640%20(1).png" alt="640 (1)"></p><ul><li><p><strong>如果 Page Cache 命中的话，根本就没有磁盘 IO 产生</strong>。</p></li><li><p>假如 Page Cache 没有命中，访问磁盘缓存</p><p>因为现在的磁盘本身就会带一块缓存。另外现在的服务器都会组建磁盘阵列，在磁盘阵列里的核心硬件Raid卡里也会集成RAM作为缓存。只有所有的缓存都不命中的时候，机械轴带着磁头才会真正工作。</p></li><li><p>缓存没有命中，进行磁盘IO</p><ul><li>Page Cache 是以页为单位的，Linux 页大小一般是 4KB</li><li>文件系统是以块(block)为单位来管理的。使用 <code>dumpe2fs</code> 可以查看，一般一个块默认是 4KB</li><li>通用块层是以段为单位来处理磁盘 IO 请求的，<strong>一个段为一个页或者是页的一部分</strong></li><li>IO 调度程序通过 DMA 方式<strong>传输 N 个扇区到内存，扇区一般为 512 字节</strong></li><li>硬盘也是采用“扇区”的管理和传输数据的</li></ul></li></ul><h2 id="Linux-IO-写入"><a href="#Linux-IO-写入" class="headerlink" title="Linux IO 写入"></a>Linux IO 写入</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102643747.png" alt="image-20220302102643747"></p><p>绝大部分情况都是写入到PageCache中就返回了，这时并没有真正写入磁盘。我们的数据会在如下三个时机下被真正发起写磁盘IO请求：</p><ul><li>第一种情况，如果write系统调用时，如果发现PageCache中脏页占比太多，超过了dirty_ratio或dirty_bytes，write就必须等待了。</li><li>第二种情况，write写到PageCache就已经返回了。worker内核线程异步运行的时候，再次判断脏页占比，如果超过了dirty_background_ratio或dirty_background_bytes，也发起写回请求。</li><li>第三种情况，这时同样write调用已经返回了。worker内核线程异步运行的时候，虽然系统内脏页一直没有超过dirty_background_ratio或dirty_background_bytes，但是脏页在内存中呆的时间超过dirty_expire_centisecs了，也会发起回写。</li></ul><p>如果对以上配置不满意，你可以自己通过修改/etc/sysctl.conf来调整，修改完了别忘了执行sysctl -p。</p><h2 id="磁盘的随机IO和顺序IO"><a href="#磁盘的随机IO和顺序IO" class="headerlink" title="磁盘的随机IO和顺序IO"></a>磁盘的随机IO和顺序IO</h2><p>机械硬盘在顺序IO和随机IO下的巨大性能差异。</p><p>在顺序IO情况下，磁盘是最擅长的顺序IO,再加上Raid卡缓存命中率也高。这时带宽表现有几十、几百M，最好条件下甚至能达到1GB。IOPS这时候能有2-3W左右。</p><p>到了随机IO的情形下，机械轴也被逼的跳来跳去寻道，RAID卡缓存也失效了。带宽跌到了1MB以下，最低只有100K，IOPS也只有可怜巴巴的200左右。</p><p>很多工程实践中的许多的事情都和这个有关：</p><ul><li><p><strong>复制文件夹</strong>：我们都知道，在复制一个文件夹的时候，如果这个文件夹里面包含了许多堆碎文件，这时候复制起来非常慢。原因就是这时候机械硬盘大概率都是在随机IO。怎么提高复制速度呢？很简单，就是把它们先打一个包。打包之后这个文件夹就变成一个大文件了，这时候再复制的话，磁盘就是执行的最擅长的顺序IO了，所以会快很多。</p></li><li><p><strong>数据库事务</strong>：所有的数据库在实现事务的时候，都要保证写数据落盘成功才能返回。但为什么他们几乎都是落盘到自己的事务日志文件里去就返回成功的，而不是直接写入到数据表文件里。这背后的原因还是磁盘读写性能问题，事务只需要保证数据落地成功就可以，至于写到哪里并不重要。写到数据文件中的话大概率就变成随机IO了。如果写到一个日志文件中，就是地地道道的顺序IO，性能就发挥到极致。</p></li><li><p><strong>Mysql的B+树</strong>：无论是顺序IO还是随机IO，只要增加每次IO的单位，性能都会上涨。理解了这个，你就能真正理解为什么Mysql是采用B+树当索引，而不是用其它的树了（比如二叉树）。因为B+树的节点更大，IO起来会让磁盘工作更舒服一些。</p></li></ul><h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><ul><li><p>分区方式</p><p>考虑磁盘IO时间，采用柱面进行分区，如<code>3263个柱面，C盘0-1000个柱面，D盘1001-20001个柱面,……</code></p><p>这样而来，对于磁盘C，只需要在磁头在1-1000个磁道间移动就可以了，大大降低了寻道时间。</p></li><li><p><code>fdisk</code>命令分区</p><p>分区的过程就是你输入起始柱面号和截至柱面号的过程。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102654287.png" alt="image-20220302102654287"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102844649.png" alt="image-20220302102844649"></p><p>不过在实际中，<strong>分区并不能从0号柱面开始的，因为磁盘的第一个磁道对应的柱面会被用来安装引导加载程序以及磁盘分区表。</strong></p></li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="空文件占用多少磁盘空间"><a href="#空文件占用多少磁盘空间" class="headerlink" title="空文件占用多少磁盘空间"></a>空文件占用多少磁盘空间</h2><h3 id="Inode占用"><a href="#Inode占用" class="headerlink" title="Inode占用"></a>Inode占用</h3><p>新建一个空文件会占用一个Inode。</p><ul><li><p>Linux的inode结构</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ext2_inode</span> <span class="token punctuation">&#123;</span>        __le16  i_mode<span class="token punctuation">;</span>         # 文件权限        __le16  i_uid<span class="token punctuation">;</span>          # 文件所有者ID        __le32  i_size<span class="token punctuation">;</span>         # 文件字节数大小        __le32  i_atime<span class="token punctuation">;</span>        # 文件上次被访问的时间        __le32  i_ctime<span class="token punctuation">;</span>        # 文件创建时间        __le32  i_mtime<span class="token punctuation">;</span>        # 文件被修改的时间        __le32  i_dtime<span class="token punctuation">;</span>        # 文件被删除的时间        __le16  i_gid<span class="token punctuation">;</span>          # 文件所属组ID        __le16  i_links_count<span class="token punctuation">;</span>  # 此文件的inode被连接的次数        __le32  i_blocks<span class="token punctuation">;</span>       # 文件的block数量        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        __le32  i_block<span class="token punctuation">[</span>EXT2_N_BLOCKS<span class="token punctuation">]</span><span class="token punctuation">;</span> # 指向存储文件数据的块的数组        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>stat</code>命令查看文件inode中数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># stat test</span>  File: `test'  Size: <span class="token number">0</span>               Blocks: <span class="token number">0</span>          IO Block: <span class="token number">1024</span>   regular empty <span class="token function">file</span>Device: 801h/2049d      Inode: <span class="token number">26</span>          Links: <span class="token number">1</span>Access: <span class="token punctuation">(</span>0644/-rw-r--r--<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>Access: <span class="token number">2020</span>-03-01 <span class="token number">12</span>:14:31.000000000 +0800Modify: <span class="token number">2020</span>-03-01 <span class="token number">12</span>:14:31.000000000 +0800Change: <span class="token number">2020</span>-03-01 <span class="token number">12</span>:14:31.000000000 +0800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>dumpe2fs</code>命令查看inode大小</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># dumpe2fs -h /dev/mapper/vgroot-lvroot</span>dumpe2fs <span class="token number">1.41</span>.12 <span class="token punctuation">(</span><span class="token number">17</span>-May-2010<span class="token punctuation">)</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Inode size:               <span class="token number">256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="占用其父目录空间"><a href="#占用其父目录空间" class="headerlink" title="占用其父目录空间"></a>占用其父目录空间</h3><p>文件名存储在目录结构中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ext2_dir_entry</span> <span class="token punctuation">&#123;</span>         __le32  inode<span class="token punctuation">;</span>                  <span class="token comment">/* Inode number */</span>         __le16  rec_len<span class="token punctuation">;</span>                <span class="token comment">/* Directory entry length */</span>         __le16  name_len<span class="token punctuation">;</span>               <span class="token comment">/* Name length */</span>         <span class="token keyword">char</span>    name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">/* File name, up to EXT2_NAME_LEN */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个结构体就是我们司空见惯的文件夹所使用的数据结构，每个文件都占用一个<code>ext2_dir_entry</code>。没错，<strong>文件名是存在其所属的文件夹中的，就是其中的<code>char name[]</code>字段</strong>。和文件名一起，文件夹里还记录了该文件的inode号等信息。</p><p>和空文件一样，空的文件夹也会消耗掉一个inode。</p><p>一个文件夹当然消耗的磁盘空间：</p><ul><li>首先要消耗掉一个inode，我的机器上它是256字节</li><li>需要消耗其父目录下的一个目录项<code>ext4_dir_entry</code>，保存自己inode号，目录名。</li><li>其下面如果创建文件夹或者文件的话，它就需要在自己的block里保存<code>ext4_dir_entry</code>数组</li></ul><p>目录下的文件/子目录越多，目录就需要申请越多的block。另外<code>ext4_dir_entry</code>大小不是固定的，文件名/子目录名越长，单个目录项消耗的空间也就越大。</p><p>进一步的，结合后面格式化中块组group知识点，创建目录的过程为：</p><ul><li><p>创建目录的时候，操作系统会在inode位图上寻找尚未使用的inode编号，找到后把inode分配给你。</p></li><li><p>目录会默认分配一个block，所以还需要查询block位图，找到后分配一个block。在block里面，存储的就是文件系统自己定义的目录项数据结构了，例如ext4_dir_entry_2。每一个结构里会保存其下的文件名，文件的inode编号等信息。某个实际文件夹在磁盘上最终使用的空间如下图所示：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102703419.png" alt="image-20220302102703419"></p></li></ul><p>目录的block中保存的是其下面的文件和子目录的目录项结构体，保存着它们的文件名和inode号。理解了目录，对于文件也是一样的。也需要消耗inode，当有数据写入的时候，再去申请block。</p><h2 id="1个字节的文件占用多少磁盘空间"><a href="#1个字节的文件占用多少磁盘空间" class="headerlink" title="1个字节的文件占用多少磁盘空间"></a>1个字节的文件占用多少磁盘空间</h2><p>文件里的内容不论多小，哪怕是一个字节，其实操作系统也会给你分配4K的。</p><ul><li><p>inode结构中的block数组</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ext2_inode</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    __le32  i_block<span class="token punctuation">[</span>EXT2_N_BLOCKS<span class="token punctuation">]</span><span class="token punctuation">;</span> # 指向存储文件数据的块的数组    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当文件没有数据需要存储的时候，这个数组都是空值。</p><p>而当我们写入了1个字节以后，文件系统就需要申请block去存储了，申请完后，指针放在这个数组里。哪怕文件内容只有一个字节，仍然会分配一个整的Block，因为这是文件系统的最小工作单位。</p></li><li><p>那么这个block大小是多大呢，ext下可以通过<code>dumpe2fs</code>查看。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">dumpe</span><span class="token expression"><span class="token number">2f</span>s <span class="token operator">-</span>h <span class="token operator">/</span>dev<span class="token operator">/</span>mapper<span class="token operator">/</span>vgroot<span class="token operator">-</span>lvroot</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Block size<span class="token operator">:</span>               <span class="token number">4096</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="大文件的block分级存储"><a href="#大文件的block分级存储" class="headerlink" title="大文件的block分级存储"></a>大文件的block分级存储</h2><p>inode中定义的block数组大小呢，只有<code>EXT2_N_BLOCKS</code>个。我们再查看一下这个常量的定义，发现它是15，相关内核中定义如下：</p><pre class="line-numbers language-none"><code class="language-none">#define EXT2_NDIR_BLOCKS        12#define EXT2_IND_BLOCK         EXT2_NDIR_BLOCKS#define EXT2_DIND_BLOCK        (EXT2_IND_BLOCK + 1)#define EXT2_TIND_BLOCK        (EXT2_DIND_BLOCK + 1)#define EXT2_N_BLOCKS              (EXT2_TIND_BLOCK + 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就按4K的block size来看，15个block只够存的下15*4=60K的文件。 这个文件大小相信你一定不满意，你存一个avi大片都得上G了。那Linux是怎么实现大文件存储的呢？嗯，其实上面宏的定义过程已经告诉你了，就是只有12个数组直接存block指针，其余的用来做间接索引（EXT2_IND_BLOCK），二级间接索引（EXT2_DIND_BLOCK）和三级索引（EXT2_TIND_BLOCK）。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102711581.png" alt="image-20220302102711581"></p><p>这样，一个文件可以使用的空间就指数倍的扩展了。 文件小的时候，都用直接索引，磁盘IO少，性能好。文件大的时候，访问一个block可能得先进行三次的IO，性能略慢，不过有OS层面的页缓存、目录项缓存的加持，也还好。</p><h2 id="删除文件后依然占空间"><a href="#删除文件后依然占空间" class="headerlink" title="删除文件后依然占空间"></a>删除文件后依然占空间</h2><p>文件夹下的文件都已经删了，该文件夹为什么还占用72K的磁盘空间？ </p><p>问题关键在于<code>ext4_dir_entry中的</code>rec_len<code>。这个变量存储了当前整个</code>ext4_dir_entry对象的长度，这样操作系统在遍历文件夹的时候，就可以通过当前的指针，加上这个长度就可以找到文件夹中下一个文件的<code>dir_entry</code>了。这样的优势是遍历起来非常方便，有点像是一个链表，一个一个穿起来的。 </p><p>但是，如果要删除一个文件的话，就有点小麻烦了，当前文件结构体变量不能直接删，否则链表就断了。Linux的做法是在删除文件的时候，在其目录中只是把inode设置为0就拉倒，并没有回收整个<code>ext4_dir_entry</code>对象。</p><p>其实和大家做工程的时候经常用到的假删除是一个道理。现在的xfs文件系统好像已经没有这个小问题了，但具体咋解决的，暂时没有深入研究。</p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>Linux下的格式化命令是<code>mkfs</code>.</p><p><code>mkfs</code>在格式化的时候需要制定分区以及文件系统类型。该命令其实就是把我们的连续的磁盘空间进行划分和管理。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># mkfs -t ext4 /dev/vdb</span><span class="token function">mke2fs</span> <span class="token number">1.42</span>.9 <span class="token punctuation">(</span><span class="token number">28</span>-Dec-2013<span class="token punctuation">)</span>文件系统标签<span class="token operator">=</span>OS type: Linux块大小<span class="token operator">=</span><span class="token number">4096</span> <span class="token punctuation">(</span>log<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>分块大小<span class="token operator">=</span><span class="token number">4096</span> <span class="token punctuation">(</span>log<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token assign-left variable">Stride</span><span class="token operator">=</span><span class="token number">0</span> blocks, Stripe <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token number">0</span> blocks<span class="token number">6553600</span> inodes, <span class="token number">26214400</span> blocks<span class="token number">1310720</span> blocks <span class="token punctuation">(</span><span class="token number">5.00</span>%<span class="token punctuation">)</span> reserved <span class="token keyword">for</span> the super user第一个数据块<span class="token operator">=</span><span class="token number">0</span>Maximum filesystem <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">2174746624</span><span class="token number">800</span> block <span class="token function">groups</span><span class="token number">32768</span> blocks per group, <span class="token number">32768</span> fragments per group<span class="token number">8192</span> inodes per groupSuperblock backups stored on blocks:    <span class="token number">32768</span>, <span class="token number">98304</span>, <span class="token number">163840</span>, <span class="token number">229376</span>, <span class="token number">294912</span>, <span class="token number">819200</span>, <span class="token number">884736</span>, <span class="token number">1605632</span>, <span class="token number">2654208</span>,    <span class="token number">4096000</span>, <span class="token number">7962624</span>, <span class="token number">11239424</span>, <span class="token number">20480000</span>, <span class="token number">23887872</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>块大小、block数量、inode数量</p><p>其中块大小、block数量、inode数量可以根据具体业务逻辑进行修改。<code>mke2fs</code>，这个命令允许你输入更详细的格式化选项，demo如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mke2fs</span> -j -L <span class="token string">"卷标"</span> -b <span class="token number">2048</span> -i <span class="token number">8192</span> /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>块组groups</p><p>格式化后的所有inode并不是挨着一起放的，同样block也不是。而是分成了一个个的group，每一个group里都有一些inode和block。逻辑图如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102722093.png" alt="image-20220302102722093"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 《开发内功修炼》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《开发内功修炼-CPU篇》学习笔记</title>
      <link href="/2022/02/28/kai-fa-nei-gong-xiu-lian-cpu-pian-xue-xi-bi-ji/"/>
      <url>/2022/02/28/kai-fa-nei-gong-xiu-lian-cpu-pian-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《开发内功修炼-内存篇》学习笔记"><a href="#《开发内功修炼-内存篇》学习笔记" class="headerlink" title="《开发内功修炼-内存篇》学习笔记"></a>《开发内功修炼-内存篇》学习笔记</h1><blockquote><p>目录</p><ol><li> CPU物理结构</li><li>CPU缓存</li><li>进程/线程切换的开销</li><li>软中断的开销</li><li>系统调用的开销</li><li>函数调用的开销</li></ol><p>参考/来源</p><ul><li>《开发内功修炼》微信公众号</li></ul></blockquote><h1 id="CPU物理结构"><a href="#CPU物理结构" class="headerlink" title="CPU物理结构"></a>CPU物理结构</h1><h2 id="CPU核数"><a href="#CPU核数" class="headerlink" title="CPU核数"></a>CPU核数</h2><ul><li><p><strong>物理CPU</strong>：主板上真正安装的CPU的个数，</p></li><li><p><strong>物理核</strong>：一个CPU会集成多个物理核心</p></li><li><p><strong>逻辑核</strong>：超线程技术可以把一个物理核虚拟出来多个逻辑核</p></li></ul><p>超线程里的2个逻辑核实际上是在一个物理核上运行的，模拟双核心运作，共享该物理核的L1和L2缓存。物理计算能力并没有增加，超线程技术只有在多任务的时候才能提升机器核整体的吞吐量。而且据Intel官方介绍，相比实核，平均性能提升只有20-30%30%左右。</p><h2 id="Linux的CPU"><a href="#Linux的CPU" class="headerlink" title="Linux的CPU"></a>Linux的CPU</h2><ul><li><p><code>top</code>命令</p><p>其实我们通过top命令看到的CPU核是逻辑核</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302101308390.png" alt="image-20220302101308390"></p></li><li><p>更详细信息</p><p>在linux系统下，通过查看<code>/proc/cpuinfo</code>可以看到CPU更为详细的信息。我们<strong>通过physical id 可以看到真正的物理CPU的个数</strong>，如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#cat /proc/cpuinfo | grep "physical id" | sort | uniq</span>physical <span class="token function">id</span>     <span class="token builtin class-name">:</span> <span class="token number">0</span>  physical <span class="token function">id</span>     <span class="token builtin class-name">:</span> <span class="token number">1</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出，该实机有两个物理CPU。我们继续查看物理核，<strong>通过cpu cores可以看到每个CPU有几个物理核</strong>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#cat /proc/cpuinfo| grep "cpu cores"| uniq</span>cpu cores       <span class="token builtin class-name">:</span> <span class="token number">6</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>cpu cores显示为6表示每个cpu有6个物理核心，因为有2个物理CPU，所以该机器总共有12个物理核。当然<strong>该命令也可以查看逻辑核，那就是grep显示结果中的processor</strong>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#cat /proc/cpuinfo  | grep -E "core id|process|physical id"</span>processor       <span class="token builtin class-name">:</span> <span class="token number">0</span>  physical <span class="token function">id</span>     <span class="token builtin class-name">:</span> <span class="token number">0</span>  core <span class="token function">id</span>         <span class="token builtin class-name">:</span> <span class="token number">0</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>processor       <span class="token builtin class-name">:</span> <span class="token number">12</span>  physical <span class="token function">id</span>     <span class="token builtin class-name">:</span> <span class="token number">0</span>  core <span class="token function">id</span>         <span class="token builtin class-name">:</span> <span class="token number">0</span>  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>processor       <span class="token builtin class-name">:</span> <span class="token number">23</span>  physical <span class="token function">id</span>     <span class="token builtin class-name">:</span> <span class="token number">1</span>  core <span class="token function">id</span>         <span class="token builtin class-name">:</span> <span class="token number">10</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>processor就是逻辑核的序号，可以看出该机器总共有24个逻辑核。大家注意看processor 0和processor 12的physical id、core id都是一样的，也就说他们他们也处在同一个物理核上。但是他们的processor编号却不一样，一个是0，一个是12。这就是说，这两个逻辑核实际上是一个物理核虚拟出来的而已。</p></li></ul><h1 id="CPU缓存"><a href="#CPU缓存" class="headerlink" title="CPU缓存"></a>CPU缓存</h1><h2 id="L1-L2-L3缓存"><a href="#L1-L2-L3缓存" class="headerlink" title="L1\L2\L3缓存"></a>L1\L2\L3缓存</h2><p>CPU越来越快，现在CPU的速度比内存要快百倍以上，所以就逐步演化出了L1、L2、L3三级缓存结构，而且都集成到的CPU芯片里，以进一步提高访问速度。</p><p>现代Intel的CPU架构的基本结构：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102323668.png" alt="image-20220302102323668"></p><p>越往下，速度越慢，容量越大</p><ul><li><p>L1最接近于CPU，速度也最快，但是容量最小。一般现代CPU的L1会分成两个，一个用来cache data，一个用来cache code，这是因为code和data的更新策略并不相同，而且因为CISC的变长指令，code cache要做特殊优化。一般每个核都有自己独立的data L1和code L1。</p></li><li><p>L2一般也可以做到每个核一个独立的</p></li><li><p>但是L3一般就是整颗CPU共享的了。</p><p>UEFIBlog里提供了一个比较好的物理解剖图，比较好地展示了出来：</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102332354.png" alt="image-20220302102332354"></p><h2 id="查看Linux的三级缓存"><a href="#查看Linux的三级缓存" class="headerlink" title="查看Linux的三级缓存"></a>查看Linux的三级缓存</h2><p><strong>L1一级缓存查看：</strong></p><pre class="line-numbers language-none"><code class="language-none"># cat cpu0&#x2F;cache&#x2F;index0&#x2F;level1# cat cpu0&#x2F;cache&#x2F;index0&#x2F;size32K# cat cpu0&#x2F;cache&#x2F;index0&#x2F;typeData# cat cpu0&#x2F;cache&#x2F;index0&#x2F;shared_cpu_list0,12# cat cpu0&#x2F;cache&#x2F;index1&#x2F;level1# cat cpu0&#x2F;cache&#x2F;index1&#x2F;size32K# cat cpu0&#x2F;cache&#x2F;index1&#x2F;typeInstruction# cat cpu0&#x2F;cache&#x2F;index1&#x2F;shared_cpu_list0,12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从上面的level接口可以看出index0和index1都是一级缓存，只不过一个是Data数据缓存，一个是Instruction也就是代码缓存。</li><li>shared_cpu_list显示有共享？我们这里看到的cpu0并不是物理Core，而是逻辑核，都是超线程技术虚拟出来的。实际上cpu0和cpu12是属于一个物理Core，所以每个Data L1和Instruction是这两个逻辑核共享的。</li></ul><p><strong>L2二级缓存查看：</strong></p><pre class="line-numbers language-none"><code class="language-none"># cat cpu0&#x2F;cache&#x2F;index2&#x2F;size256K# cat cpu0&#x2F;cache&#x2F;index2&#x2F;typeUnified# cat cpu0&#x2F;cache&#x2F;index2&#x2F;shared_cpu_list0,12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二级缓存要比一级缓存大不少，有256K，但是不分Data和Instruction。另外L2和L1一样，也是总共有12个，每两个逻辑核共享一个L2。</p><p><strong>L3三级缓存查看：</strong></p><pre class="line-numbers language-none"><code class="language-none"># cat cpu0&#x2F;cache&#x2F;index3&#x2F;size12288K# cat cpu0&#x2F;cache&#x2F;index3&#x2F;typeUnified# cat cpu0&#x2F;cache&#x2F;index3&#x2F;shared_cpu_list0-5,12-17#cat cpu6&#x2F;cache&#x2F;index3&#x2F;shared_cpu_list6-11,18-23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cache-Line"><a href="#Cache-Line" class="headerlink" title="Cache Line"></a>Cache Line</h2><p><strong>Cache Line是</strong>本级缓存向下一层取数据时的基本单位</p><p>可以看到L1、L2、L3的Cache Line大小都是64字节（注意是字节，可以在相关配置文件查看）。就是说每次cpu从内存获取数据的时候，都是以该单位来进行的，哪怕你只取一个bit，CPU也是给你取一个Cache Line然后放到各级缓存里存起来。</p><h2 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h2><p>和CPU的L1、L2、L3的缓存思想一致，既然进行地址转换需要的内存IO次数多，且耗时。那么干脆就在CPU里把页表尽可能地cache起来不就行了么，所以就有了TLB(Translation Lookaside Buffer)，专门用于改进虚拟地址到物理地址转换速度的缓存。其访问速度非常快，和寄存器相当，比L1访问还快。</p><p>有了TLB之后，CPU访问某个虚拟内存地址的过程如下</p><ol><li><p>CPU产生一个虚拟地址</p></li><li><p>MMU从TLB中获取页表，翻译成物理地址</p></li><li><p>MMU把物理地址发送给L1/L2/L3/内存</p></li><li><p>L1/L2/L3/内存将地址对应数据返回给CPU</p></li></ol><p>TLB并不是很大，只有4k，而且现在逻辑核又造成会有两个进程来共享。所以可能会有cache miss的情况出现。而且一旦<strong>TLB miss造成的后果可比物理地址cache miss后果要严重一些，最多可能需要进行5次内存IO才行</strong>。</p><h1 id="进程-线程切换的开销"><a href="#进程-线程切换的开销" class="headerlink" title="进程/线程切换的开销"></a>进程/线程切换的开销</h1><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><ul><li><p>上下文切换</p><p>在进程A切换到进程B的过程中，先保存A进程的上下文，以便于等A恢复运行的时候，能够知道A进程的下一条指令是啥。然后将要运行的B进程的上下文恢复到寄存器中。这个过程被称为上下文切换。</p></li><li><p>测试开销的结果</p><p>每次执行的时间会有差异，多次运行后<strong>平均每次上下文切换耗时3.5us左右</strong>。当然了这个数字因机器而异，而且建议在实机上测试。</p><p><strong>前文我们测试系统调用的时候，最低值是200ns</strong>。可见，上下文切换开销要比系统调用的开销要大。系统调用只是在进程内将用户态切换到内核态，然后再切回来，而上下文切换可是直接从进程A切换到了进程B。显然这个上下文切换需要完成的工作量更大。</p></li><li><p>开销分析</p><p>开销分成两种，一种是直接开销、一种是间接开销。</p><p><strong>直接开销就是在切换时，cpu必须做的事情</strong>，包括：</p><p>1、切换页表全局目录</p><p>2、切换内核态堆栈</p><p>3、切换硬件上下文（进程恢复前，必须装入寄存器的数据统称为硬件上下文）</p><ul><li>ip(instruction pointer)：指向当前执行指令的下一条指令</li><li>bp(base pointer): 用于存放执行中的函数对应的栈帧的栈底地址</li><li>sp(stack poinger): 用于存放执行中的函数对应的栈帧的栈顶地址</li><li>cr3:页目录基址寄存器，保存页目录表的物理地址</li><li>……</li></ul><p>4、刷新TLB</p><p>5、系统调度器的代码执行</p><p><strong>间接开销主要指的是虽然切换到一个新进程后，由于各种缓存并不热，速度运行会慢一些</strong>。如果进程始终都在一个CPU上调度还好一些，如果跨CPU的话，之前热起来的TLB、L1、L2、L3因为运行的进程已经变了，所以以局部性原理cache起来的代码、数据也都没有用了，导致新进程穿透到内存的IO会变多。其实我们上面的实验并没有很好地测量到这种情况，所以实际的上下文切换开销可能比3.5us要大。</p></li><li><p>相关命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vmstat 1</span>procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu----- r  b   swpd   <span class="token function">free</span>   buff  cache   si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span> wa st <span class="token number">2</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">595504</span>   <span class="token number">5724</span> <span class="token number">190884</span>    <span class="token number">0</span>    <span class="token number">0</span>   <span class="token number">295</span>   <span class="token number">297</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">14</span>  <span class="token number">6</span> <span class="token number">75</span>  <span class="token number">0</span>  <span class="token number">4</span> <span class="token number">5</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">593016</span>   <span class="token number">5732</span> <span class="token number">193288</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">92</span> <span class="token number">19889</span> <span class="token number">29104</span> <span class="token number">20</span>  <span class="token number">6</span> <span class="token number">67</span>  <span class="token number">0</span>  <span class="token number">7</span> <span class="token number">3</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">591292</span>   <span class="token number">5732</span> <span class="token number">195476</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">20151</span> <span class="token number">28487</span> <span class="token number">20</span>  <span class="token number">6</span> <span class="token number">66</span>  <span class="token number">0</span>  <span class="token number">8</span> <span class="token number">4</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">589296</span>   <span class="token number">5732</span> <span class="token number">196800</span>    <span class="token number">0</span>    <span class="token number">0</span>   <span class="token number">116</span>   <span class="token number">384</span> <span class="token number">19326</span> <span class="token number">27693</span> <span class="token number">20</span>  <span class="token number">7</span> <span class="token number">67</span>  <span class="token number">0</span>  <span class="token number">7</span> <span class="token number">4</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">586956</span>   <span class="token number">5740</span> <span class="token number">199496</span>    <span class="token number">0</span>    <span class="token number">0</span>   <span class="token number">216</span>    <span class="token number">24</span> <span class="token number">18321</span> <span class="token number">24018</span> <span class="token number">22</span>  <span class="token number">8</span> <span class="token number">62</span>  <span class="token number">0</span>  <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>cs列</strong>表示的就是在1s内系统发生的上下文切换次数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># sar -w 1</span>proc/s     Total number of tasks created per second.cswch/s     Total number of context switches per second.<span class="token number">11</span>:19:20 AM    proc/s   cswch/s<span class="token number">11</span>:19:21 AM    <span class="token number">110.28</span>  <span class="token number">23468.22</span><span class="token number">11</span>:19:22 AM    <span class="token number">128.85</span>  <span class="token number">33910.58</span><span class="token number">11</span>:19:23 AM     <span class="token number">47.52</span>  <span class="token number">40733.66</span><span class="token number">11</span>:19:24 AM     <span class="token number">35.85</span>  <span class="token number">30972.64</span><span class="token number">11</span>:19:25 AM     <span class="token number">47.62</span>  <span class="token number">24951.43</span><span class="token number">11</span>:19:26 AM     <span class="token number">47.52</span>  <span class="token number">42950.50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>在网络服务器环境下，为了避免频繁的上下文切换，有一种异步非阻塞的开发模型。那就是用一个进程或线程去接收一大堆用户的请求，然后通过IO多路复用的方式来提高性能（进程或线程不阻塞，省去了上下文切换的开销）。</p><p>在应用层，<strong>不需要进程/线程上下文切换的“线程”，即为协程</strong>。用协程去处理高并发的应用场景，既能够符合进程涉及的初衷，让开发者们用人类正常的线性的思维去处理自己的业务，也同样能够省去昂贵的进程/线程上下文切换的开销。因此可以说，协程就是Linux处理海量请求应用场景里的进程模型的一个很好的的补丁。</p><ul><li><p>协程切换开销</p><p>平均每次协程切换的开销是（655035993-415197171)/2000000=<strong>120ns</strong>。相对于前面文章测得的进程切换开销大约3.5us，大约是其的三十分之一。比系统调用的造成的开销还要低。</p></li><li><p>内存开销</p><p>在空间上，协程初始化创建的时候为其分配的栈有2KB。而线程栈要比这个数字大的多，可以通过ulimit 命令查看，一般都在几兆，作者的机器上是10M。如果对每个用户创建一个协程去处理，100万并发用户请求只需要2G内存就够了，而如果用线程模型则需要10T。</p></li></ul><p>无论是空间还是时间性能都比进程（线程）好这么多，那么Linus为啥不把它在操作系统里实现了多好？<strong>操作系统为了实现实时性更好的目的，对一些优先级比较高的进程是会抢占其它进程的CPU的</strong>。而协程无法实现这一点，还得依赖于挡前使用CPU的协程主动释放，于操作系统的实现目的不相吻合。<strong>所以协程的高效是以牺牲可抢占性为代价的</strong>。</p><h1 id="软中断的开销"><a href="#软中断的开销" class="headerlink" title="软中断的开销"></a>软中断的开销</h1><p>现代的Linux发明了软件中断，配合硬中断来处理网络IO。硬中断你可以理解只是个收包的，把包收取回来放到“家里”就完事，很快就能完成，这样不耽误CPU响应其它外部高优先级的中断。而<strong>软中断优先级较低，负责将包进行各种处理，完成从驱动层、到网络协议栈，最终把处理出来的数据放到socker的接收buffer中。软中断消耗的CPU周期相对比硬中断要多不少。</strong></p><p>软中断和系统调用一样，都是CPU停止掉当前用户态上下文，保存工作现场，然后陷入到内核态继续工作。二者的唯一区别是系统调用是切换到同进程的内核态上下文，而软中断是则是切换到了另外一个内核进程ksoftirqd上。</p><p><strong>1） 查看软中断总耗时</strong><br>首先用top命令可以看出每个核上软中断的开销占比，是在<strong>si列</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">top</span>- <span class="token number">19</span>:51:24 up <span class="token number">78</span> days,  <span class="token number">7</span>:53,  <span class="token number">2</span> users,  load average: <span class="token number">1.30</span>, <span class="token number">1.35</span>, <span class="token number">1</span>.35Tasks: <span class="token number">923</span> total,   <span class="token number">2</span> running, <span class="token number">921</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombieCpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  <span class="token number">7.1</span>%us,  <span class="token number">1.4</span>%sy,  <span class="token number">0.0</span>%ni, <span class="token number">90.1</span>%id,  <span class="token number">0.1</span>%wa,  <span class="token number">0.2</span>%hi,  <span class="token number">1.2</span>%si,  <span class="token number">0.0</span>%stMem:  65872372k total, 64711668k used,  1160704k free,   339384k buffersSwap:        0k total,        0k used,        0k free, 55542632k cached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CPU大约花费了1.2%的时钟周期在软中断上，也就是说每个核要花费12ms。</p><p><strong>2）查看软中断次数</strong><br>再用vmstat命令可以看到软中断的次数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vmstat</span> <span class="token number">1</span>procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------r  b   swpd   <span class="token function">free</span>   buff  cache   si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span> wa st1  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1231716</span> <span class="token number">339244</span> <span class="token number">55474204</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">6</span>   <span class="token number">496</span>    <span class="token number">0</span>    <span class="token number">0</span>  <span class="token number">7</span>  <span class="token number">3</span> <span class="token number">90</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1231352</span> <span class="token number">339244</span> <span class="token number">55474204</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">128</span> <span class="token number">57402</span> <span class="token number">24593</span>  <span class="token number">5</span>  <span class="token number">2</span> <span class="token number">92</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1230988</span> <span class="token number">339244</span> <span class="token number">55474528</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">140</span> <span class="token number">55267</span> <span class="token number">24213</span>  <span class="token number">5</span>  <span class="token number">2</span> <span class="token number">93</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">2</span> <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1230988</span> <span class="token number">339244</span> <span class="token number">55474528</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">332</span> <span class="token number">56328</span> <span class="token number">23672</span>  <span class="token number">5</span>  <span class="token number">2</span> <span class="token number">93</span>  <span class="token number">0</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每秒大约有56000次左右的软中断（该机器上是web服务，网络IO密集型的机器，其它中断可以忽略不计）。</p><p><strong>3）计算每次软中断的耗时</strong><br>该机器是16核的物理实机，故可以得出每个软中断需要的CPU时间是=12ms/(56000/16)次=3.428us</p><p>从实验数据来看，<strong>一次软中断CPU开销大约3.4us左右</strong></p><p>这个时间里其实包含两部分，<strong>一是上下文切换开销，二是软中断内核执行开销</strong>。其中上下文切换和系统调用、进程上下文切换有很多相似的地方。</p><h1 id="系统调用的开销"><a href="#系统调用的开销" class="headerlink" title="系统调用的开销"></a>系统调用的开销</h1><h2 id="strace命令"><a href="#strace命令" class="headerlink" title="strace命令"></a><code>strace</code>命令</h2><p><code>strace命令</code>来查看到你的程序正在执行哪些系统调用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># strace -p 28927</span>Process <span class="token number">28927</span> attached  epoll_wait<span class="token punctuation">(</span><span class="token number">6</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">96829456</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">140312383422480</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">512</span>, -1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>accept4<span class="token punctuation">(</span><span class="token number">8</span>, <span class="token punctuation">&#123;</span>sa_family<span class="token operator">=</span>AF_INET, <span class="token assign-left variable">sin_port</span><span class="token operator">=</span>htons<span class="token punctuation">(</span><span class="token number">55465</span><span class="token punctuation">)</span>, <span class="token assign-left variable">sin_addr</span><span class="token operator">=</span>inet_addr<span class="token punctuation">(</span><span class="token string">"10.143.52.149"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span>, SOCK_NONBLOCK<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">13</span>  epoll_ctl<span class="token punctuation">(</span><span class="token number">6</span>, EPOLL_CTL_ADD, <span class="token number">13</span>, <span class="token punctuation">&#123;</span>EPOLLIN<span class="token operator">|</span>EPOLLRDHUP<span class="token operator">|</span>EPOLLET, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">96841984</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">140312383435008</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>  epoll_wait<span class="token punctuation">(</span><span class="token number">6</span>, <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>EPOLLIN, <span class="token punctuation">&#123;</span>u32<span class="token operator">=</span><span class="token number">96841984</span>, <span class="token assign-left variable">u64</span><span class="token operator">=</span><span class="token number">140312383435008</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>, <span class="token number">512</span>, <span class="token number">60000</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开销"><a href="#开销" class="headerlink" title="开销"></a>开销</h2><p>相比较函数调用时的不到1ns的耗时，系统调用确实开销蛮大的。虽然使用了“快速系统调用”指令，但耗时仍大约在<strong>200ns+，多的可能到十几us</strong>。每个系统调用内核要进行许多工作，大约需要执行1000条左右的CPU指令，所以确实应该尽量减少系统调用。但是即使是10us，仍然是1ms的百分之一，所以还没到了谈系统调用色变的程度，能理性认识到它的开销既可。</p><p>另外为什么系统调用之间的耗时相差这么多？因为系统调用花在内核态用户态的切换上的时间是差不多的，但区别在于不同的系统调用当进入到内核态之后要处理的工作不同，呆在内核态里的时候相差较大。</p><h1 id="函数调用的开销"><a href="#函数调用的开销" class="headerlink" title="函数调用的开销"></a>函数调用的开销</h1><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><ul><li><p>每个c函数调用耗时大约是<strong>0.4ns</strong>左右。</p></li><li><p>每个c函数需要的CPU指令数是8个！</p><p>8次CPU指令中大部分都是寄存器的操作，即使有“内存IO”，也是在栈上进行。而栈操作密集，符合局部性原理，早就被L1缓存住了，其实都是L1的IO，所以耗时很低</p></li></ul><h2 id="其他语言"><a href="#其他语言" class="headerlink" title="其他语言"></a>其他语言</h2><ul><li>php7：1000W次耗时0.667s，减去0.140s的for循环耗时，平均每次函数调用耗时52ns</li><li>php53：1000W次耗时2.1s，减去0.5s的for循环耗时，平均每次耗时160ns</li></ul><p>php的函数调用确实比c的要慢很多，从不到1ns升高到了50ns左右。因为php又用c虚拟了一层指令集，这层指令集还需要变成CPU的指令集后才可以真正运行。但是要知道的是ns这个时间单位太小了，假如你用的框架特别变态，一个用户请求来了直接就搞了1000次的函数调用，那么消耗在函数调用上的时间会是50ns*1000=50us。<strong>这和代码框架化后给团队项目带来的便利性来对比的话，这点时间开销，我觉得仍然是可以忽略的</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 《开发内功修炼》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《开发内功修炼-内存篇》学习笔记</title>
      <link href="/2022/02/25/kai-fa-nei-gong-xiu-lian-nei-cun-pian-xue-xi-bi-ji/"/>
      <url>/2022/02/25/kai-fa-nei-gong-xiu-lian-nei-cun-pian-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《开发内功修炼-内存篇》学习笔记"><a href="#《开发内功修炼-内存篇》学习笔记" class="headerlink" title="《开发内功修炼-内存篇》学习笔记"></a>《开发内功修炼-内存篇》学习笔记</h1><blockquote><p>目录</p><ol><li>CPU与内存的连接架构</li><li>查看Linux内存情况</li><li>内存的频率</li><li>内存在顺序IO和随机IO的延时差异</li><li>内存带宽</li><li>内核对内存的使用</li><li>关于内核问题的例子</li></ol><p>参考/来源：</p><ul><li>《开发内功修炼》微信公众号</li></ul></blockquote><p>从2001年DDR内存面世以来发展到2019年的今天，已经走过了DDR、DDR2、DDR3、DDR4四个大的规格时代了（DDR5现在也出来了）</p><h1 id="CPU与内存的连接架构"><a href="#CPU与内存的连接架构" class="headerlink" title="CPU与内存的连接架构"></a>CPU与内存的连接架构</h1><h2 id="FSB"><a href="#FSB" class="headerlink" title="FSB"></a>FSB</h2><p>​    是历史上CPU、内存数量比较少的年代里的总线方案-FSB。FSB的全称是Front Side Bus，因此也叫前端总线。CPU通过FSB总线连接到北桥芯片，然后再连接到内存。内存控制器是集成在北桥里的，Cpu和内存之间的通信全部都要通过这一条FSB总线来进行。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102116541.png" alt="image-20220302102116541"></p><p>提高计算机系统整体性能的方式就是不断地提高CPU、FSB总线、内存条的数据传输频率。</p><h2 id="NUMA时代"><a href="#NUMA时代" class="headerlink" title="NUMA时代"></a><strong>NUMA时代</strong></h2><p>CPU制造商们把内存控制器从北桥搬到了CPU内部，这样CPU便可以直接和自己的内存进行通信了。那么，如果CPU想要访问不和自己直连的内存条怎么办呢？所以就诞生了新的总线类型，它就叫QPI总线。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302101634743.png" alt="image-20220302101634743"></p><h3 id="查看NUMA的内存组"><a href="#查看NUMA的内存组" class="headerlink" title="查看NUMA的内存组"></a>查看NUMA的内存组</h3><p>每一个物理CPU都有不同的内存组，通过<code>numactl</code>命令可以查看这个分组情况。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># numactl --hardware</span>available: <span class="token number">2</span> nodes <span class="token punctuation">(</span><span class="token number">0</span>-1<span class="token punctuation">)</span><span class="token function">node</span> <span class="token number">0</span> cpus: <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span><span class="token function">node</span> <span class="token number">0</span> size: <span class="token number">32756</span> MB<span class="token function">node</span> <span class="token number">0</span> free: <span class="token number">19642</span> MB<span class="token function">node</span> <span class="token number">1</span> cpus: <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">18</span> <span class="token number">19</span> <span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span><span class="token function">node</span> <span class="token number">1</span> size: <span class="token number">32768</span> MB<span class="token function">node</span> <span class="token number">1</span> free: <span class="token number">18652</span> MB<span class="token function">node</span> distances:<span class="token function">node</span>   <span class="token number">0</span>   <span class="token number">1</span>  <span class="token number">0</span>:  <span class="token number">10</span>  <span class="token number">21</span>  <span class="token number">1</span>:  <span class="token number">21</span>  <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述命令可以看到，每一组CPU核分配了32GB（4条）的内存。</p><p> <code>node distance</code>是一个二维矩阵，描述node访问所有内存条的延时情况。 <code>node 0</code>里的CPU访问<code>node 0</code>里的内存相对距离是<code>10</code>,因为这时访问的内存都是和该CPU直连的。而<code>node 0</code>如果想访问<code>node 1</code>节点下的内存的话，就需要走QPI总线了，这时该相对距离就变成了<code>21</code>。</p><h3 id="测试内存访问速度"><a href="#测试内存访问速度" class="headerlink" title="测试内存访问速度"></a>测试内存访问速度</h3><p>拿8M数组，循环步长为64的数组来测试访问速度，<strong>同node耗时3.15纳秒，跨node为3.96纳秒</strong>。所以属于同一个node里的CPU和内存之间访问速度会比较快。而如果跨node的话，则需要经过QPI总线，总体来说，速度会略慢一些。</p><h3 id="ZONE的划分"><a href="#ZONE的划分" class="headerlink" title="ZONE的划分"></a>ZONE的划分</h3><p>每个 node 又会划分成若干的 <strong>zone（区域）</strong> 。zone 表示内存中的一块范围</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102125489.png" alt="image-20220302102125489"></p><ul><li>ZONE_DMA：地址段最低的一块内存区域，ISA(Industry Standard Architecture)设备DMA访问</li><li>ZONE_DMA32：该Zone用于支持32-bits地址总线的DMA设备，只在64-bits系统里才有效</li><li>ZONE_NORMAL：在X86-64架构下，DMA和DMA32之外的内存全部在NORMAL的Zone里管理</li></ul><p>在每个zone下，都包含了许许多多个 Page（页面）， 在linux下一个Page的大小一般是 4 KB。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102133618.png" alt="image-20220302102133618"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看zone的情况</span><span class="token comment"># cat /proc/zoneinfo</span>Node <span class="token number">0</span>, zone      DMA    pages <span class="token function">free</span>     <span class="token number">3973</span>        managed  <span class="token number">3973</span>Node <span class="token number">0</span>, zone    DMA32    pages <span class="token function">free</span>     <span class="token number">390390</span>        managed  <span class="token number">427659</span>Node <span class="token number">0</span>, zone   Normal    pages <span class="token function">free</span>     <span class="token number">15021616</span>        managed  <span class="token number">15990165</span>Node <span class="token number">1</span>, zone   Normal    pages <span class="token function">free</span>     <span class="token number">16012823</span>        managed  <span class="token number">16514393</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于伙伴系统管理空闲页面"><a href="#基于伙伴系统管理空闲页面" class="headerlink" title="基于伙伴系统管理空闲页面"></a>基于伙伴系统管理空闲页面</h3><p>每个 zone 下面都有如此之多的页面，Linux使用<strong>伙伴系统</strong>对这些页面进行高效的管理。在内核中，表示 zone 的数据结构是 <code>struct zone</code>。其下面的一个数组 free_area 管理了绝大部分可用的空闲页面。这个数组就是<strong>伙伴系统</strong>实现的重要数据结构。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">//file: include/linux/mmzone.h<span class="token comment">#define MAX_ORDER 11</span>struct zone <span class="token punctuation">&#123;</span>    free_area   free_area<span class="token punctuation">[</span>MAX_ORDER<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>free_area是一个11个元素的数组，在每一个数组分别代表的是空闲可分配连续4K、8K、16K、……、4M内存链表。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102152275.png" alt="image-20220302102152275"></p><p>基于伙伴系统的内存分配中，有可能需要将大块内存拆分成两个小伙伴。在释放中，可能会将两个小伙伴合并再次组成更大块的连续内存。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102202256.png" alt="image-20220302102202256"></p><p>内核提供分配器函数 <code>alloc_pages</code> 到上面的多个链表中寻找可用连续页面。</p><h3 id="NUMA陷阱"><a href="#NUMA陷阱" class="headerlink" title="NUMA陷阱"></a>NUMA陷阱</h3><p>NUMA陷阱指的是引入QPI总线后，在计算机系统里可能会存在的一个坑。</p><p>大致的意思就是如果你的机器打开了numa，那么你的内存即使在充足的情况下，也会<strong>使用磁盘上的swap</strong>，导致性能低下。</p><p>原因就是NUMA为了高效，会仅仅只从你的当前node里分配内存，只要当前node里用光了（即使其它node还有），也仍然会启用硬盘swap。</p><p>再看<strong>zone_reclaim_mode</strong>，它用来管理当一个内存区域(zone)内部的内存耗尽时，是从其内部进行内存回收还是可以从其他zone进行回收的选项：</p><ul><li>0 关闭zone_reclaim模式，可以从其他zone或NUMA节点回收内存</li><li>1 打开zone_reclaim模式，这样内存回收只会发生在本地节点内</li><li>2 在本地回收内存时，可以将cache中的脏数据写回硬盘，以回收内存</li><li>4 在本地回收内存时，表示可以用Swap 方式回收内存</li></ul><pre class="line-numbers language-none"><code class="language-none"># cat &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;zone_reclaim_mode1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="查看Linux内存情况"><a href="#查看Linux内存情况" class="headerlink" title="查看Linux内存情况"></a>查看Linux内存情况</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># dmidecode|grep -P -A5 "Memory\s+Device"|grep Size</span>        Size: <span class="token number">8192</span> MB        Size: <span class="token number">8192</span> MB        Size: No Module Installed        Size: <span class="token number">8192</span> MB        Size: No Module Installed        Size: <span class="token number">8192</span> MB        Size: <span class="token number">8192</span> MB        Size: <span class="token number">8192</span> MB        Size: No Module Installed        Size: <span class="token number">8192</span> MB        Size: No Module Installed        Size: <span class="token number">8192</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>共插了8条8G的内存, 所以总共是64GB。</p><h1 id="内存的频率"><a href="#内存的频率" class="headerlink" title="内存的频率"></a>内存的频率</h1><p>实际上有两个频率参数：</p><ul><li><p>工作频率</p><p>内存的工作频率从DDR时代的266MHz进化到了今天的3200MHz。这个频率在操作系统里叫Speed，在内存术语里叫等效频率、或干脆直接简称频率。</p><p>这个频率越高，每秒钟内存IO的吞吐量越大。</p></li><li><p>核心频率</p><p>但其实内存有一个最最基本的频率叫核心频率，<strong>是实际内存电路的工作时的一个振荡频率</strong>。它是内存工作的基础，很大程度上会影响内存的IO延迟。我今天想给大家揭开另外一面，这个叫核心频率的东东其实在最近的18年里，基本上就没有什么太大的进步。</p></li></ul><h2 id="查询内存的频率信息"><a href="#查询内存的频率信息" class="headerlink" title="查询内存的频率信息"></a>查询内存的频率信息</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># dmidecode | grep -P -A16 "Memory Device"</span>Memory DeviceArray Handle: 0x0009Error Information Handle: Not ProvidedTotal Width: <span class="token number">72</span> bitsData Width: <span class="token number">64</span> bitsSize: <span class="token number">8192</span> MBForm Factor: DIMMSet: NoneLocator: DIMM02Bank Locator: BANK02Type: OtherType Detail: UnknownSpeed: <span class="token number">1067</span> MHzManufacturer: MicronSerial Number: 65ED91DCAsset Tag: UnknownPart Number: 36KSF1G72PZ-1G4M1<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有两个数据比较关键。</p><ul><li>Speed: 1067 MHz：每秒能进行内存数据传输的速度. <strong>这里实际是工作频率</strong></li><li>Data Width: 64 bits：内存工作一次传输的数据宽度</li></ul><h2 id="对比历代DDR参数"><a href="#对比历代DDR参数" class="headerlink" title="对比历代DDR参数"></a>对比历代DDR参数</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/640" alt="图片"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102220072.png" alt="image-20220302102220072"></p><p><strong>汇总一句话，内存真正的工作频率是核心频率，时钟频率和数据频率都是在核心频率的基础上，通过技术手段放大出来的。内存越新，放大的倍数越多。</strong></p><h1 id="内存在顺序和随机IO的延时差异"><a href="#内存在顺序和随机IO的延时差异" class="headerlink" title="内存在顺序和随机IO的延时差异"></a>内存在顺序和随机IO的延时差异</h1><h2 id="测试顺序IO"><a href="#测试顺序IO" class="headerlink" title="测试顺序IO"></a>测试顺序IO</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_data</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">seque_access</span><span class="token punctuation">(</span><span class="token keyword">int</span> elems<span class="token punctuation">,</span> <span class="token keyword">int</span> stride<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token keyword">volatile</span> <span class="token keyword">double</span> sink<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elems<span class="token punctuation">;</span> i <span class="token operator">+=</span> stride<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> result <span class="token operator">+=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> sink <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一是数组大小，数组越小，高速缓存命中率越高，平均延时就会越低。</li><li>二是循环步长，步长越小，顺序性越好，同样也会增加缓存命中率，平均延时也低。</li></ul><p>我们在测试的过程中采取的办法是，固定其中一个变量，然后动态调节另外一个变量来查看效果。现象：</p><ul><li><p><strong>固定数组大小2K，调节步长</strong></p><p>数组足够小的时候，L1 cache全部都能装的下。内存IO发生较少，大部分都是高效的缓存IO，所以我这里看到的内存延时只有1ns左右，这其实只是虚拟地址转换+L1访问的延时。</p></li><li><p><strong>固定步长为8，数组从32K到64M</strong></p><p>当数组越来越大，Cache装不下，导致穿透高速缓存，到内存实际IO的次数就会变多，平均耗时就增加</p></li><li><p><strong>步长为32，数组从32K到64M</strong></p><p>步长变大以后，局部性变差，穿透的内存IO进一步增加。虽然数据量一样大，但是平均耗时就会继续有所上涨。不过虽然穿透增加，但由于访问地址仍然相对比较连续，所以即使发生内存IO也绝大部分都是行地址不变的顺序IO情况。所以耗时在9ns左右</p></li></ul><h2 id="测试随机IO"><a href="#测试随机IO" class="headerlink" title="测试随机IO"></a>测试随机IO</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_data</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">random_access</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> random_index_arr<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token keyword">volatile</span> <span class="token keyword">double</span> sink<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> result <span class="token operator">+=</span> data<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>random_index_arr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> sink <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数组从32K到64M</strong>。当数据集比较小的时候、L1、L2、L3还能抗一抗。但当增加到16M、64M以后，穿透到内存的IO情况会变多，穿透过去以后极大可能行地址也会变。在64M的数据集中，内存的延时竟然下降到了38.4ns.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内存存在随机访问比顺序访问慢的多的情况，大概是4:1的关系。</p><h1 id="内存带宽"><a href="#内存带宽" class="headerlink" title="内存带宽"></a>内存带宽</h1><p>理论上内存带宽的计算公式是：Band Width = Speed * Data Width。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102228612.png" alt="image-20220302102228612"></p><p>在DDR3,1067MHz的条件下，测量的实际带宽：</p><ul><li><p>在数据较小，实际内存IO发生的很少时，大部分都是更高效的L1 cache的IO，在CPU内部就完成了。但最高值也才6G而已，也没有达到厂家宣称的8GB。</p></li><li><p>在随机IO工作模式的情况下，带宽只有474M而已。现在SSD固态硬盘顺序IO也差不多能达到这个数量级了</p></li></ul><h1 id="内核对内存的使用"><a href="#内核对内存的使用" class="headerlink" title="内核对内存的使用"></a>内核对内存的使用</h1><p>不同于给应用程序提供的虚拟内存机制，内核使用slab的分配器来申请内存。比如TCP连接时内存的运用等等。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102239970.png" alt="image-20220302102239970"></p><p>对于各个内核运行中实际使用的对象来说，多大的对象都有。有的对象有1K多，但有的对象只有几百、甚至几十个字节。如果都直接分配一个 4K的页面 来存储的话也太败家了，所以伙伴系统并不能直接使用。</p><p>在伙伴系统之上，<strong>内核又给自己搞了一个专用的内存分配器， 叫slab或slub</strong>。</p><p>这个分配器最大的特点就是，一个slab内只分配特定大小、甚至是特定的对象。这样当一个对象释放内存后，另一个同类对象可以直接使用这块内存。通过这种办法极大地降低了碎片发生的几率。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102246288.png" alt="image-20220302102246288"></p><p>slab相关的内核对象定义如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;file: include&#x2F;linux&#x2F;slab_def.hstruct kmem_cache &#123;    struct kmem_cache_node **node    ......&#125;&#x2F;&#x2F;file: mm&#x2F;slab.hstruct kmem_cache_node &#123;    struct list_head slabs_partial;     struct list_head slabs_full;    struct list_head slabs_free;    ......&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个cache都有满、半满、空三个链表。每个链表节点都对应一个 slab，一个 slab 由 1 个或者多个内存页组成。</p><p><strong>在每一个 slab 内都保存的是同等大小的对象。</strong> 一个cache的组成示意图如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102254865.png" alt="image-20220302102254865"></p><p>当 cache 中内存不够的时候，会调用基于伙伴系统的分配器（__alloc_pages函数）请求整页连续内存的分配。</p><h1 id="关于内存问题的例子"><a href="#关于内存问题的例子" class="headerlink" title="关于内存问题的例子"></a>关于内存问题的例子</h1><h2 id="Redis存储结构的设计"><a href="#Redis存储结构的设计" class="headerlink" title="Redis存储结构的设计"></a>Redis存储结构的设计</h2><ul><li><p>需求</p><p>需求的几个关键点：</p><ul><li>每个数据id是一个int整数来表示</li><li>每个用户要保存1万条id</li><li>每次用户刷新开始的时候需要将这1万条历史全部读取出来过滤一遍</li><li>每次用户刷新结束的时候需要将新访问过的10条写入一遍，如果超过1万需将最早的记录挤掉</li></ul><p>所以，每次用户访问的时候，会涉及到一个1万规模的数据集上的一次读取和一次写入操作。</p></li><li><p>Redis的两种使用方法</p><ul><li><p><strong>用list存储</strong> </p></li><li><p><strong>用string存储</strong> </p><p>把1万个int表示的数据id拼接成一个字符串，用一个特殊的字符把他们分割开。例如：”100000_100001_10002”这种。存储的时候，拼接一下，然后把这个大字符串写到Redis里。读取的时候，把大字符串整体读取出来，然后再用字符切割成数组来使用。</p></li></ul></li><li><p>测试结果</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220302102306125.png" alt="image-20220302102306125"></p></li><li><p>结果分析</p><ul><li><p>List</p><p>基于list的方案里，写入速度非常快，只需要0.066ms，因为仅仅只需要写入新添加的10条记录就可以了，再加一次链表的截断操作，</p><p>但是读取性能可就要慢很多了，超过了4ms。原因之一是因为读取需要整体遍历，但其实还有第二个原因。我们本案例中的数据量过大，所以Redis在内部实际上是用双端链表来实现的。链表是通过指针串起来的。大量的node之间极大可能是随机地分布在内存的各个位置上，这样你遍历整个链表的时候，实际上大概率会导致内存的随机模式下工作。.</p></li><li><p>String</p><p>基于string方案在写入的时候耗时比list要高，因为每次都得需要将1万条全部写入一遍。</p><p>但是读取性能却比list高了10倍，这和Redis的String数据结构有关（底层是个数组来保存）。用string来存储的话，不管用户的数据id有多少，访问将全部都是顺序IO。顺序IO的好处有两点：</p><ul><li>一内存的顺序IO的耗时大约只是随机IO的1/3-1/4左右，</li><li> 对于读取来说，顺序访问将极大地提升CPU的L1、L2、L3的cache命中率</li></ul></li></ul></li></ul><h2 id="Redis内存过高性能将急剧下降"><a href="#Redis内存过高性能将急剧下降" class="headerlink" title="Redis内存过高性能将急剧下降"></a>Redis内存过高性能将急剧下降</h2><p>由NUMA陷阱引起的</p><ul><li><p>实验1</p><p>在zone_reclaim_mode为1的情况下，Redis是平均在两个node里申请节点的，并没有固定在某一个cpu里。</p><p>因为如果不绑定亲和性的话，分配内存是当进程在哪个node上的CPU发起内存申请，就优先在哪个node里分配内存。之所以是平均分配在两个node里，是因为redis-server进程实验中经常会进入主动睡眠状态，醒来后可能CPU就换了。所以基本上，最后看起来内存是平均分配的。如下图，CPU进行了500万次的上下文切换，用top命令看到cpu也是在node0和node1跳来跳去。</p></li><li><p>实验2</p><p>绑定CPU和内存的亲和性，然后再启动。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">numactl --cpunodebind<span class="token operator">=</span><span class="token number">0</span> --membind<span class="token operator">=</span><span class="token number">0</span> /search/odin/daemon/redis/bin/redis-server /search/odin/daemon/redis/conf/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候，Redis实际使用的物理内存RES定格到了30g不再上涨，而是开始消耗Swap。又过了一会儿，Redis被oom给kill了。</p><p><strong>当通过<code>numactl</code>绑定CPU和mem都在一个node里的时候，内存IO不需要经过总线，性能会比较高，你Redis的QPS能力也会上涨</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 《开发内功修炼》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《SpringSecurity+JWT》B站三更草堂笔记</title>
      <link href="/2022/02/24/springsecurity-jwt-b-zhan-san-geng-cao-tang-bi-ji/"/>
      <url>/2022/02/24/springsecurity-jwt-b-zhan-san-geng-cao-tang-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目录：</p><ul><li>1-7节，课件</li><li>8节，我的笔记</li></ul><p>来源：</p><ul><li>B站三更草堂《SpringSecurity从入门到精通》</li></ul></blockquote><h1 id="SpringSecurity从入门到精通"><a href="#SpringSecurity从入门到精通" class="headerlink" title="SpringSecurity从入门到精通"></a>SpringSecurity从入门到精通</h1><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211219121555979.png" alt="image-20211219121555979"></p><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0. 简介"></a>0. 简介</h2><p>​    <strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。</p><p>​    一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。</p><p>​     一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p><p>​        <strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p><p>​        <strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p><p>​    而认证和授权也是SpringSecurity作为安全框架的核心功能。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>​    我们先要搭建一个简单的SpringBoot工程</p><p>① 设置父工程 添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 创建启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SecurityApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 创建Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-引入SpringSecurity"><a href="#1-2-引入SpringSecurity" class="headerlink" title="1.2 引入SpringSecurity"></a>1.2 引入SpringSecurity</h3><p>​    在SpringBoot项目中使用SpringSecurity我们只需要引入依赖即可实现入门案例。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个SpringSecurity的默认登陆页面，默认用户名是user,密码会输出在控制台。</p><p>​    必须登陆之后才能对接口进行访问。</p><h2 id="2-认证"><a href="#2-认证" class="headerlink" title="2. 认证"></a>2. 认证</h2><h3 id="2-1-登陆校验流程"><a href="#2-1-登陆校验流程" class="headerlink" title="2.1 登陆校验流程"></a>2.1 登陆校验流程</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211215094003288.png" alt="image-20211215094003288"></p><h3 id="2-2-原理初探"><a href="#2-2-原理初探" class="headerlink" title="2.2 原理初探"></a>2.2 原理初探</h3><p>​    想要知道如何实现自己的登陆流程就必须要先知道入门案例中SpringSecurity的流程。</p><h4 id="2-2-1-SpringSecurity完整流程"><a href="#2-2-1-SpringSecurity完整流程" class="headerlink" title="2.2.1 SpringSecurity完整流程"></a>2.2.1 SpringSecurity完整流程</h4><p>​    SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211214144425527.png" alt="image-20211214144425527"></p><p>​    图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p><p><strong>FilterSecurityInterceptor：</strong>负责权限校验的过滤器。</p><p>​    </p><p>​    我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211214145824903.png" alt="image-20211214145824903"></p><h4 id="2-2-2-认证流程详解"><a href="#2-2-2-认证流程详解" class="headerlink" title="2.2.2 认证流程详解"></a>2.2.2 认证流程详解</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211214151515385.png" alt="image-20211214151515385"></p><p>概念速查:</p><p>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p><p>AuthenticationManager接口：定义了认证Authentication的方法 </p><p>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p><p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p><h3 id="2-3-解决问题"><a href="#2-3-解决问题" class="headerlink" title="2.3 解决问题"></a>2.3 解决问题</h3><h4 id="2-3-1-思路分析"><a href="#2-3-1-思路分析" class="headerlink" title="2.3.1 思路分析"></a>2.3.1 思路分析</h4><p>登录</p><p>​    ①自定义登录接口  </p><p>​                调用ProviderManager的方法进行认证 如果认证通过生成jwt</p><p>​                把用户信息存入redis中</p><p>​    ②自定义UserDetailsService </p><p>​                在这个实现类中去查询数据库</p><p>校验：</p><p>​    ①定义Jwt认证过滤器</p><p>​                获取token</p><p>​                解析token获取其中的userid</p><p>​                从redis中获取用户信息</p><p>​                存入SecurityContextHolder</p><h4 id="2-3-2-准备工作"><a href="#2-3-2-准备工作" class="headerlink" title="2.3.2 准备工作"></a>2.3.2 准备工作</h4><p>①添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--redis依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--fastjson依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--jwt依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 添加Redis相关配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializerFeature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">JavaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">TypeFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token comment">/** * Redis使用FastJson序列化 *  * @author sg */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Charset</span> DEFAULT_CHARSET <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">static</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteClassName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token class-name">JavaType</span> <span class="token function">getJavaType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">TypeFactory</span><span class="token punctuation">.</span><span class="token function">defaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructType</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">StringRedisSerializer</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FastJsonRedisSerializer</span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Hash的key也采用StringRedisSerializer的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 响应类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonInclude</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 状态码     */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token comment">/**     * 提示信息，如果有错误时，前端可以获取该字段进行提示     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token comment">/**     * 查询到的结果数据，     */</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Claims</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">SecretKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token comment">/** * JWT工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//有效期为</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> JWT_TTL <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">;</span><span class="token comment">// 60 * 60 *1000  一个小时</span>    <span class="token comment">//设置秘钥明文</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JWT_KEY <span class="token operator">=</span> <span class="token string">"sangeng"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 生成jtw     * @param subject token中要存放的数据（json格式）     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置过期时间</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成jtw     * @param subject token中要存放的数据（json格式）     * @param ttlMillis token超时时间     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> ttlMillis<span class="token punctuation">,</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置过期时间</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JwtBuilder</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">,</span> <span class="token class-name">String</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm <span class="token operator">=</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">;</span>        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> nowMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ttlMillis<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ttlMillis<span class="token operator">=</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span>JWT_TTL<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> expMillis <span class="token operator">=</span> nowMillis <span class="token operator">+</span> ttlMillis<span class="token punctuation">;</span>        <span class="token class-name">Date</span> expDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>              <span class="token comment">//唯一的ID</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>   <span class="token comment">// 主题  可以是JSON数据</span>                <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"sg"</span><span class="token punctuation">)</span>     <span class="token comment">// 签发者</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>      <span class="token comment">// 签发时间</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span> <span class="token comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>expDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建token     * @param id     * @param subject     * @param ttlMillis     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> ttlMillis<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置过期时间</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg"</span><span class="token punctuation">;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成加密后的秘钥 secretKey     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encodedKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span>JWT_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecretKey</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>encodedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> encodedKey<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 解析     *     * @param jwt     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Claims</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> jwt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCache</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 缓存基本的对象，Integer、String、实体类等     *     * @param key 缓存的键值     * @param value 缓存的值     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 缓存基本的对象，Integer、String、实体类等     *     * @param key 缓存的键值     * @param value 缓存的值     * @param timeout 时间     * @param timeUnit 时间颗粒度     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> timeout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置有效时间     *     * @param key Redis键     * @param timeout 超时时间     * @return true=设置成功；false=设置失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置有效时间     *     * @param key Redis键     * @param timeout 超时时间     * @param unit 时间单位     * @return true=设置成功；false=设置失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得缓存的基本对象。     *     * @param key 缓存键值     * @return 缓存键值对应的数据     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getCacheObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> operation <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除单个对象     *     * @param key     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除集合对象     *     * @param collection 多个对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span> collection<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 缓存List数据     *     * @param key 缓存的键值     * @param dataList 待缓存的List数据     * @return 缓存的对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">long</span> <span class="token function">setCacheList</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataList<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得缓存的list对象     *     * @param key 缓存的键值     * @return 缓存键值对应的数据     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getCacheList</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 缓存Set     *     * @param key 缓存键值     * @param dataSet 缓存的数据     * @return 缓存数据的对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">BoundSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">setCacheSet</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> dataSet<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">BoundSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> setOperation <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundSetOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            setOperation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> setOperation<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得缓存的set     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getCacheSet</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 缓存Map     *     * @param key     * @param dataMap     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setCacheMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> dataMap<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得缓存的Map     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getCacheMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 往Hash中存入数据     *     * @param key Redis键     * @param hKey Hash键     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">setCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> hKey<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取Hash中的数据     *     * @param key Redis键     * @param hKey Hash键     * @return Hash中的对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> hKey<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> opsForHash <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> opsForHash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除Hash中的数据     *      * @param key     * @param hkey     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> hkey<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">HashOperations</span> hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashOperations<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取多个Hash中的数据     *     * @param key Redis键     * @param hKeys Hash键集合     * @return Hash对象集合     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getMultiCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> hKeys<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获得缓存的基本对象列表     *     * @param pattern 字符串前缀     * @return 对象列表     */</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebUtils</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 将字符串渲染到客户端     *      * @param response 渲染对象     * @param string 待渲染的字符串     * @return null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">renderString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span>        <span class="token punctuation">&#123;</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 用户表(User)实体类 * * @author 三更 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">40356785423868312L</span><span class="token punctuation">;</span>        <span class="token comment">/**    * 主键    */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**    * 用户名    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">/**    * 昵称    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>    <span class="token comment">/**    * 密码    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">/**    * 账号状态（0正常 1停用）    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>    <span class="token comment">/**    * 邮箱    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token comment">/**    * 手机号    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phonenumber<span class="token punctuation">;</span>    <span class="token comment">/**    * 用户性别（0男，1女，2未知）    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token comment">/**    * 头像    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>    <span class="token comment">/**    * 用户类型（0管理员，1普通用户）    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userType<span class="token punctuation">;</span>    <span class="token comment">/**    * 创建人的用户id    */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> createBy<span class="token punctuation">;</span>    <span class="token comment">/**    * 创建时间    */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**    * 更新人    */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> updateBy<span class="token punctuation">;</span>    <span class="token comment">/**    * 更新时间    */</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/**    * 删除标志（0代表未删除，1代表已删除）    */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> delFlag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-3-实现"><a href="#2-3-3-实现" class="headerlink" title="2.3.3 实现"></a>2.3.3 实现</h4><h5 id="2-3-3-1-数据库校验用户"><a href="#2-3-3-1-数据库校验用户" class="headerlink" title="2.3.3.1 数据库校验用户"></a>2.3.3.1 数据库校验用户</h5><p>​    从之前的分析我们可以知道，我们可以自定义一个UserDetailsService,让SpringSecurity使用我们的UserDetailsService。我们自己的UserDetailsService可以从数据库中查询用户名和密码。</p><h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><p>​    我们先创建一个用户表， 建表语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;sys_user&#96; (  &#96;id&#96; BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,  &#96;user_name&#96; VARCHAR(64) NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;用户名&#39;,  &#96;nick_name&#96; VARCHAR(64) NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;昵称&#39;,  &#96;password&#96; VARCHAR(64) NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;密码&#39;,  &#96;status&#96; CHAR(1) DEFAULT &#39;0&#39; COMMENT &#39;账号状态（0正常 1停用）&#39;,  &#96;email&#96; VARCHAR(64) DEFAULT NULL COMMENT &#39;邮箱&#39;,  &#96;phonenumber&#96; VARCHAR(32) DEFAULT NULL COMMENT &#39;手机号&#39;,  &#96;sex&#96; CHAR(1) DEFAULT NULL COMMENT &#39;用户性别（0男，1女，2未知）&#39;,  &#96;avatar&#96; VARCHAR(128) DEFAULT NULL COMMENT &#39;头像&#39;,  &#96;user_type&#96; CHAR(1) NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;用户类型（0管理员，1普通用户）&#39;,  &#96;create_by&#96; BIGINT(20) DEFAULT NULL COMMENT &#39;创建人的用户id&#39;,  &#96;create_time&#96; DATETIME DEFAULT NULL COMMENT &#39;创建时间&#39;,  &#96;update_by&#96; BIGINT(20) DEFAULT NULL COMMENT &#39;更新人&#39;,  &#96;update_time&#96; DATETIME DEFAULT NULL COMMENT &#39;更新时间&#39;,  &#96;del_flag&#96; INT(11) DEFAULT &#39;0&#39; COMMENT &#39;删除标志（0代表未删除，1代表已删除）&#39;,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;用户表&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        引入MybatisPuls和mysql驱动的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        配置数据库信息</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">spring:  datasource:    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;sg_security?characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;UTC    username: root    password: root    driver-class-name: com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        定义Mapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        修改User实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">类名上加<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sys_user"</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>id字段上加 <span class="token annotation punctuation">@TableId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        配置Mapper扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.sangeng.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSecurityApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SimpleSecurityApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        添加junit依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​       测试MP是否能正常使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapperTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="核心代码实现"><a href="#核心代码实现" class="headerlink" title="核心代码实现"></a>核心代码实现</h6><p>创建一个类实现UserDetailsService接口，重写其中的方法。更加用户名从数据库中查询用户信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//根据用户名查询用户信息</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果查询不到数据就通过抛出异常来给出提示</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span>                <span class="token comment">//封装成UserDetails对象返回 </span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为UserDetailsService方法的返回值是UserDetails类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUser</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加{noop}。例如</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211216123945882.png" alt="image-20211216123945882"></p><p>这样登陆的时候就可以用sg作为用户名，1234作为密码来登陆了。</p><h5 id="2-3-3-2-密码加密存储"><a href="#2-3-3-2-密码加密存储" class="headerlink" title="2.3.3.2 密码加密存储"></a>2.3.3.2 密码加密存储</h5><p>​    实际项目中我们不会把密码明文存储在数据库中。</p><p>​    默认使用的PasswordEncoder要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。</p><p>​    我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。</p><p>​    我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。</p><p>​    我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-3-3-登陆接口"><a href="#2-3-3-3-登陆接口" class="headerlink" title="2.3.3.3 登陆接口"></a>2.3.3.3 登陆接口</h5><p>​    接下我们需要自定义登陆接口，然后让SpringSecurity对这个接口放行,让用户访问这个接口的时候不用登录也能访问。</p><p>​    在接口中我们通过AuthenticationManager的authenticate方法来进行用户认证,所以需要在SecurityConfig中配置把AuthenticationManager注入容器。</p><p>​    认证成功的话要生成一个jwt，放入响应中返回。并且为了让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把用户信息存入redis，可以把用户id作为key。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LoginServcie</span> loginServcie<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> loginServcie<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http                <span class="token comment">//关闭csrf</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//不通过Session获取SecurityContext</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 对于登录接口 允许匿名访问</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginServcie</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>authenticate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//使用userid生成token</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//authenticate存入redis</span>        redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token string">"login:"</span><span class="token operator">+</span>userId<span class="token punctuation">,</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把token响应给前端</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登陆成功"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-3-4-认证过滤器"><a href="#2-3-3-4-认证过滤器" class="headerlink" title="2.3.3.4 认证过滤器"></a>2.3.3.4 认证过滤器</h5><p>​    我们需要自定义一个过滤器，这个过滤器会去获取请求头中的token，对token进行解析取出其中的userid。</p><p>​    使用userid去redis中获取对应的LoginUser对象。</p><p>​    然后封装Authentication对象存入SecurityContextHolder</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取token</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//放行</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//解析token</span>        <span class="token class-name">String</span> userid<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            userid <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"token非法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//从redis中获取用户信息</span>        <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token string">"login:"</span> <span class="token operator">+</span> userid<span class="token punctuation">;</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> redisCache<span class="token punctuation">.</span><span class="token function">getCacheObject</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//存入SecurityContextHolder</span>        <span class="token comment">//TODO 获取权限信息封装到Authentication中</span>        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//放行</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JwtAuthenticationTokenFilter</span> jwtAuthenticationTokenFilter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http                <span class="token comment">//关闭csrf</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//不通过Session获取SecurityContext</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 对于登录接口 允许匿名访问</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把token校验过滤器添加到过滤器链中</span>        http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-3-5-退出登陆"><a href="#2-3-3-5-退出登陆" class="headerlink" title="2.3.3.5 退出登陆"></a>2.3.3.5 退出登陆</h5><p>​    我们只需要定义一个登陆接口，然后获取SecurityContextHolder中的认证信息，删除redis中对应的数据即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginServcie</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Authentication</span> authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>authenticate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//使用userid生成token</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//authenticate存入redis</span>        redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token string">"login:"</span><span class="token operator">+</span>userId<span class="token punctuation">,</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把token响应给前端</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"登陆成功"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> userid <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisCache<span class="token punctuation">.</span><span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token string">"login:"</span><span class="token operator">+</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token string">"退出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-授权"><a href="#3-授权" class="headerlink" title="3. 授权"></a>3. 授权</h2><h3 id="3-0-权限系统的作用"><a href="#3-0-权限系统的作用" class="headerlink" title="3.0 权限系统的作用"></a>3.0 权限系统的作用</h3><p>​    例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p><p>​    总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p><p>​    我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p><p>​    所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</p><p>​    </p><h3 id="3-1-授权基本流程"><a href="#3-1-授权基本流程" class="headerlink" title="3.1 授权基本流程"></a>3.1 授权基本流程</h3><p>​    在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p><p>​    所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。</p><p>​    然后设置我们的资源所需要的权限即可。</p><h3 id="3-2-授权实现"><a href="#3-2-授权实现" class="headerlink" title="3.2 授权实现"></a>3.2 授权实现</h3><h4 id="3-2-1-限制访问资源所需权限"><a href="#3-2-1-限制访问资源所需权限" class="headerlink" title="3.2.1 限制访问资源所需权限"></a>3.2.1 限制访问资源所需权限</h4><p>​    SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p><p>​    但是要使用它我们需要先开启相关配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    然后就可以使用对应的注解。@PreAuthorize</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('test')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-封装权限信息"><a href="#3-2-2-封装权限信息" class="headerlink" title="3.2.2 封装权限信息"></a>3.2.2 封装权限信息</h4><p>​    我们前面在写UserDetailsServiceImpl的时候说过，在查询出用户后还要获取对应的权限信息，封装到UserDetails中返回。</p><p>​    我们先直接把权限信息写死封装到UserDetails中进行测试。</p><p>​    我们之前定义了UserDetails的实现类LoginUser，想要让其能封装权限信息就要对其进行修改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JSONField</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>authority<span class="token punctuation">.</span></span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUser</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span>            <span class="token comment">//存储权限信息</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>permissions <span class="token operator">=</span> permissions<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//存储SpringSecurity所需要的权限信息的集合</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> authorities<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span>  <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>authorities<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//把permissions中字符串类型的权限信息转换成GrantedAuthority对象存入authorities中</span>        authorities <span class="token operator">=</span> permissions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        LoginUser修改完后我们就可以在UserDetailsServiceImpl中去把权限信息封装到LoginUser中了。我们写死权限进行测试，后面我们再从数据库中查询权限信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryChainWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">LoginUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//TODO 根据用户查询权限信息 添加到LoginUser中</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-从数据库查询权限信息"><a href="#3-2-3-从数据库查询权限信息" class="headerlink" title="3.2.3 从数据库查询权限信息"></a>3.2.3 从数据库查询权限信息</h4><h5 id="3-2-3-1-RBAC权限模型"><a href="#3-2-3-1-RBAC权限模型" class="headerlink" title="3.2.3.1 RBAC权限模型"></a>3.2.3.1 RBAC权限模型</h5><p>​    RBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</p><p>​    <img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222110249727.png" alt="image-20211222110249727"></p><h5 id="3-2-3-2-准备工作"><a href="#3-2-3-2-准备工作" class="headerlink" title="3.2.3.2 准备工作"></a>3.2.3.2 准备工作</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token comment">/*!32312 IF NOT EXISTS*/</span><span class="token identifier"><span class="token punctuation">`</span>sg_security<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token identifier"><span class="token punctuation">`</span>sg_security<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `sys_menu` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>sys_menu<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sys_menu<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>menu_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'NULL'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单名'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>path<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'路由地址'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>component<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'组件路径'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>visible<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单状态（0显示 1隐藏）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>perms<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'权限标识'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>icon<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'#'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单图标'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_by<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_by<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否删除（0未删除 1已删除）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>remark<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'菜单表'</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `sys_role` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>sys_role<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sys_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>role_key<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色权限字符串'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'del_flag'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_by<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_by<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>remark<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'角色表'</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `sys_role_menu` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>sys_role_menu<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sys_role_menu<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色ID'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'菜单id'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>menu_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span class="token comment">/*Table structure for table `sys_user` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>sys_user<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sys_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>user_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'NULL'</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>nick_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'NULL'</span> <span class="token keyword">COMMENT</span> <span class="token string">'昵称'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'NULL'</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'账号状态（0正常 1停用）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>phonenumber<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户性别（0男，1女，2未知）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>avatar<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'头像'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>user_type<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户类型（0管理员，1普通用户）'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_by<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建人的用户id'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_by<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新人'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>del_flag<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'删除标志（0代表未删除，1代表已删除）'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户表'</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `sys_user_role` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>sys_user_role<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>sys_user_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户id'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'角色id'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>role_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT m.&#96;perms&#96;FROMsys_user_role urLEFT JOIN &#96;sys_role&#96; r ON ur.&#96;role_id&#96; &#x3D; r.&#96;id&#96;LEFT JOIN &#96;sys_role_menu&#96; rm ON ur.&#96;role_id&#96; &#x3D; rm.&#96;role_id&#96;LEFT JOIN &#96;sys_menu&#96; m ON m.&#96;id&#96; &#x3D; rm.&#96;menu_id&#96;WHEREuser_id &#x3D; 2AND r.&#96;status&#96; &#x3D; 0AND m.&#96;status&#96; &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>domain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonInclude</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * 菜单表(Menu)实体类 * * @author makejava * @since 2021-11-24 15:30:08 */</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"sys_menu"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">54979041104113736L</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**    * 菜单名    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> menuName<span class="token punctuation">;</span>    <span class="token comment">/**    * 路由地址    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>    <span class="token comment">/**    * 组件路径    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> component<span class="token punctuation">;</span>    <span class="token comment">/**    * 菜单状态（0显示 1隐藏）    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> visible<span class="token punctuation">;</span>    <span class="token comment">/**    * 菜单状态（0正常 1停用）    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>    <span class="token comment">/**    * 权限标识    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> perms<span class="token punctuation">;</span>    <span class="token comment">/**    * 菜单图标    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> icon<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Long</span> createBy<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Long</span> updateBy<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token comment">/**    * 是否删除（0未删除 1已删除）    */</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> delFlag<span class="token punctuation">;</span>    <span class="token comment">/**    * 备注    */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> remark<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-3-3-代码实现"><a href="#3-2-3-3-代码实现" class="headerlink" title="3.2.3.3 代码实现"></a>3.2.3.3 代码实现</h5><p>​    我们只需要根据用户id去查询到其所对应的权限信息即可。</p><p>​    所以我们可以先定义个mapper，其中提供一个方法可以根据userid查询权限信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sangeng<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">Menu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MenuMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">selectPermsByUserId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    尤其是自定义方法，所以需要创建对应的mapper文件，定义对应的sql语句</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.sangeng.mapper.MenuMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPermsByUserId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT            DISTINCT m.`perms`        FROM            sys_user_role ur            LEFT JOIN `sys_role` r ON ur.`role_id` = r.`id`            LEFT JOIN `sys_role_menu` rm ON ur.`role_id` = rm.`role_id`            LEFT JOIN `sys_menu` m ON m.`id` = rm.`menu_id`        WHERE            user_id = #&#123;userid&#125;            AND r.`status` = 0            AND m.`status` = 0    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在application.yml中配置mapperXML文件的位置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sg_security<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;serverTimezone=UTC</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:/mapper/**/*.xml</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    然后我们可以在UserDetailsServiceImpl中去调用该mapper的方法查询权限信息封装到LoginUser对象中即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MenuMapper</span> menuMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissionKeyList <span class="token operator">=</span>  menuMapper<span class="token punctuation">.</span><span class="token function">selectPermsByUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        //测试写法</span><span class="token comment">//        List&lt;String> list = new ArrayList&lt;>(Arrays.asList("test"));</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>permissionKeyList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-自定义失败处理"><a href="#4-自定义失败处理" class="headerlink" title="4. 自定义失败处理"></a>4. 自定义失败处理</h2><p>​    我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。</p><p>​    在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p><p>​    如果是认证过程中出现的异常会被封装成AuthenticationException然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p><p>​    如果是授权过程中出现的异常会被封装成AccessDeniedException然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p><p>​    所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可。</p><p>①自定义实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessDeniedHandlerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ResponseResult</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>FORBIDDEN<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"权限不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">renderString</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Author 三更  B站： https://space.bilibili.com/663528522 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationEntryPointImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ResponseResult</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"认证失败请重新登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">renderString</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②配置给SpringSecurity</p><p>​    </p><p>​    先注入对应的处理器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">AuthenticationEntryPoint</span> authenticationEntryPoint<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">AccessDeniedHandler</span> accessDeniedHandler<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    然后我们可以使用HttpSecurity对象的方法去配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>authenticationEntryPoint<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-跨域"><a href="#5-跨域" class="headerlink" title="5. 跨域"></a>5. 跨域</h2><p>​    浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 </p><p>​    前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p><p>​    所以我们就要处理一下，让前端能进行跨域请求。</p><p>①先对SpringBoot配置，运行跨域请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 设置允许跨域的路径</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment">// 设置允许跨域请求的域名</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment">// 是否允许cookie</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment">// 设置允许的请求方式</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span>                <span class="token comment">// 设置允许的header属性</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment">// 跨域允许时间</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②开启SpringSecurity的跨域访问</p><p>由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    http            <span class="token comment">//关闭csrf</span>            <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//不通过Session获取SecurityContext</span>            <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 对于登录接口 允许匿名访问</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加过滤器</span>    http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配置异常处理器</span>    http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//配置认证失败处理器</span>            <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>authenticationEntryPoint<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//允许跨域</span>    http<span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-遗留小问题"><a href="#6-遗留小问题" class="headerlink" title="6. 遗留小问题"></a>6. 遗留小问题</h2><h3 id="其它权限校验方法"><a href="#其它权限校验方法" class="headerlink" title="其它权限校验方法"></a>其它权限校验方法</h3><p>​    我们前面都是使用@PreAuthorize注解，然后在在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。</p><p>​    </p><p>​    这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p><p>​    hasAuthority方法实际是执行到了SecurityExpressionRoot的hasAuthority，大家只要断点调试既可知道它内部的校验原理。</p><p>​    它内部其实是调用authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p><p>​    hasAnyAuthority方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyAuthority('admin','test','system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    hasRole要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyRole('admin','system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义权限校验方法"><a href="#自定义权限校验方法" class="headerlink" title="自定义权限校验方法"></a>自定义权限校验方法</h3><p>​    我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ex"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGExpressionRoot</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token class-name">String</span> authority<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取当前用户的权限</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断用户权限集合中是否存在authority</span>        <span class="token keyword">return</span> permissions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>authority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​     在SPEL表达式中使用 @ex相当于获取容器中bean的名字未ex的对象。然后再调用这个对象的hasAuthority方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@ex.hasAuthority('system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于配置的权限控制"><a href="#基于配置的权限控制" class="headerlink" title="基于配置的权限控制"></a>基于配置的权限控制</h3><p>​    我们也可以在配置类中使用使用配置的方式对资源进行权限控制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    http            <span class="token comment">//关闭csrf</span>            <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//不通过Session获取SecurityContext</span>            <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 对于登录接口 允许匿名访问</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/testCors"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"system:dept:list222"</span><span class="token punctuation">)</span>            <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加过滤器</span>    http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配置异常处理器</span>    http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//配置认证失败处理器</span>            <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>authenticationEntryPoint<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//允许跨域</span>    http<span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>​    CSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一。</p><p>​    <a href="https://blog.csdn.net/freeking101/article/details/86537087">https://blog.csdn.net/freeking101/article/details/86537087</a></p><p>​    SpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p><p>​    我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以CSRF攻击也就不用担心了。</p><h3 id="认证成功处理器"><a href="#认证成功处理器" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h3><p>​    实际上在UsernamePasswordAuthenticationFilter进行登录认证的时候，如果登录成功了是会调用AuthenticationSuccessHandler的方法进行认证成功后的处理的。AuthenticationSuccessHandler就是登录成功处理器。</p><p>​    我们也可以自己去自定义成功处理器进行成功后的相应处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证成功了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="认证失败处理器"><a href="#认证失败处理器" class="headerlink" title="认证失败处理器"></a>认证失败处理器</h3><p>​    实际上在UsernamePasswordAuthenticationFilter进行登录认证的时候，如果认证失败了是会调用AuthenticationFailureHandler的方法进行认证失败后的处理的。AuthenticationFailureHandler就是登录失败处理器。</p><p>​    我们也可以自己去自定义失败处理器进行失败后的相应处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGFailureHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationFailureHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证失败了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> failureHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//                配置认证成功处理器</span>                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token comment">//                配置认证失败处理器</span>                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>failureHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登出成功处理器"><a href="#登出成功处理器" class="headerlink" title="登出成功处理器"></a>登出成功处理器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGLogoutSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLogoutSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注销成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> failureHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LogoutSuccessHandler</span> logoutSuccessHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//                配置认证成功处理器</span>                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token comment">//                配置认证失败处理器</span>                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>failureHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//配置注销成功处理器</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span>logoutSuccessHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他认证方案畅想"><a href="#其他认证方案畅想" class="headerlink" title="其他认证方案畅想"></a>其他认证方案畅想</h3><h2 id="7-源码讲解"><a href="#7-源码讲解" class="headerlink" title="7. 源码讲解"></a>7. 源码讲解</h2><p>​    投票过50更新源码讲解</p><h2 id="8-我的笔记"><a href="#8-我的笔记" class="headerlink" title="8. 我的笔记"></a>8. 我的笔记</h2><p>Spring Security简单的实现顺序如下：</p><h3 id="自定义实现UserDetailsService接口"><a href="#自定义实现UserDetailsService接口" class="headerlink" title="自定义实现UserDetailsService接口"></a>自定义实现<code>UserDetailsService</code>接口</h3><p>重写<code>loadUserByUsername</code>方法，方法返回<code>UserDetails</code>对象</p><p>从数据库查询用户信息进行封装（之前默认的接口是从内存session中获取）</p><h3 id="自定义实现UserDetails接口"><a href="#自定义实现UserDetails接口" class="headerlink" title="自定义实现UserDetails接口"></a>自定义实现<code>UserDetails</code>接口</h3><p>自定义实体类字段</p><p>重写认证方法</p><h3 id="JWTUtil工具类"><a href="#JWTUtil工具类" class="headerlink" title="JWTUtil工具类"></a><code>JWTUtil</code>工具类</h3><p>提供生成jwt、解析jwt的方法</p><h3 id="自定义JWTFilter实现OncePerRequestFilter接口"><a href="#自定义JWTFilter实现OncePerRequestFilter接口" class="headerlink" title="自定义JWTFilter实现OncePerRequestFilter接口"></a>自定义<code>JWTFilter</code>实现<code>OncePerRequestFilter</code>接口</h3><ul><li>从request中获取并解析jwt</li><li>从Redis中读取用户信息</li><li>获得<code>UsernamePasswordAuthenticationToken</code>类型的<code>authentication</code>对象</li><li>将验证信息存入<code>SecurityContext</code>上下文<code>SecurityContextHolder.getContext().setAuthentication(authentication);</code></li></ul><h3 id="loginService"><a href="#loginService" class="headerlink" title="loginService"></a><code>loginService</code></h3><ul><li><p>获得<code>UsernamePasswordAuthenticationToken</code>类型的<code>authentication</code>对象</p></li><li><p>调用<code>authenticationManager.authenticate(authentication)</code>方法进行验证，会调用上面自定义实现的<code>UserDetailsServiceImpl</code>类的<code>loadUserByUsername</code>方法</p></li><li><p>验证失败直接抛出异常（<code>ExceptionTranslationFilter</code>会捕捉）；验证成功就生成JWT并返回。</p></li><li><p>认证成功后，将用户信息存入redis，以便后续JWTFilter解析时候获取用户信息，封装到authentication对象中。</p></li></ul><h3 id="自定义配置类继承WebSecurityConfigurerAdapter类"><a href="#自定义配置类继承WebSecurityConfigurerAdapter类" class="headerlink" title="自定义配置类继承WebSecurityConfigurerAdapter类"></a>自定义配置类继承<code>WebSecurityConfigurerAdapter</code>类</h3><ul><li><p>重新配置密码加密和校验方法</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220224103156823.png" alt="image-20220224103156823"></p></li><li><p>在Spring容器中暴露<code>authenticationManager</code>，用于进行认证</p></li><li><p>将自定义的JWTFilter加入到过滤器链中，指定位置在<code>UsernamePasswordFilter</code>面前</p></li></ul><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>主要通过<code>SecurityInterceptor</code>从<code>SecurityContext</code>中获取权限信息来进行权限验证</p><p>开启权限，使用注解<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></p><p>在需要权限验证的方法前使用<code>@PreAuthorize</code></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2022/02/16/java8-xin-te-xing/"/>
      <url>/2022/02/16/java8-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><blockquote><p>目录：</p><ul><li><a href="#1">Interface修改</a></li><li><a href="#2">function interface 函数式接口</a></li><li><a href="#3">Lambda表达式</a><ul><li><a href="#3.1">语法格式</a></li><li><a href="#3.2">替代匿名内部类</a></li><li><a href="#3.3">集合迭代</a></li><li><a href="#3.4">方法的引用</a></li><li><a href="#3.5">访问变量</a></li></ul></li><li><a href="#4">Date-Time API</a><ul><li><a href="#4.1">java.time 主要类</a></li><li><a href="#4.2">格式化</a></li><li><a href="#4.3">字符串转日期格式</a></li><li><a href="#4.4">日期计算</a></li><li><a href="#4.5">获取指定日期</a></li><li><a href="#4.6">JDBC和java8</a></li></ul></li></ul><p>参考来源：</p><ul><li>JavaG</li></ul></blockquote><h1 id="1">Interface修改</h1><p>interface 的设计初衷是面向抽象，提高扩展性。这也留有一点遗憾，Interface 修改的时候，实现它的类也必须跟着改。</p><p>为了解决接口的修改与现有的实现不兼容的问题。新 interface 的方法可以用<code>default</code> 或 <code>static</code>修饰，这样就可以有方法体，实现类也不必重写此方法。</p><p>一个 interface 中可以有多个方法被它们修饰，这 2 个修饰符的区别主要也是普通方法和静态方法的区别。</p><ol><li><code>default</code>修饰的方法，是普通实例方法，可以用<code>this</code>调用，可以被子类继承、重写。</li><li><code>static</code>修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用<code>Interface</code>调用。</li></ol><p>我们来看一个实际的例子。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceNew</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface提供的方式实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sm2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface提供的方式实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface default方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">def2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface default2方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//须要实现类重写</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceNew1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InterfaceNew1 default方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有一个类既实现了 <code>InterfaceNew</code> 接口又实现了 <code>InterfaceNew1</code>接口，它们都有<code>def()</code>，并且 <code>InterfaceNew</code> 接口和 <code>InterfaceNew1</code>接口没有继承关系的话，这时就必须重写<code>def()</code>。不然的话，编译的时候就会报错。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceNewImpl</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceNew</span> <span class="token punctuation">,</span> <span class="token class-name">InterfaceNew1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InterfaceNewImpl</span> interfaceNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterfaceNewImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interfaceNew<span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InterfaceNew1</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在 Java 8 ，接口和抽象类有什么区别的？</strong></p><p>很多小伙伴认为：“既然 interface 也可以有自己的方法实现，似乎和 abstract class 没多大区别了。”</p><p>其实它们还是有区别的</p><ol><li>interface 和 class 的区别，好像是废话，主要有：<ul><li>接口多实现，类单继承</li><li>接口的方法是 public abstract 修饰，变量是 public static final 修饰。 abstract class 可以用其他修饰符</li></ul></li><li>interface 的方法是更像是一个扩展插件。而 abstract class 的方法是要继承的。</li></ol><p>开始我们也提到，interface 新增<code>default</code>和<code>static</code>修饰的方法，为了解决接口的修改与现有的实现不兼容的问题，并不是为了要替代<code>abstract class</code>。在使用上，该用 abstract class 的地方还是要用 abstract class，不要因为 interface 的新特性而将之替换。</p><p><strong>记住接口永远和类不一样。</strong></p><h1 id="2">function interface 函数式接口</h1><p><strong>定义</strong>：也称 SAM 接口，即 Single Abstract Method interfaces，有且只有一个抽象方法，但可以有多个非抽象方法的接口。</p><p>在 java 8 中专门有一个包放函数式接口<code>java.util.function</code>，该包下的所有接口都有 <code>@FunctionalInterface</code> 注解，提供函数式编程。</p><p>在其他包中也有函数式接口，其中一些没有<code>@FunctionalInterface</code> 注解，但是只要符合函数式接口的定义就是函数式接口，与是否有</p><p><code>@FunctionalInterface</code>注解无关，注解只是在编译时起到强制规范定义的作用。其在 Lambda 表达式中有广泛的应用。</p><h1 id="3">Lambda表达式</h1><p>众所周知的 Lambda 表达式，它是推动 Java 8 发布的最重要新特性。是继泛型(<code>Generics</code>)和注解(<code>Annotation</code>)以来最大的变化。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。让 java 也能支持简单的<em>函数式编程</em>。</p><blockquote><p>Lambda 表达式是一个匿名函数，java 8 允许把函数作为参数传递进方法中。</p></blockquote><h2 id="3.1">语法格式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-></span> expression 或<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-></span><span class="token punctuation">&#123;</span> statements<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3.2">替代匿名内部类</h2><p>过去给方法传动态参数的唯一方法是使用内部类。比如</p><p><strong>1.<code>Runnable</code> 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The runable now is using!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用lambda</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's a lambda function!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.<code>Comparator</code> 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> o1 <span class="token operator">-</span> o2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Lambda</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分解开</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comperator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> comperator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.<code>Listener</code> 接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ItemListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">itemStateChanged</span><span class="token punctuation">(</span><span class="token class-name">ItemEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   e<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//lambda</span>button<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.自定义接口</strong></p><p>上面的 3 个例子是我们在开发过程中最常见的，从中也能体会到 Lambda 带来的便捷与清爽。它只保留实际用到的代码，把无用代码全部省略。那它对接口有没有要求呢？我们发现这些匿名内部类只重写了接口的一个方法，当然也只有一个方法须要重写。这就是我们上文提到的<strong>函数式接口</strong>，也就是说只要方法的参数是函数式接口都可以用 Lambda 表达式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们自定义一个函数式接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LambdaInterface</span> <span class="token punctuation">&#123;</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forEg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">lambdaInterfaceDemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//函数式接口参数</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">lambdaInterfaceDemo</span><span class="token punctuation">(</span><span class="token class-name">LambdaInterface</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3.3">集合迭代</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">lamndaFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//传统foreach</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//Lambda foreach</span>        strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//or</span>        strings<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//map</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3.4">方法的引用</h2><p>Java 8 允许使用 <code>::</code> 关键字来传递方法或者构造函数引用，无论如何，表达式返回的类型必须是 functional-interface。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaClassSuper</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaInterface</span> <span class="token function">sf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaClass</span> <span class="token keyword">extends</span> <span class="token class-name">LambdaClassSuper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LambdaInterface</span> <span class="token function">staticF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LambdaInterface</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.调用静态函数，返回类型必须是functional-interface</span>        <span class="token class-name">LambdaInterface</span> t <span class="token operator">=</span> <span class="token class-name">LambdaClass</span><span class="token operator">::</span><span class="token function">staticF</span><span class="token punctuation">;</span>        <span class="token comment">//2.实例方法调用</span>        <span class="token class-name">LambdaClass</span> lambdaClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LambdaInterface</span> lambdaInterface <span class="token operator">=</span> lambdaClass<span class="token operator">::</span><span class="token function">f</span><span class="token punctuation">;</span>        <span class="token comment">//3.超类上的方法调用</span>        <span class="token class-name">LambdaInterface</span> superf <span class="token operator">=</span> <span class="token keyword">super</span><span class="token operator">::</span><span class="token function">sf</span><span class="token punctuation">;</span>        <span class="token comment">//4. 构造方法调用</span>        <span class="token class-name">LambdaInterface</span> tt <span class="token operator">=</span> <span class="token class-name">LambdaClassSuper</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3.5">访问变量</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i =3;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>lambda 表达式可以引用外边变量，但是该变量默认拥有 final 属性，不能被修改，如果修改，编译时就报错。</p><h1 id="4">Date-Time API</h1><p>这是对<code>java.util.Date</code>强有力的补充，解决了 Date 类的大部分痛点：</p><ol><li>非线程安全</li><li>时区处理麻烦</li><li>各种格式化、和时间计算繁琐</li><li>设计有缺陷，Date 类同时包含日期和时间；还有一个 java.sql.Date，容易混淆。</li></ol><p>我们从常用的时间实例来对比 java.util.Date 和新 Date 有什么区别。用<code>java.util.Date</code>的代码该改改了。</p><h2 id="4.1">java.time 主要类</h2><p><code>java.util.Date</code> 既包含日期又包含时间，而  <code>java.time</code> 把它们进行了分离</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token comment">//日期+时间 format: yyyy-MM-ddTHH:mm:ss.SSS</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token comment">//日期 format: yyyy-MM-dd</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token comment">//时间 format: HH:mm:ss</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4.2">格式化</h2><p><strong>Java 8 之前:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oldFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//format yyyy-MM-dd HH:mm:ss</span>    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> date  <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"date format : %s"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//format HH:mm:ss</span>    <span class="token class-name">SimpleDateFormat</span> sdft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> time <span class="token operator">=</span> sdft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"time format : %s"</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//format yyyy-MM-dd HH:mm:ss</span>    <span class="token class-name">SimpleDateFormat</span> sdfdt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> datetime <span class="token operator">=</span> sdfdt<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"dateTime format : %s"</span><span class="token punctuation">,</span> datetime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java 8 之后:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//format yyyy-MM-dd</span>    <span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"date format : %s"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//format HH:mm:ss</span>    <span class="token class-name">LocalTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNano</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"time format : %s"</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//format yyyy-MM-dd HH:mm:ss</span>    <span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> dateTimeStr <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"dateTime format : %s"</span><span class="token punctuation">,</span> dateTimeStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4.3">字符串转日期格式</h2><p><strong>Java 8 之前:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//已弃用</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2021-01-26"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换为</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-01-26"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java 8 之后:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-01-26"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-01-26 12:12:22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"12:12:22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java 8 之前</strong> 转换都需要借助 <code>SimpleDateFormat</code> 类，而<strong>Java 8 之后</strong>只需要 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>的  <code>of</code> 或 <code>parse</code> 方法。</p><h2 id="4.4">日期计算</h2><p>下面仅以<strong>一周后日期</strong>为例，其他单位（年、月、日、1/2 日、时等等）大同小异。另外，这些单位都在 <em>java.time.temporal.ChronoUnit</em> 枚举中定义。</p><p><strong>Java 8 之前:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//一周后的日期</span>     <span class="token class-name">SimpleDateFormat</span> formatDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Calendar</span> ca <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ca<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DATE<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Date</span> d <span class="token operator">=</span> ca<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> after <span class="token operator">=</span> formatDate<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一周后日期："</span> <span class="token operator">+</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//算两个日期间隔多少天，计算间隔多少年，多少月方法类似</span>     <span class="token class-name">String</span> dates1 <span class="token operator">=</span> <span class="token string">"2021-12-23"</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> dates2 <span class="token operator">=</span> <span class="token string">"2021-02-26"</span><span class="token punctuation">;</span>     <span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Date</span> date1 <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dates1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Date</span> date2 <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dates2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dates2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> dates2 <span class="token operator">+</span> <span class="token string">"相差"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//结果：2021-12-23和2021-12-23相差300天</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java 8 之后:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//一周后的日期</span>     <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//方法1</span>     <span class="token class-name">LocalDate</span> after <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//方法2</span>     <span class="token class-name">LocalDate</span> after2 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一周后日期："</span> <span class="token operator">+</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//算两个日期间隔多少天，计算间隔多少年，多少月</span>     <span class="token class-name">LocalDate</span> date1 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-02-26"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">LocalDate</span> date2 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-12-23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Period</span> period <span class="token operator">=</span> <span class="token class-name">Period</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>date1<span class="token punctuation">,</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date1 到 date2 相隔："</span>                <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"年"</span>                <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"月"</span>                <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印结果是 “date1 到 date2 相隔：0年9月27天”</span>     <span class="token comment">//这里period.getDays()得到的天是抛去年月以外的天数，并不是总天数</span>     <span class="token comment">//如果要获取纯粹的总天数应该用下面的方法</span>     <span class="token keyword">long</span> day <span class="token operator">=</span> date2<span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date1<span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2 <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> date2 <span class="token operator">+</span> <span class="token string">"相差"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//打印结果：2021-12-23和2021-12-23相差300天</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4.5">获取指定日期</h2><p>除了日期计算繁琐，获取特定一个日期也很麻烦，比如获取本月最后一天，第一天。</p><p><strong>Java 8 之前:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前月第一天：</span>        <span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> first <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first day:"</span> <span class="token operator">+</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取当前月最后一天</span>        <span class="token class-name">Calendar</span> ca <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ca<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> ca<span class="token punctuation">.</span><span class="token function">getActualMaximum</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> last <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ca<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"last day:"</span> <span class="token operator">+</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当年最后一天</span>        <span class="token class-name">Calendar</span> currCal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> currCal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> time <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"last day:"</span> <span class="token operator">+</span> format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Java 8 之后:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDayNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前月第一天：</span>    <span class="token class-name">LocalDate</span> firstDayOfThisMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">firstDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取本月最后一天</span>    <span class="token class-name">LocalDate</span> lastDayOfThisMonth <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">lastDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取下一天：</span>    <span class="token class-name">LocalDate</span> nextDay <span class="token operator">=</span> lastDayOfThisMonth<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//当年最后一天</span>    <span class="token class-name">LocalDate</span> lastday <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">lastDayOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2021年最后一个周日，如果用Calendar是不得烦死。</span>    <span class="token class-name">LocalDate</span> lastMondayOf2021 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2021-12-31"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">lastInMonth</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>java.time.temporal.TemporalAdjusters</code> 里面还有很多便捷的算法，这里就不带大家看 Api 了，都很简单，看了秒懂。</p><h2 id="4.6">JDBC 和 java8</h2><p>现在 jdbc 时间类型和 java8 时间类型对应关系是</p><ol><li><code>Date</code> —&gt; <code>LocalDate</code></li><li><code>Time</code> —&gt; <code>LocalTime</code></li><li><code>Timestamp</code> —&gt; <code>LocalDateTime</code></li></ol><p>而之前统统对应 <code>Date</code>，也只有 <code>Date</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK1.8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git团队开发流程</title>
      <link href="/2022/02/16/git-tuan-dui-kai-fa-liu-cheng/"/>
      <url>/2022/02/16/git-tuan-dui-kai-fa-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="git团队开发流程"><a href="#git团队开发流程" class="headerlink" title="git团队开发流程"></a>git团队开发流程</h1><p>在学校等小型团队中这么使用的，感觉还行。大型团队开发会复杂一点。</p><h1 id="开工第一件事"><a href="#开工第一件事" class="headerlink" title="开工第一件事"></a>开工第一件事</h1><p>从git仓库拉取最新代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="收工最后一件事"><a href="#收工最后一件事" class="headerlink" title="收工最后一件事"></a>收工最后一件事</h1><p>进行了一天的本地代码修改，收工之前需要进行代码的更新，这里小型团队开发就直接在main上做整合了（**开发环境可不能这样!**）</p><ol><li><p>创建新分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> checkout -b branchname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>代码修改的保存和分支提交</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> status 查看本地代码的更改情况<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> 将所有更改添加到缓冲区<span class="token function">git</span> commit -m <span class="token string">'本次提交的备注'</span> 进行一次提交<span class="token function">git</span> push origin branchname 将代码更新到远端分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>冲突合并和解决冲突</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> checkout branchname 确保在本次的分支上<span class="token function">git</span> pull -r origin main 更新主分支代码，并进行冲突合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果遇到冲突（CONFLICT），按照提示进行冲突解决，解决后：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> 保存修改<span class="token function">git</span> rebase --continue 继续进行冲突合并，如果还有冲突，继续解决冲突<span class="token function">git</span> push origin branchname 更新分支代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>合并分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> checkout main 切换到主分支<span class="token function">git</span> merge branchname 合并分支到主分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除本次开发的分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> branch -d branchname 删除本地分支<span class="token function">git</span> push origin -d branchname 删除远端分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>主分支main代码更新到远端git仓库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> push origin main 更新本地main分支代码到远端<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《鸟哥的LINUX私房菜_服务器篇》笔记</title>
      <link href="/2022/01/12/niao-ge-de-linux-si-fang-cai-fu-wu-qi-pian-bi-ji/"/>
      <url>/2022/01/12/niao-ge-de-linux-si-fang-cai-fu-wu-qi-pian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《鸟哥的LINUX私房菜-服务器篇》笔记"><a href="#《鸟哥的LINUX私房菜-服务器篇》笔记" class="headerlink" title="《鸟哥的LINUX私房菜_服务器篇》笔记"></a>《鸟哥的LINUX私房菜_服务器篇》笔记</h1><p>这本书很长很长，这里暂时只记录和整理了我目前常用和常见的。</p><p>以后用到其他模块再来翻阅和做笔记，比如邮件服务器等等。</p><h1 id="基础网络概念"><a href="#基础网络概念" class="headerlink" title="基础网络概念"></a>基础网络概念</h1><h2 id="计算机联网结构"><a href="#计算机联网结构" class="headerlink" title="计算机联网结构"></a>计算机联网结构</h2><p>本书的局域网结构</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113160210457.png" alt="image-20220113160210457"></p><ul><li><p>网络接口</p><p>利用软件设计的网络接口，主要是提供网络地址IP</p><p><strong>一张网卡至少可以搭配多个网络接口</strong></p><p>每部主机内部也有一个内部接口，<strong>loopback（lo）</strong>循环测试接口。</p></li><li><p>网络形态或拓扑结构</p><p>各个节点在网络上的链接方式，一般指物理方式。</p><p>上图则为星形拓扑结构。</p></li><li><p>网关（route/gateway)</p><p>具有两个以上的网络接口，可以连接两个以上不同的网段的设备。</p></li><li><p>IP分享器</p><p>具有网关、防火墙、DHCP等功能的设备。</p></li></ul><h2 id="TCP-IP的数据链路层"><a href="#TCP-IP的数据链路层" class="headerlink" title="TCP/IP的数据链路层"></a>TCP/IP的数据链路层</h2><p>主要是以太网的相关概念</p><ul><li><p>局域网网络结构</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112164600244.png" alt="image-20220112164600244" style="zoom:80%;" /><p>以太网的传输主要是<strong>网络卡对网络卡</strong>之间的数据传递</p><p>每个主机都是联机到集线器(hub/switch)，然后通过集线器向所有主机发起联机</p><p>每个以太网网卡出厂时，赋予一个独一无二的MAC卡号，一般不能被修改</p><p>使用CSMA/CD协议进行通讯</p></li><li><p>可以使用MAC通讯</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112165013271.png" alt="image-20220112165013271"></p><p>MAC不能跨局域网通信！</p></li></ul><h2 id="TCP-IP的网络层"><a href="#TCP-IP的网络层" class="headerlink" title="TCP/IP的网络层"></a>TCP/IP的网络层</h2><p>关于IP相关参数可以做如下假设，来理解：</p><blockquote><p>在某一街道的所有用户作为主机，门牌号想象为IP</p><ul><li>网域：只要在这条街上都是一个网域</li><li>Network IP：这个街道的第一个门牌，代表整个街道，整个网域</li><li>Broadcast IP：街道的最后一个门牌</li><li>路由器：这个街道的邮局，要想发送数据给其他街道的用户，只需要把数据给邮局进行转发即可</li></ul></blockquote><p>主机连上Internet的必须参数如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112175213706.png" alt="image-20220112175213706"></p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><h4 id="网段与网域"><a href="#网段与网域" class="headerlink" title="网段与网域"></a>网段与网域</h4><ul><li><p>物理网段</p><p>当所有的主机都使用同一个网络媒体串在一起，这个时候这些主机在实体装置上其实是联机在一起的，那么就可以称为在同一个物理网段。</p><p>同一个物理网段，主机可以直接通过MAC通信，也可以通过广播进行网络联机</p></li><li><p>网域</p><p>IP地址的网络号相同，主机号不同</p></li><li><p>IP网段</p><p>同一个物理网段内，可以依据不同的IP设定，设置为多个IP网段</p></li></ul><h4 id="Network与Broadcast"><a href="#Network与Broadcast" class="headerlink" title="Network与Broadcast"></a>Network与Broadcast</h4><ul><li><p>全0的主机号，表示整个网段的地址(Network IP)</p><p>网域的第一个IP</p></li><li><p>全1的主机号，表示广播地址（Broadcast IP）</p><p>网域的最后一个IP</p><p>广播地址不同的两个主机的通信，需要使用路由器(router)</p></li></ul><h4 id="loopback-IP"><a href="#loopback-IP" class="headerlink" title="loopback IP"></a>loopback IP</h4><p>作为内部循环测试的网络接口，没有网卡也可以使用。</p><p>一般为127.0.0.0/8，是个Class A。</p><h4 id="Netmask"><a href="#Netmask" class="headerlink" title="Netmask"></a>Netmask</h4><p>子网掩码，网络号全1，主机号全0。</p><p>划分子网的作用，标识网络号的位置。</p><h4 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h4><p>无等级网域间路由，在IP后标出网络号的位数</p><p><code>IP/net number</code>，如<code>192.168.0.0/24</code></p><p><strong>通常表示一个网段会使用<code>NetWork/Netmask</code>的方式</strong>，由此就可以算出Broadcast和可用IP。</p><h3 id="IP分级"><a href="#IP分级" class="headerlink" title="IP分级"></a>IP分级</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112171210942.png" alt="image-20220112171210942"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112171219612.png" alt="image-20220112171219612"></p><h3 id="IP分类"><a href="#IP分类" class="headerlink" title="IP分类"></a>IP分类</h3><ul><li><p>Public IP</p><p>公共IP，有这个IP才能连上Internet</p></li><li><p>Private IP</p><p>不能直接连上Internet的IP，主要用于局域网的主机联机</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112171648445.png" alt="image-20220112171648445"></p><p>在私有IP后加上NAT服务即可连上Internet</p></li></ul><h3 id="路由（网关相关）"><a href="#路由（网关相关）" class="headerlink" title="路由（网关相关）"></a>路由（网关相关）</h3><ul><li>两个主机在两个网段时，不能直接IP广播通信，只能借助路由器</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112173211096.png" alt="image-20220112173211096"></p><ul><li><p>在主机查询路由表时，没有符合的路由，就会把IP包送去预设路由器（<strong>默认网关，default gatway，大部分为广播地址，具体需要问管理员</strong>）</p></li><li><p>观察主机路由<code>route</code>命令</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220112173649795.png" alt="image-20220112173649795"></p><p>输出一共有8个字段，按顺序是：</p><ul><li><p>Destination</p><p>就是Network。</p><p>字段为default时，表示当要去的网域不在其他Destination列表内时，通过default这行的gateway转发出去。</p></li><li><p>Gateway</p><p>该网络接口的gateway的IP</p><p>若为0.0.0.0即为不需要额外的IP</p></li><li><p>Genmask</p><p>就是Netmask</p></li><li><p>Flags</p><p>U：代表路由可用</p><p>G：代表网域需要经过Gateway准发</p><p>H：目标是一个主机IP而不是一个网域</p><p>R：使用动态路由时，恢复路由信息的旗标</p><p>D：以及由服务或转port功能设定为动态路由</p><p>M：路由以及被修改了</p><p>！：这个路由不会被接受，用来抵挡不安全的网域</p></li><li><p>Metric</p></li><li><p>Ref</p></li><li><p>Use</p></li><li><p>Iface</p><p>Interface（网络接口），表示要去本机要去这个Destination需要走的网络接口</p></li></ul></li></ul><h1 id="Linux连接Internet"><a href="#Linux连接Internet" class="headerlink" title="Linux连接Internet"></a>Linux连接Internet</h1><h2 id="局域网常见布线规划"><a href="#局域网常见布线规划" class="headerlink" title="局域网常见布线规划"></a>局域网常见布线规划</h2><p>局域网（Local Area Network， LAN)的Linux服务器的布线方式有多种，这些方式有下面几个前提条件：</p><ul><li><p>较小空间局域网，如一个办公室</p></li><li><p>以一个switch为中心的星形联机架构</p></li><li><p>假设仅有一条ADSL线对外联机的情况下</p></li></ul><h3 id="Linux直接联网-与PC同地位"><a href="#Linux直接联网-与PC同地位" class="headerlink" title="Linux直接联网-与PC同地位"></a>Linux直接联网-与PC同地位</h3><p>此时如果ADSL是多IP的（可以拨接2-8个IP）的情况，可以使用这个模式。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113153802132.png" alt="image-20220113153802132"></p><p>每个节点可以直接通过私有IP进行联机</p><p>每个节点可以自行通过ADSL拨接连接Internet</p><p>局限性：</p><ul><li>每个节点相对独立，不好管理</li><li>这是一个没有防火墙的环境！</li><li>内外部网络没有明确的分开</li></ul><h3 id="Linux直接联网-与一般PC分开网域"><a href="#Linux直接联网-与一般PC分开网域" class="headerlink" title="Linux直接联网-与一般PC分开网域"></a>Linux直接联网-与一般PC分开网域</h3><p>如果有多个Public IP，可以将Linux和其他节点的网域分开。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113154314575.png" alt="image-20220113154314575"></p><p>LAN的每个节点可以直接通过私有IP进行联机</p><p>LAN的每个节点必须通过IP分享器（一个类似网关的设备）连接到Internet，IP分享器也可以设置一些简单的防火墙规则。</p><p>LAN内的节点方便维护</p><h3 id="Linux直接联网-让Linux直接管理LAN"><a href="#Linux直接联网-让Linux直接管理LAN" class="headerlink" title="Linux直接联网-让Linux直接管理LAN"></a>Linux直接联网-让Linux直接管理LAN</h3><p>没有IP分享器的时候，可以让Linux充当。此时<strong>Linux必须具备两张网卡，一个对外，一个对内</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113155125601.png" alt="image-20220113155125601"></p><p>Linux可以作为内网对外的防火墙使用。</p><p>维护内网简单，但是Linux一旦挂点，整个内网就不能对外联机。</p><p><strong>比较推荐！</strong></p><h3 id="Linux放在防火墙后-让Linux使用Private-IP"><a href="#Linux放在防火墙后-让Linux使用Private-IP" class="headerlink" title="Linux放在防火墙后-让Linux使用Private IP"></a>Linux放在防火墙后-让Linux使用Private IP</h3><p>依然使用IP分享器充当防火墙的角色</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113155531262.png" alt="image-20220113155531262"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="网络卡"><a href="#网络卡" class="headerlink" title="网络卡"></a>网络卡</h3><p>网络卡的装置有自己的代号，默认的网卡是eth0，第二张网络卡为eth1，依次类推。</p><h4 id="网卡硬件信息查看dmesg"><a href="#网卡硬件信息查看dmesg" class="headerlink" title="网卡硬件信息查看dmesg"></a>网卡硬件信息查看dmesg</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">grep</span> -in eth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113161442057.png" alt="image-20220113161442057"></p><p>e1000是网卡核心模块的名字。</p><h4 id="确认网卡是否被载入lsmod-modinfo"><a href="#确认网卡是否被载入lsmod-modinfo" class="headerlink" title="确认网卡是否被载入lsmod\modinfo"></a>确认网卡是否被载入lsmod\modinfo</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lsmod <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113161738021.png" alt="image-20220113161738021"></p><h3 id="Internet参数设置"><a href="#Internet参数设置" class="headerlink" title="Internet参数设置"></a>Internet参数设置</h3><p>有多种上网方式可以进行设置。</p><h4 id="网络相关配置文件"><a href="#网络相关配置文件" class="headerlink" title="网络相关配置文件"></a>网络相关配置文件</h4><ul><li>参数配置文件</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113161923962.png" alt="image-20220113161923962" style="zoom:80%;" /><ul><li><p>相关命令脚本</p><ul><li><p><code>/etc/init.d/network restart</code></p><p>重启整个网络参数！读取上述配置文件，并恢复系统默认的参数</p></li><li><p><code>ifup/ifdown eth0</code></p><p>启动或关闭某个网络接口。</p></li></ul></li></ul><h4 id="手动设定固定IP"><a href="#手动设定固定IP" class="headerlink" title="手动设定固定IP"></a>手动设定固定IP</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113162617115.png" alt="image-20220113162617115"></p><ul><li><p>IP相关参数</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113162734504.png" alt="image-20220113162734504"></p><p>注意，其中<code>GATEWAY</code>是整个系统的默认网关，在有多个网卡的时候，只需要一个网卡的配置文件设置即可。</p></li><li><p>DNS</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113163402840.png" alt="image-20220113163402840"></p><p>使用<code>dig</code>命令可以测试是否设置正确</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113163514976.png" alt="image-20220113163514976"></p></li><li><p>hostname</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113163652825.png" alt="image-20220113163652825"></p><p>设置完后一定要reboot（重启）。</p></li></ul><h4 id="自动取得IP"><a href="#自动取得IP" class="headerlink" title="自动取得IP"></a>自动取得IP</h4><p>利用DHCP功能，从DHCP服务器（比如IP分享器）取得IP。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113164150770.png" alt="image-20220113164150770"></p><p>文件里面的其他参数都可以用#注释掉，特别是<strong>GATEWAY参数一定不能设置</strong>。</p><h3 id="通过无线网的连接设置"><a href="#通过无线网的连接设置" class="headerlink" title="通过无线网的连接设置"></a>通过无线网的连接设置</h3><p>无线网络（Wireless LAN，WLAN)的机制非常多，场景的WIFI是IEEE 802.11b标准。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113165122560.png" alt="image-20220113165122560"></p><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>WLAN中有两个重要的网络设备：无线基地台（Wireless Access Point，AP）和无线网卡。</p><p>AP本身就是一个IP分享器，一个对外连接Internet，一个对内接收无线网卡的数据。<strong>常见的AP设备如TP-Link</strong>。</p><p>AP一般需要做一些限制，来保护内部的WLAN，常见的就是连接AP时需要验证密钥。主要是两个参数：</p><ul><li><p>ESSID/SSID</p><p>AP的名字</p></li><li><p>密码</p><p>密码有2中常见的加密方式</p><ul><li>WPA/WPA2</li><li>WPA-PSK/WPA2-PSK(一般用这个)</li></ul></li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>也在<code>/etc/sysconfig/network-scripts</code>下面</p><h4 id="查看无线网卡状态iwconfig"><a href="#查看无线网卡状态iwconfig" class="headerlink" title="查看无线网卡状态iwconfig"></a>查看无线网卡状态iwconfig</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113165815458.png"></p><p>然后可以继续使用<code>modinfo</code>来查看加载状况。</p><h4 id="启动无线网卡"><a href="#启动无线网卡" class="headerlink" title="启动无线网卡"></a>启动无线网卡</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ifconfig</span> netcardid up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">ifup wlname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="侦测AP"><a href="#侦测AP" class="headerlink" title="侦测AP"></a>侦测AP</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">iwlist netcardid scan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220113170427618.png" alt="image-20220113170427618"></p><p>利用上述得到的参数，修改配置文件，在<code>/etc/Wireless</code>目录下，比较麻烦。</p><h1 id="Linux网络安全"><a href="#Linux网络安全" class="headerlink" title="Linux网络安全"></a>Linux网络安全</h1><h2 id="主机的基本防护"><a href="#主机的基本防护" class="headerlink" title="主机的基本防护"></a>主机的基本防护</h2><p>主机的基本防护包含：<strong>软件自动更新、限制联机端口、启动SELinux</strong>等。</p><p>软件更新，可以修复当前版本的一些系统BUG。</p><h3 id="Internet数据包进入主机的过程"><a href="#Internet数据包进入主机的过程" class="headerlink" title="Internet数据包进入主机的过程"></a>Internet数据包进入主机的过程</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114155700063.png" alt="image-20220114155700063"></p><ol><li><p>防火墙分析</p><p>Linux 系统有内建的防火墙机制，预设的 Linux 防火墙就有两个机制，这两个机制都是独立存在的：</p><ul><li><p>第一层，封包过滤防火墙：IP Filtering 或 Net Filter </p><p>简单的说，就是 iptables 这个软件所提供的防火墙功能。主要是分析 TCP/IP 的封包表头 来进行过滤的机制，主要分析的是 OSI 的第二、三、四层，主要控制的 就是 MAC, IP, ICMP, TCP 与 UDP 的埠口与状态 (SYN, ACK…) 等。</p></li><li><p>第二层防火墙：TCP Wrappers </p><p>通过 netfilter 之后，网络封包会开始接受 Super daemons 及 TCP_Wrappers 的检验。 即 /etc/hosts.allow 与 /etc/hosts.deny 的配置文件功能。 这个功能也是针对 TCP 的 Header 进行再次的分析，同样你可以设定一些机制来抵制某些 IP 或 Port ，好让来源端的封包被丢弃或通过检验。</p></li></ul></li><li><p>服务的限制</p><p>如httpd服务可以在httpd.conf文件来规范某些IP不可以使用。</p></li><li><p>SELinux控制</p></li><li><p>文件系统的<code>rwx</code>权限限制</p></li></ol><h3 id="限制联机端口"><a href="#限制联机端口" class="headerlink" title="限制联机端口"></a>限制联机端口</h3><p>当启动一个网络服务，这个服务会依据 TCP/IP 的相关通讯协议 启动一个埠口在进行监听， 那就是 TCP/UDP 封包的 port (端口) 了。</p><p>网络联机是双向的，服务器端得要启动一个监听的端口， 客户端得要随机启动一个埠口来接收响应的数据才行。</p><ul><li><p>服务器端启动的监听端口所对应的服务是固定的：<br>例如 WWW 服务开启在 port 80 ，FTP 服务开启在 port 21，email 传送开启在 port 25 等等，都是通讯协议上面的规范！</p></li><li><p>客户端启动程序时，随机启动一个大于 1024 以上的端口：<br>客户端启动的 port 是随机产生的，主要是开启在大于 1024 以上的端口。这个 port 也是由某些软件所产生的， 例如浏览器、Filezilla 这个 FTP 客户端程 序等等。</p></li><li><p>一部服务器可以同时提供多种服务：<br>所谓的『监听』是某个服务程序会一直常驻在内存当中，所以该程序启动的 port 就会一直存在。 只要服务器软件激活的端口不同，那就不会造成冲突。当客户端连接到此服务器时，透过不同的埠口，就可以取得不同的服务数据啰。 所以，一部主机上面当然可以同时启动很多不同的服务啊！</p></li><li><p>共 65536 个 port： </p><p>TCP/UDP 表头数据中 port 占用 16 个位，因此一般主机会有 65536 个 port，而这些 port 又分成两个部分，以 port 1024 作区隔：</p><ul><li>只有 root 才能启动的保留的 port： 在小于 1024 的埠口，都是需要以 root 的身份才能启动的，这些 port 主要是用于一些常见的通讯服务，在 Linux 系统下，常见的协议与 port 的对应是记录在 /etc/services 里面的。</li><li>大于 1024 用于 client 端的 port： 在大于 1024 以上的 port 主要是作为 client 端的软件激活的 port 。</li></ul></li><li><p>是否需要三向交握：<br>  建立可靠的联机服务需要使用到 TCP 协议，也就需要所谓的三向交握了，如果 是非面向连接的服务，例如 DNS 与视讯系统， 那只要使用 UDP 协议即可。</p></li><li><p>通讯协议可以启用在非常规的 port</p></li><li><p>所谓的 port 的安全性</p><p>  <strong>没有必要的服务就将他关闭！ 尤其某些网络服务还会启动一些 port ！另外，那些已启动的软件也需要持续的保持更新！</strong></p></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由最大的功能就是在帮我们规划网络封包的传递方式与方向。可以使用 route 这个指令来查阅与设定。</p><h3 id="路由表产生的类型"><a href="#路由表产生的类型" class="headerlink" title="路由表产生的类型"></a>路由表产生的类型</h3><p>在 Linux 系统下的路由表是由小网域排列到大网域</p><p>路由表的设计主要有以下三种：</p><ul><li><p>依据网络接口产生的 IP 而存在的路由:</p><p>主机上面有几个网络接口的存在时，该网络接口就会存在几个路由</p><blockquote><p>如192.168.1.0/24的路由对应本机192.168.1.100接口；如果本机还有192.168.2.100时，则路由表就相应存在192.168.2.0/24的路由规则</p></blockquote></li><li><p>手动或预设路由(default route)</p><p>使用 route 这个指令手动的给予额外的路由设定，例如那个预设路由 (0.0.0.0/0) 就是额外的路由。</p><p>使用 route 这个指令时，最重要的一个概念是: 『你所规划的路由必须要是你的装置 (如 eth0) 或 IP 可以直接沟通 (broadcast) 的情况』才行</p></li><li><p>动态路由</p><p>透过路由器与路由器之间的协商以达成动态路由的环境</p><p>需要额外的软件支持，如zebra或Quagga等。</p></li></ul><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><h4 id="路由器的功能和实现"><a href="#路由器的功能和实现" class="headerlink" title="路由器的功能和实现"></a>路由器的功能和实现</h4><p>​    主机想要将数据传送到不同的网域时得透过路由器的帮忙，即路由器可以实现『转递网络封包』。</p><p>​    路由器会分析来源端封包的 IP 表头， 在表头内找出要送达的目标 IP 后，透过路由器本身的路由表 (routing table) 来将这个封包向下一个目标 (next hop) 传送。</p><p>​    一般来说，路由器会有两个网络接口，透过路由器本身的 IP 转递功能让两 个网域可以互相沟通网络封包。</p><p>​    实现路由的2种方法：</p><ul><li><p>硬件功能</p><p>例如 Cisco, TP-Link, D-Link (注 2) 等公司都有生产硬件路由器， 这些路由器内有嵌入式的操作系统，可以负责不同网域间的封包转译与转递等功能</p></li><li><p>软件功能</p><p>使用Linux作为路由服务器，例如 Linux 这个操作系统的核心就有提供封包转递的能力。</p><p>在<code>/etc/sysctl.conf</code>文件中，设置<code>net.ipv4.ip_forward=1</code>。然后使用<code>sysctl -p</code>命令，是的配置立即生效。</p></li></ul><h4 id="Linux路由器的分类"><a href="#Linux路由器的分类" class="headerlink" title="Linux路由器的分类"></a>Linux路由器的分类</h4><ul><li><p>静态路由</p><p>直接以类似 route 这个指令来直接设定路由表到核心功能当中， 设定值只要与网域环境相符即可。 不过，当你的网域有变化时，路由器就得要重新设定;</p></li><li><p>动态路由</p><p>透过类似 Quagga 或 zebra 软件的功能，这些软件可以安装在 Linux 路由器上， 而这些软件可以动态的侦测网域的变化，并直接修改 Linux 核心的路由表信息， 你无须手动以 route 来修改你的路由表信息</p></li></ul><h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><p>NAT（Network Address Translation, 网络地址转换）本身就是一个路由器，只是比路由器多了“IP转换功能”。</p><p>NAT透过修改封包的 IP 表头数据之来源或目标 IP ， 让来自私有 IP 的封包可以转成 NAT 服务器的公共 IP ，就可以连上Internet。</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>​    比如，你可以限制文件传输服务 (FTP) 只在子域内的主机才能够使用，而不对整个 Internet 开放；你可以限制整部 Linux 主机仅可以接受客户端 的 WWW 要求，其他的服务都关闭；你还可以限制整部主机仅能主动对外联机。反过来说，若有客户端对我们主机发送主动联机的封包状态 (TCP 封包的 SYN flag) 就予以抵挡等等</p><p>​    <strong>可以假设在路由器上面保护路由器后的整个内网。</strong></p><p>总的来说：</p><ul><li>切割被信任(如子域)与不被信任(如 Internet)的网段； </li><li>划分出可提供 Internet 的服务与必须受保护的服务；</li><li>分析出可接受与不可接受的封包状态；</li></ul><h3 id="Linux防火墙的类别"><a href="#Linux防火墙的类别" class="headerlink" title="Linux防火墙的类别"></a>Linux防火墙的类别</h3><ol><li><p>Netfilter 封包过滤机制</p><p>分析进入主机的网络封包，将封包的表头数据捉出来进 行分析，以决定该联机为放行或抵挡的机制。 由于这种方式可以直接分析封包表头数据，所以包括硬件地址(MAC), 软件地址 (IP), TCP, UDP, ICMP 等封包 的信息都可以进行过滤分析的功能，因此用途非常的广泛。(其实主要分析的是<br>OSI 七层协议的 2, 3, 4 层)</p><p>Linux上Netfilter 提供了<strong>iptables</strong>这个软件来作为防火墙封包过滤的指令。</p></li><li><p>TCP Wrappers (程序控管)</p><p>分析谁对某程序进行存取，然后透过规则去分析该服务器程序谁能够联机、谁不能联机。 由于主要是透过分析服务器程序来控管，因此与启动的端口无关，只与程序的名称有关。</p></li><li><p>Proxy (代理服务器) </p><p>其实代理服务器是一种网络服务，它可以『代理』用户的需求，而代为前往服务器取得相关的资料。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117141613116.png" alt="image-20220117141613116"></p><ul><li>client 会向 proxy server 要求数据，请 proxy 帮忙处理； </li><li>proxy 可以分析使用者的 IP 来源是否合法？使用者想要去的服务器是否合法？如果这个 client 的要求都合法的话，那么 proxy 就会主动的帮忙 client 前往服务器取得资料；服务器回传的数据是传给 proxy server 的，所以服务器上面看到的是 proxy server 的 IP</li><li>最后 proxy 将 服务器回传的数据送给 client。</li></ul></li></ol><h3 id="Netfilter之iptables"><a href="#Netfilter之iptables" class="headerlink" title="Netfilter之iptables"></a>Netfilter之iptables</h3><p>它的主要工作是：</p><ul><li><p>拒绝让 Internet 的封包进入主机的某些端口口 </p></li><li><p>拒绝让某些来源 IP 的封包进入 </p></li><li><p>拒绝让带有某些特殊旗标 (flag) 的封包进入</p><p>最常拒绝的就是带有 SYN 的主动联机的旗标了！只要一经发现，就可以将该封包丢弃</p></li><li><p>分析硬件地址 (MAC) 来决定联机与否</p></li></ul><p>Linux主要是iptables这个防火墙机制。有个具体的例子，用到的时候再翻看<strong>9.4小节</strong>。</p><h4 id="防火墙规则的顺序"><a href="#防火墙规则的顺序" class="headerlink" title="防火墙规则的顺序"></a>防火墙规则的顺序</h4><p>​    如果这个封包并不符合 Rule 1 的比对，那就会进入 Rule 2 的比对了！如此一 个一个规则去进行比对就是了。 <strong>如果所有的规则都不符合，此时就会透过预设动作 (封包政策, Policy) 来决定这个封包的去向。</strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117143154340.png" alt="image-20220117143154340"></p><h4 id="iptables的表格与链"><a href="#iptables的表格与链" class="headerlink" title="iptables的表格与链"></a>iptables的表格与链</h4><p>​    防火墙软件里面有多个表格 (table) ，每个表格都定义出自己的默认政 策与规则， 且每个表格的用途都不相同。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117143303067.png" alt="image-20220117143303067"></p><p>Linux 的 iptables 至少就有三个表格，包括管理本机进出的 filter 、管理后端主机 (防火墙内部的其他计算机) 的 nat 、管理特殊旗标使用的 mangle (较少使用) </p><ul><li>filter (过滤器)：主要跟进入 Linux 本机的封包有关，这个是预设的 table <ul><li>INPUT：主要与想要进入我们 Linux 本机的封包有关； </li><li>OUTPUT：主要与我们 Linux 本机所要送出的封包有关；</li><li>FORWARD：这个与 Linux 本机比较没有关系， 他可以『转递封包』到后端的计算机中，与下列 nat table 相关性较高。</li></ul></li><li>nat (地址转换)：是 Network Address Translation 的缩写， 这个表格主 要在进行来源与目的之 IP 或 port 的转换，与 Linux 本机较无关，主要与 Linux 主机后的局域网络内计算机较有相关。<ul><li>PREROUTING：在进行路由判断之前所要进行的规则(DNAT/REDIRECT)</li><li>POSTROUTING：在进行路由判断之后所要进行的规则 (SNAT/MASQUERADE)</li><li>OUTPUT：与发送出去的封包有关</li></ul></li><li>mangle (破坏者)：这个表格主要是与特殊的封包的路由旗标有关， 早期仅有 PREROUTING 及 OUTPUT 链，不过从 kernel 2.4.18 之后加入了 INPUT 及 FORWARD 链。</li></ul><p>iptables内建表格与链的相关性（不含mangle)：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117143800107.png" alt="image-20220117143800107"></p><h4 id="iptables设定"><a href="#iptables设定" class="headerlink" title="iptables设定"></a>iptables设定</h4><ul><li><p>iptables查看</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117144001301.png" alt="image-20220117144001301"></p><p>每条记录的格式如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117144101510.png" alt="image-20220117144101510"></p><ul><li>target：代表进行的动作， ACCEPT 是放行，而 REJECT 则是拒绝，此外， 尚有 DROP (丢弃) 的项目！</li><li>prot：代表使用的封包协议，主要有 tcp, udp 及 icmp 三种封包格式；</li><li>opt：额外的选项说明</li><li>source ：代表此规则是针对哪个『来源 IP』进行限制</li><li>destination ：代表此规则是针对哪个『目标 IP』进行限制</li></ul><p>另外，<code>iptables-save</code> 会列出完整的防火墙规则，只但是并没有规格化输出</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117144341435.png" alt="image-20220117144341435"></p></li><li><p>清除规则</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117144510107.png" alt="image-20220117144510107"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117144519802.png" alt="image-20220117144519802"></p></li><li><p>定义预设规则policy</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117145604909.png" alt="image-20220117145604909"></p></li><li><p>定义一般规则</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117145856124.png" alt="image-20220117145856124"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117145902235.png" alt="image-20220117145902235"></p><p>也可以通过端口来设定</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117145951396.png" alt="image-20220117145951396"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117145959547.png" alt="image-20220117145959547"></p></li><li><p>设定iptables的外挂模块</p><p>针对特殊<strong>mac</strong>和<strong>已经响应的封包</strong>的规则设置</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117150138320.png" alt="image-20220117150138320"></p></li><li><p>设定是否响应ping（ICMP数据包）</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117150409962.png" alt="image-20220117150409962"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117150417683.png" alt="image-20220117150417683"></p></li></ul><h3 id="TCP-Wrappers"><a href="#TCP-Wrappers" class="headerlink" title="TCP Wrappers"></a>TCP Wrappers</h3><p>TCP wrappers 就是透过 /etc/hosts.allow, /etc/hosts.deny 这两个文件来管理的一个类似防火墙的机制。</p><p>文件的配置格式：</p><pre class="line-numbers language-none"><code class="language-none">&lt;service(program_name)&gt; : &lt;IP, domain, hostname&gt; &lt;服务 (亦即程序名称)&gt; : &lt;IP 或领域 或主机名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Linux远程联机服务"><a href="#Linux远程联机服务" class="headerlink" title="Linux远程联机服务"></a>Linux远程联机服务</h1><h2 id="常见的方式"><a href="#常见的方式" class="headerlink" title="常见的方式"></a>常见的方式</h2><p>基本上有文字接口与图形接口两种：</p><ul><li>文字接口明码： telnet, rsh 等为主，目前非常少用；</li><li>文字接口密码： ssh 为主，已经取代上述的 telnet, rsh 等明码方式；</li><li>图形接口： Xdmcp, VNC, RDP 等较为常见</li></ul><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>​    SSH 是 Secure Shell protocol 的简写 (安全的壳程序协议)，它可以透过数据封包加密技术，将等待传输的封包加密后再传输到网络上， 因此，数据讯息当然就比较安全。这个 SSH 可以用来取代较不安全的 finger, R Shell (rcp, rlogin, rsh等), talk 及 telnet 等联机模式。</p><p>​    这个 SSH 协议，在预设的状态中，本身就提供两个服务器功能：</p><ul><li><p>类似 telnet 的远程联机使用 shell 的服务器，亦即是俗称的 ssh </p></li><li><p>类似 FTP 服务的 sftp-server ！提供更安全的 FTP 服务</p></li></ul><h3 id="联机加密"><a href="#联机加密" class="headerlink" title="联机加密"></a>联机加密</h3><p>​    目前常见的网络封包加密技术通常是所谓的『非对称密钥系统』来处理的。 主要是透过两把不一样的公钥与私钥 (Public and Private Key) 来进行加密与解密的过程。由于这两把钥匙是提供加解密的功用， 所以在同一个 方向的联机中，这两把钥匙当然是需要成对的！它的功用分别如下：</p><ul><li>公钥 (public key)：提供给远程主机进行数据加密的行为，也就是说，大家都能取得你的公钥来将数据加密的意思；</li><li>私钥 (private key)：远程主机使用你的公钥加密的数据，在本地端就能够使用私钥来进行解密。由于私钥是这么的重要， 因此私钥是不能够外流的！只 能保护在自己的主机上。</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117152713802.png"></p><p>​    目前 SSH 的协议版本有两种，分别是 version 1 与 version 2 ，其中 V2 由于加上 了联机检测的机制， 可以避免联机期间被插入恶意的攻击码，因此比 V1 还要更加的安全。所以啰，请尽量使用 V2 版本即可，不要使用 V1 ！</p><p>ssh联机的步骤如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117152937190.png" alt="image-20220117152937190"></p><ol><li><p>服务器建立公钥档： 每一次启动 sshd 服务时，该服务会主动去找<code>/etc/ssh/ssh_host*</code>的档案，若系统刚刚安装完成时，由于没有这些公钥档案， 因此 sshd 会主动去计算出这些需要的公钥档案，同时也会计算出服务器自己需要的私钥档；</p></li><li><p>客户端主动联机要求</p></li><li><p>服务器传送公钥档给客户端： 接收到客户端的要求后，服务器便将第一个步骤取得的公钥档案传送给客户端使用 (此时应是明码传送，反正公钥本来就是给大家使用的！)；</p></li><li><p>客户端记录/比对服务器的公钥数据及随机计算自己的公私钥：</p><ul><li>若客户端第 一次连接到此服务器，则会将服务器的公钥数据记录到客户端的用户家目录内的 <code>~/.ssh/known_hosts</code>。</li><li>若是已经记录过该服务器的公钥数据，则客户端会去比 对此次接收到的与之前的记录是否有差异。</li></ul><p>若接受此公钥数据， 则开始计算客户端自己的公私钥数据；</p></li><li><p>回传客户端的公钥数据到服务器端： 用户将自己的公钥传送给服务器。</p><ul><li>此时服务器：『具有服务器的私钥与客户端的公钥』</li><li>而客户端则是： 『具有服务器的公钥以及客户端自己的私钥</li></ul></li><li><p>开始双向加解密：</p><ul><li>服务器到客户端：服务器传送数据时，拿用户的公钥 加密后送出。客户端接收后，用自己的私钥解密；</li><li>客户端到服务器：客户端传送数据时，拿服务器的公钥加密后送出。服务器接收后，用服务器的私钥解密</li></ul></li></ol><h3 id="启动ssh服务"><a href="#启动ssh服务" class="headerlink" title="启动ssh服务"></a>启动ssh服务</h3><p>​    Linux 系统当中，默认就已经含有 SSH 的所有需要的软件 了！这包含了可以产生密码等协议的 OpenSSL 软件与 OpenSSH 软件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/etc/init.d/sshd <span class="token punctuation">[</span>restart<span class="token operator">|</span>start<span class="token operator">|</span>stop<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动后，同时在22端口提供了FTP服务！</p><h3 id="client使用ssh"><a href="#client使用ssh" class="headerlink" title="client使用ssh"></a>client使用ssh</h3><ul><li><p>登入远程主机</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117153629031.png" alt="image-20220117153629031"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117153642809.png" alt="image-20220117153642809"></p></li><li><p>文件传输sftp</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sftp</span> <span class="token punctuation">[</span>账号@<span class="token punctuation">]</span>IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>档案异地直接复制scp</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117154036350.png" alt="image-20220117154036350"></p></li></ul><h3 id="ssh配置"><a href="#ssh配置" class="headerlink" title="ssh配置"></a>ssh配置</h3><p>都在<code>/etc/ssh/sshd_config</code>里面</p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p>​    VNC server 会在服务器端启动一个监听用户要求的端口，一般端口号码在 5901 ~ 5910 之间。当客户端启动 X server 联机到 5901 之后， VNC server 再将一 堆预先设定好的 X client 透过这个联机传递到客户端上，最终就能够在客户端显示服务器的图形接口了。</p><ul><li><p>设置和连接VNC</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117154702762.png" alt="image-20220117154702762"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117154733884.png" alt="image-20220117154733884"></p></li><li><p>修改VNC密码</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220117154853886.png" alt="image-20220117154853886"></p></li><li><p>客户端软件</p><p>Linux下是vncviewer.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装</span>yum <span class="token function">install</span> tigervnc<span class="token comment"># 连接</span>vncviewer ip:号码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Linux网络常用指令总结"><a href="#Linux网络常用指令总结" class="headerlink" title="Linux网络常用指令总结"></a>Linux网络常用指令总结</h1><h2 id="网络参数设定"><a href="#网络参数设定" class="headerlink" title="网络参数设定"></a>网络参数设定</h2><h3 id="设定与开闭IP参数"><a href="#设定与开闭IP参数" class="headerlink" title="设定与开闭IP参数"></a>设定与开闭IP参数</h3><ul><li><p><code>ifconfig</code></p><p>手动的启动、观察与修改网络接口的相关参数，IP参数以及MTU等</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114145519188.png" alt="image-20220114145519188"></p></li><li><p><code>ifup</code>和<code>ifdown</code></p><p>手动修改完<code>/etc/sysconfig/network-scripts</code>目录下的文件后，使用<code>ifup</code>使得配置生效。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114145836004.png" alt="image-20220114145836004"></p></li></ul><h3 id="路由修改route"><a href="#路由修改route" class="headerlink" title="路由修改route"></a>路由修改route</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114150140306.png" alt="image-20220114150140306"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114150151057.png" alt="image-20220114150151057"></p><h3 id="网络参数综合指令ip"><a href="#网络参数综合指令ip" class="headerlink" title="网络参数综合指令ip"></a>网络参数综合指令ip</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114150827884.png" alt="image-20220114150827884"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114150834996.png" alt="image-20220114150834996"></p><h3 id="无线网络"><a href="#无线网络" class="headerlink" title="无线网络"></a>无线网络</h3><p><code>iwlist</code>和<code>iwconfig</code></p><h3 id="设置DCHP方式"><a href="#设置DCHP方式" class="headerlink" title="设置DCHP方式"></a>设置DCHP方式</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dhclient netcardid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="网络侦错与观察指令"><a href="#网络侦错与观察指令" class="headerlink" title="网络侦错与观察指令"></a>网络侦错与观察指令</h2><h3 id="两步主机沟通ping"><a href="#两步主机沟通ping" class="headerlink" title="两步主机沟通ping"></a>两步主机沟通ping</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114151217677.png" alt="image-20220114151217677"></p><h3 id="两主机间各节点分析traceroute"><a href="#两主机间各节点分析traceroute" class="headerlink" title="两主机间各节点分析traceroute"></a>两主机间各节点分析traceroute</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114151423163.png" alt="image-20220114151423163"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114151431855.png" alt="image-20220114151431855"></p><h3 id="查看本机的网络联机与后门netstat"><a href="#查看本机的网络联机与后门netstat" class="headerlink" title="查看本机的网络联机与后门netstat"></a>查看本机的网络联机与后门netstat</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114151606099.png" alt="image-20220114151606099"></p><h3 id="侦测主机名与IP对应"><a href="#侦测主机名与IP对应" class="headerlink" title="侦测主机名与IP对应"></a>侦测主机名与IP对应</h3><p>除了<code>dig</code>还有<code>host</code>和<code>nslookup</code></p><ul><li><p><code>host</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114152355932.png" alt="image-20220114152355932">‘</p></li><li><p><code>nslookup</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114152452562.png" alt="image-20220114152452562"></p></li></ul><h2 id="远程联机指令与实时通讯软件"><a href="#远程联机指令与实时通讯软件" class="headerlink" title="远程联机指令与实时通讯软件"></a>远程联机指令与实时通讯软件</h2><h3 id="终端机联机服务器"><a href="#终端机联机服务器" class="headerlink" title="终端机联机服务器"></a>终端机联机服务器</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114152628945.png" alt="image-20220114152628945"></p><h3 id="FTP联机"><a href="#FTP联机" class="headerlink" title="FTP联机"></a>FTP联机</h3><ul><li><p><code>ftp</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ftp</span> <span class="token punctuation">[</span>host<span class="token operator">|</span>IP<span class="token punctuation">]</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Iftp</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114152835510.png" alt="image-20220114152835510"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114152845131.png" alt="image-20220114152845131"></p></li></ul><h2 id="文字接口网页浏览"><a href="#文字接口网页浏览" class="headerlink" title="文字接口网页浏览"></a>文字接口网页浏览</h2><h3 id="文字浏览器links"><a href="#文字浏览器links" class="headerlink" title="文字浏览器links"></a>文字浏览器links</h3><p>进行网页的浏览</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114153920989.png" alt="image-20220114153920989"></p><h3 id="文字接口下载器wget"><a href="#文字接口下载器wget" class="headerlink" title="文字接口下载器wget"></a>文字接口下载器wget</h3><p>网页数据的取得</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114154325906.png" alt="image-20220114154325906"></p><h2 id="数据包获取"><a href="#数据包获取" class="headerlink" title="数据包获取"></a>数据包获取</h2><h3 id="文字接口数据包获取器tcpdump"><a href="#文字接口数据包获取器tcpdump" class="headerlink" title="文字接口数据包获取器tcpdump"></a>文字接口数据包获取器tcpdump</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114154428798.png" alt="image-20220114154428798"></p><h3 id="图形接口数据包获取器wireshark"><a href="#图形接口数据包获取器wireshark" class="headerlink" title="图形接口数据包获取器wireshark"></a>图形接口数据包获取器wireshark</h3><p>安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> wireshark wireshark-gnome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须要在X Window底下运行。</p><h3 id="任意端口的数据包监听和连接"><a href="#任意端口的数据包监听和连接" class="headerlink" title="任意端口的数据包监听和连接"></a>任意端口的数据包监听和连接</h3><p>​    可以监听某些服务的port，也可以和其他端口连接（同步显示stdout等）</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220114155103815.png" alt="image-20220114155103815"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《鸟哥的LINUX私房菜_基础学习篇》笔记</title>
      <link href="/2021/12/16/niao-ge-de-linux-si-fang-cai-ji-chu-xue-xi-pian-bi-ji/"/>
      <url>/2021/12/16/niao-ge-de-linux-si-fang-cai-ji-chu-xue-xi-pian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="《鸟哥的LINUX私房菜-基础学习篇》笔记"><a href="#《鸟哥的LINUX私房菜-基础学习篇》笔记" class="headerlink" title="《鸟哥的LINUX私房菜_基础学习篇》笔记"></a>《鸟哥的LINUX私房菜_基础学习篇》笔记</h1><h1 id="计算机概论"><a href="#计算机概论" class="headerlink" title="计算机概论"></a>计算机概论</h1><h2 id="计算机五大单元"><a href="#计算机五大单元" class="headerlink" title="计算机五大单元"></a>计算机五大单元</h2><p>主要分为三部分：<strong>输入单元、中央处理器(CPU)、输出单元</strong></p><p>五大单元：输入单元、输出单元、CPU内部的控制单元、算术逻辑单元、内存。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211216154107969.png" alt="image-20211216154107969" style="zoom:70%;" /><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><p>​    我们所使用的软件都要经过CPU内部的<strong>微指令集</strong>来完成才行。</p><p>​    指令集的设计分为两种设计理念，即两种主要的CPU种类：</p><ul><li>精简指令集RISC<ul><li>每个指令执行时间短，性能较佳，但要做复杂的事情需要多个指令完成。</li><li>常见CPU公司：Sun的SPARC系列，IBM的Power Architecture系列和<strong>ARM</strong>系列</li><li>常见于，学术大型工作站一般使用SPARC；品牌手机、导航系统、网络交换机、路由器等都是<strong>ARM，是目前世界上使用范围最广的CPU</strong></li></ul></li><li>复杂指令集CISC<ul><li>指令数目多而且复杂，花费时间长，但每个指令可以处理复杂的工作。</li><li>常见有AMD、Intel、VIA等x86架构等CPU。x86架构CPU被大量用于个人计算机。</li><li><strong>x86名字的由来，是因为最早的那个Intel发展的CPU代号8086，后面又有80286，80386等，所以这种架构的CPU就称为x86架构</strong>。2003年后，Intel的x86架构CPU由8位升级到16、32位，后来<strong>AMD依次架构修改为64位CPU</strong>，为了区别两者，64位的个人计算机CPU统称为X86_64架构。</li></ul></li></ul><h4 id="CPU频率"><a href="#CPU频率" class="headerlink" title="CPU频率"></a>CPU频率</h4><ul><li><p>概念</p><p>CPU每秒钟可以进行的工作次数。</p><blockquote><p> CPU频率位3.0GHz，表示CPU在一秒内可以进行3.0*10^9次工作，<strong>每次工作可以进行少数的指令运行</strong>。</p></blockquote></li><li><p>外频与倍频</p><p>CPU与外部各组件速度不一致，很多数据都在CPU内处理，故开发商在CPU内再加上一个加速功能。</p><ul><li>外频，CPU与外部组件进行数据传输/运算的速度</li><li>倍频，CPU内部用来加速工作性能的一个倍数</li></ul><p>两者相乘才是CPU频率。</p><blockquote><p>上面例子CPU频率3.0GHz，而外频是333MHz，那么倍频就是9倍。</p></blockquote></li></ul><h4 id="32位与64位"><a href="#32位与64位" class="headerlink" title="32位与64位"></a>32位与64位</h4><p>​    总线宽度可以分为32/64bit。总线速度 = 总线传输速度(频率) * 总线宽度。</p><p>​    CPU每次能够处理的数据量称为<strong>字组大小</strong>，依据CPU的设计而有32位和64位。<strong>现在所称的计算机是32位或是64位主要是依据CPU解析字组大小而来</strong>。CPU每次能解析的数据量有限，因此内存传来的数据量就有所限制。</p><p>​    <strong>字组大小和总线宽度可以不同</strong>。</p><h4 id="CPU等级"><a href="#CPU等级" class="headerlink" title="CPU等级"></a>CPU等级</h4><p>​    1993年左右，x86架构的CPU在intel的Pentium系列后设计不统一，出现i386、i586、i686等名词出现。</p><ul><li>在Intel Pentium MMX与AMD K6年代的CPU统称为i586等级</li><li>Intel Celeron与AMD Athlon(K7)年代之后的32位CPU称为i686等级</li><li>目前64位CPU则统称为x86_64等级。</li></ul><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>​    不论是软件程序还是数据，都必须要读如内存后CPU才能使用。</p><h4 id="内存组件"><a href="#内存组件" class="headerlink" title="内存组件"></a>内存组件</h4><p>​    个人PC中主要位动态随机访问内存（DRAM）。断电后数据消失，也称为<strong>挥发性内存</strong>。</p><p>​    通常内存越大表示系统越快，因为系统不用常常释放一些内存内部的数据。<strong>对服务器而言，内存的容量有时比CPU的速度还重要</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211216164842031.png" alt="image-20211216164842031"></p><p>​    <strong>理论上，CPU与内存的外频应该要相同才好</strong>。</p><h4 id="双通道设计"><a href="#双通道设计" class="headerlink" title="双通道设计"></a>双通道设计</h4><p>​    传统总线宽度仅为64位，为了加大这个宽度，可以将两个内存汇整在一起，则可以达到128位。数据可以同步写入/读出内存中，提升整体的频宽。</p><p>​    开启双通道的内存，容量和型号最好相同！</p><h4 id="第二缓存"><a href="#第二缓存" class="headerlink" title="第二缓存"></a>第二缓存</h4><p>​    为了某些常用的程序或者数据可以放置到CPU内部而设计，那么CPU数据的读取就不需要通过北桥了。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211216165422900.png" alt="image-20211216165422900" style="zoom:50%;" /><p>​    第二缓存(L2 Cache)在CPU内部，故L2内存的速度必须要与CPU频率相同。DRAM无法到达，故使用SRAM。</p><h2 id="常用计算单位"><a href="#常用计算单位" class="headerlink" title="常用计算单位"></a>常用计算单位</h2><ul><li><p>大小单位</p><p>1Byte = 8bit</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211216160717997.png" alt="image-20211216160717997"></p></li><li><p>速度单位</p><ul><li>CPU的运算速度常使用MHz或GHz</li><li>网络常使用Mbit/s，即每秒多少Mbit</li></ul></li></ul><h2 id="接口设备"><a href="#接口设备" class="headerlink" title="接口设备"></a>接口设备</h2><p>​    单有CPU也无法运作计算机，需要其他的接口设备才能实际运行。</p><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><h4 id="主板芯片组"><a href="#主板芯片组" class="headerlink" title="主板芯片组"></a>主板芯片组</h4><ul><li>负责将所有的设备连接在一起，让所有的设备能够进行协调与通信。主板上最重要的组件是主板<strong>芯片组</strong>。</li><li>芯片组通常分为两个桥接器来控制各组件的通信<ul><li>北桥负责连接速度较快的CPU、内存与显卡等组件。<strong>北桥的总线称为系统总线</strong>，因为是内存传输的主要信道。</li><li>南桥负责连接速度较慢的周边接口，包括硬盘、USB、网卡等，**南桥的总线是输入输出总线(IO)**。</li></ul></li><li>芯片组负责所有通信，所以也是一个可能会散发出高热量的组件。因此主板上面会发现一些外接的小风扇或者是散热片。</li></ul><h4 id="IO地址与IRQ中断信道"><a href="#IO地址与IRQ中断信道" class="headerlink" title="IO地址与IRQ中断信道"></a>IO地址与IRQ中断信道</h4><p>​    是主板芯片组和其他设备通信的具体通信方式。</p><ul><li>每个设备都有自己的IO地址。一般不能有两个设备使用同一个IO地址（类比<strong>门牌号</strong>）</li><li>各设备可以通过IRQ中断通信信道来告知CPU该设备的工作情况，以方便CPU进行工作分配的任务。（类比**各个门牌连接到邮件中心CPU的专门路径。</li></ul><h4 id="CMOS与BIOS"><a href="#CMOS与BIOS" class="headerlink" title="CMOS与BIOS"></a>CMOS与BIOS</h4><ul><li>CMOS主要<strong>记录主板上面的重要参数</strong>，包括系统时间、CPU电压与频率、各项设备IO地址与IRQ等。<strong>由于记录这些数据需要花费店里，故主板上面才有电池</strong>。</li><li>BIOS位写入到主板闪存或EEPROM的程序，他可以<strong>在开机的时候执行</strong>，以加载CMOS当中的参数，并尝试调用存储设备中的开机程序，进行一步进入操作系统。</li></ul><h3 id="存储设备"><a href="#存储设备" class="headerlink" title="存储设备"></a>存储设备</h3><p>​    存储设备包括：硬盘、软盘、MO、CD、DVD、U盘等。其中最常见的是<strong>硬盘</strong>。</p><h4 id="硬盘的物理组成"><a href="#硬盘的物理组成" class="headerlink" title="硬盘的物理组成"></a>硬盘的物理组成</h4><p>​    主要由很多的盘片、机械手臂、磁头与主轴马达组成。实际的数据写在具有磁性物质的盘片上。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211217173130463.png" alt="image-20211217173130463"></p><h4 id="盘片的数据"><a href="#盘片的数据" class="headerlink" title="盘片的数据"></a>盘片的数据</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211217173212439.png" alt="image-20211217173212439"></p><ul><li><p>扇区：由同心圆以放射状的方式分割出磁盘的<strong>最小存储单位</strong>，每个扇区大小<strong>512bytes</strong>，<strong>这个值是固定的</strong>。</p></li><li><p>磁道：扇区组成的一个就是磁道。</p></li><li><p>柱面：在多磁盘上面，同一个磁道可以组成一个柱面，<strong>也是一般分割磁盘时的最小单位</strong>。</p></li></ul><h4 id="传输接口"><a href="#传输接口" class="headerlink" title="传输接口"></a>传输接口</h4><ul><li><p>IDE接口</p></li><li><p>SATA接口</p><p>排线较细小，有利于主机壳内部的散热与安装。</p><p>目前主流的个人计算机硬盘已经被SATA代替了。SATA-2传输速度可达300MB/s。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211217174256889.png" alt="image-20211217174256889"></p></li><li><p>SCSI接口</p><p>用于工作站等级以上的硬盘传输接口。硬盘的控制器含有一块处理器。</p></li></ul><h4 id="一些参数"><a href="#一些参数" class="headerlink" title="一些参数"></a>一些参数</h4><ul><li><p>容量</p></li><li><p>缓冲存储器</p><p>硬盘还有一个缓冲存储器，将硬盘内常用的数据缓存起来。这个缓冲器越大越好。</p></li><li><p>转速</p><p>指主轴马达转动盘片的速度，影响读取数据性能。越高越好。</p></li></ul><h3 id="显示设备"><a href="#显示设备" class="headerlink" title="显示设备"></a>显示设备</h3><ul><li><p>概念</p><p>显卡又称VGA(Video Graphics Array)。每个图像显示的颜色都会占用内存，所以显卡上面有一个内存容量，它将影响到最终屏幕分辨率和色彩深度。</p></li><li><p>GPU</p><p>显卡厂商为了缓解CPU进行3D运算压力，直接在显卡上面嵌入一个3D加速的芯片，即GPU由来。</p></li><li><p>与CPU通信</p><p>通过北桥芯片与CPU、内存通信。</p><p>也是需要告诉运算的组件，所以数据的传输速度越快越好。显卡规格变化：PCI —》AGP —》PCI-Express(PCIe)。他们主要区别在数据传输的频宽。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211217172647532.png" alt="image-20211217172647532"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211217172702238.png" alt="image-20211217172702238"></p></li></ul><h3 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h3><h3 id="其他设备"><a href="#其他设备" class="headerlink" title="其他设备"></a>其他设备</h3><h4 id="PCI-e-适配卡"><a href="#PCI-e-适配卡" class="headerlink" title="PCI(e)适配卡"></a>PCI(e)适配卡</h4><p>​    提供多个PCI(e)插槽给用户插入其他功能卡。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>​    提供一个开发软件的操作接口给工程师开发软件，通过接口即可驱动所有的硬件。</p><p>​    <strong>操作系统其实也是一组程序</strong>，这组程序的重点在于管理计算机的所有活动以及驱动系统中的所有硬件。</p><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>​    让CPU开始判断逻辑与运算数值，让内存开始读取数据与程序代码，让硬盘开始被访问等。硬件的所有操作都必须通过操作系统完成。<strong>这就是操作系统内核的功能</strong>。</p><p>​    主要在于管控硬件与提供相关的能力，非常重要，因此<strong>内核程序所放置到内存当中的区块是受保护的，并且开机后就一直常驻内存</strong>。</p><p><strong>内核通常包含一些功能</strong>：</p><ul><li>提供系统调用接口</li><li>程序管理：CPU调度机制有较加快整体系统性能</li><li>内存管理</li><li>文件系统管理</li><li>设备驱动</li></ul><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>​    <img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211218164627436.png" alt="image-20211218164627436" style="zoom:50%;" /></p><p>​    为了保护内核，并且而让程序员比较容易开发软件，因此操作系统除了内核程序之外，通常还会提供一整组开发接口，那就是<strong>系统调用</strong>。</p><h3 id="驱动程序"><a href="#驱动程序" class="headerlink" title="驱动程序"></a>驱动程序</h3><p>​    操作系统提供一个开发接口给硬件开发商，让他们可以根据这个接口设计可以驱动他们硬件的驱动程序，安装后就可以在操作系统上驱动硬件设备。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211218170823839.png" alt="image-20211218170823839" style="zoom:50%;" /><h1 id="Linux概览"><a href="#Linux概览" class="headerlink" title="Linux概览"></a>Linux概览</h1><p>​    提供了一个完整的操作系统当中最底层的硬件控制与资源管理的完整架构，是沿袭Unix良好的传统而来的（UNIX Like 系统），所以<strong>相当稳定并且功能强大，且可以在目前的个人计算机（x86系统）上面跑。</strong></p><h2 id="一些历史"><a href="#一些历史" class="headerlink" title="一些历史"></a>一些历史</h2><ul><li><p>UNIX</p><ul><li>1973年，UNIX正式诞生，Ritchie等人以C语言写出第一个正式UNIX内核。</li><li>1977年，UNIX的重要分支<strong>BSD（Berkeley Software Distribution, Bill Joy也是Sun的创办者)诞生</strong>。</li><li>1984年，x86架构的Minix操作系统诞生。</li><li>1984年，Richard Mathew Stallman（史托曼）创建了<strong>GNU项目，目的是创建一个自由、开放的UNIX操作系统（Free UNIX)<strong>。1999年左右，创立</strong>自由软件基金会（Free Software Foundation, FSF)<strong>。1985年左右，为了避免GNU所开发的自由软件被其他人所利用而成为专利软件，与律师草拟了</strong>通用公共许可证（General Public License, GPL）</strong>，称为<strong>CopyLeft（与专利软件的CopyRight相对）</strong>。</li><li>1988年，由MIT（麻省理工学院）成立了非营利性性质的<strong>XFree86（X Windows System + Free + x86）</strong>。后面在Linux的GUI发展中有贡献。</li></ul></li><li><p>Linux</p><ul><li><p>1991年，芬兰大学生Linus Torvalds，以bash，gcc(GNU C Complie, 一种c语言编译器)等工具写了一个小小的内核程序，且可以在386机器上面运行。</p></li><li><p>期间，为了使LInux程序软件可以兼容UNIX，所以开始<strong>参考POSIX规范修改Linux</strong>。POSIX是可携式操作系统接口（Portable Operating System Interface)缩写，重点在于规范内核与应用程序之间的接口，由IEEE发布的一项标准。UNIX即按照这个规范来设计的。</p></li><li><p>1994年，在广大网友合作下完成Linux的内核正式版Version 1.0。这一版本还有X Window System的支持。1996年完成2.0版本。</p></li><li><p>为了让用户能够接触到Linux，很多的商业公司和团体奖Linux Kernel(含tools)与可运行的软件集成起来，放到光盘或网络给用户安装。这个<strong>”Kernel + softwares + Tools”的可完全安装的系统，称为Linux distribution可完全安装套件</strong>。</p><p>distributions主要分为两大系统：</p><ul><li><p>使用RPM安装软件的系统，如Red Hat, Fedora, SuSE等。</p></li><li><p>使用Debian等dpkg方式安装软件等系统，如Debian, Ubuntu, B2D等。</p><h2 id="Linux特色"><a href="#Linux特色" class="headerlink" title="Linux特色"></a>Linux特色</h2></li></ul></li></ul></li><li><p>配置需求低廉</p></li><li><p>系统稳定</p></li><li><p>保密功能强</p></li><li><p>架构开放，开源，免费或少许费用</p></li><li><p>多任务、多用户</p></li></ul><h2 id="Linux文件"><a href="#Linux文件" class="headerlink" title="Linux文件"></a>Linux文件</h2><p>​    <strong>在Linux系统中，每个设备都被当成一个文件来对待</strong>。常见设备与对应Linux文件名如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211220105319380.png" alt="image-20211220105319380"></p><p>​    几乎所有的硬件设备文件都在<code>/dev</code>这个目录内。</p><p>​    系统通过文件的<strong>major与minor</strong>数值识别设备文件。常见硬盘的值如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229145645115.png" alt="image-20211229145645115"></p><h2 id="Linux文件结构和磁盘挂载"><a href="#Linux文件结构和磁盘挂载" class="headerlink" title="Linux文件结构和磁盘挂载"></a>Linux文件结构和磁盘挂载</h2><ul><li>文件结构</li></ul><p>​    Linux使用<strong>目录树</strong>结构，以根目录（/）为主，然后向下呈现分枝状的目录结构的一种文件结构。</p><p>​    如何结合目录树的架构与磁盘内的数据，这个时候就牵扯到“挂载”（mount）问题。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222142446218.png" alt="image-20211222142446218"></p><ul><li><p>磁盘挂载</p><p>利用一个目录当进入点，将磁盘分区的数据放置在该目录下，即<strong>进入该目录就可以读取该分区</strong>。这个操作成为<strong>挂载</strong>，进入点的目录成为<strong>挂载点</strong>。</p><p>如下图，当数据放置在/home内的各个目录时，数据放置在partition2分区；当数据放置在其他目录时，数据放置在partiton1目录。</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222142819962.png" alt="image-20211222142819962"></p><h2 id="Linux磁盘分区"><a href="#Linux磁盘分区" class="headerlink" title="Linux磁盘分区"></a>Linux磁盘分区</h2><h3 id="磁盘分区文件"><a href="#磁盘分区文件" class="headerlink" title="磁盘分区文件"></a>磁盘分区文件</h3><p>​    <strong>整块磁盘的第一个扇区特别重要</strong>，记录了整块磁盘的重要信息。主要有两个重要的信息：</p><ul><li>主引导分区（Master Boot Record， MBR）：可以安装引导加载程序的地方，有446bytes。</li><li>分区表（partition table）：记录整块磁盘分区的状态，有64bytes。</li></ul><h3 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h3><p>​    分区的最小单位为<strong>柱面</strong>。分区是以<strong>柱面号码</strong>的方式记录，在分区表的64bytes中，总共分为<strong>四组记录区</strong>，每组及录取记录该区段的<strong>起始与结束的柱面号码</strong>。</p><p>​    分区表64bytes最多容纳四个分区，这四个分区被称为<strong>主(Primary)分区</strong>，若主分区被继续划分，则成为<strong>扩展(Extended)分区</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211220110119164.png" alt="image-20211220110119164"></p><p>​    假设硬盘为/dev/hda，则四个区的文件名为如下，其中后面跟的数字，与该分区所在的位置有关。</p><ul><li>P1: /dev/hda1</li><li>P2: /dev/hda2</li><li>P3: /dev/hda3</li><li>P4: /dev/hda4</li></ul><h3 id="扩展分区"><a href="#扩展分区" class="headerlink" title="扩展分区"></a>扩展分区</h3><p>​    Linux一块硬盘想分出不止四个分区，是可以的。<strong>既然第一个分区所在的分区表只能记录四条数据，那可以利用额外的扇区来记录更多的分区信息</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211220111330670.png" alt="image-20211220111330670"></p><p>​    上图P1称为主分区，P2称为扩展分区，L[1-5]由P2继续切分而来称为<strong>逻辑分区(logical partition)<strong>。设备文件名如下。注意没有/dev/hda3和/dev/hda4。因为</strong>前四个号码都是留给Primary或者Extended用的</strong></p><ul><li>P1: /dev/hda1</li><li>P2: /dev/hda2</li><li>L1: /dev/hda5</li><li>L2: /dev/hda6</li><li>L3: /dev/hda7</li><li>L4: /dev/hda8</li><li>L5: /dev/hda9</li></ul><p>​    有几个注意点：</p><ul><li>扩展分区最多只能有一个</li><li>能够被格式化后作为数据访问的分区为主分区和逻辑分区，扩展分区无法格式化</li><li>逻辑分区数量依操作系统不同，在Linux系统中，IDE硬盘最多59个逻辑分区（5-63号），SATA硬盘有11个逻辑分区（5号到15号）。</li></ul><h3 id="建议的磁盘规划"><a href="#建议的磁盘规划" class="headerlink" title="建议的磁盘规划"></a>建议的磁盘规划</h3><ul><li><p>简单的分区方法</p><p>仅分出根目录与内存交换空间(/ 和 swap)。</p><p>swap内存交换空间的功能是：当有数据被存放在物理内存里面，但是这些数据又不是常被CPU所取用时，那么这些不常被使用的程序将会被丢到硬盘的swap交换空间中，而将快速的物理内存空间释放出来给真正需要的程序使用。</p></li><li><p>稍微麻烦</p><p>需要较大容量和读写频繁的目录，独立于根目录分区。常见容量大或读写频繁的目录：</p><ul><li>/</li><li>/usr</li><li>/home</li><li>/var</li><li>swap</li></ul></li></ul><h2 id="Linux开机流程"><a href="#Linux开机流程" class="headerlink" title="Linux开机流程"></a>Linux开机流程</h2><h3 id="正常开机"><a href="#正常开机" class="headerlink" title="正常开机"></a>正常开机</h3><ol><li>BIOS，开机主动执行的程序，会识别第一个可开机的设备（硬盘）。</li><li>MBR，第一个可开机设备的第一个扇区内的主引导分区块，内包含引导加载程序。</li><li>引导加载程序（Boot loader），读取内核文件<ul><li>提供菜单：用户选择不同的开机选项，也是<strong>多重引导</strong>的重要功能。</li><li>载入内核文件：直接指向可开机的程序区段来开始操作系统</li><li>转交其他loader：将引导加载功能转交给其他loader负责。</li></ul></li><li>内核文件，内核文件工作，开始操作系统的功能。<ul><li>内核开始检测硬件与加载驱动程序</li><li>内核主动调用init进程，init进程取得run-level信息</li><li>init执行<code>/etc/rc.d/rc.sysinit</code>文件来准备软件执行的操作环境</li><li>init执行run-level的各个服务的启动</li><li>inti执行<code>/etc/rc.d/rc.local</code>文件</li><li>init执行终端机模拟程序<code>mingetty</code>来启动login进程，等待用户登录</li></ul></li></ol><h4 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h4><p>​    系统加载BIOS（Basic Input Output System）程序，来加载CMOS的信息，从而获得主机的各项<strong>硬件配置</strong>。包括：</p><ul><li>CPU与接口设备的通信频率</li><li>启动设备的查找顺序</li><li>硬盘的大小与类型</li><li>系统时间</li><li>总线信息</li><li>接口设备的IO地址</li><li>IRQ信息等等</li></ul><p>之后，BIOS继续进行<strong>开机自检、硬件检测的初始化、配置PnP（即插即用设备）、定义出可启动的设备顺序</strong>。后面就准备通过MBR开始读取启动设备的数据了。</p><h4 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h4><p>​    在启动设备的第一扇区，里面包含<strong>可以处理内核文件加载问题的引导装载程序，Boot Loader</strong>。</p><p>​    BIOS是通过硬件的INT13中断功能读取MBR。</p><h4 id="Boot-Loader"><a href="#Boot-Loader" class="headerlink" title="Boot Loader"></a>Boot Loader</h4><p>​    每种操作系统都有自己的Boot Loader，在自己磁盘分区的引导扇区(boot sector)。在安装Winodows的时候，会默认将windows在引导扇区的boot loader拷贝一份并安装到系统的MBR；在安装Linux的时候，可以选择装，也可以不装。</p><p>​    通过boot Loader提供的<strong>菜单功能</strong>，选择<strong>内核文件进行加载</strong>，同时可以配合<strong>loader的控制权转交的功能实现多重引导</strong>。但是，Windows的loader默认不具有控制权转交的功能。<strong>所以，在多系统的时候，一定要先装Windows再装Linux</strong>。</p><p>​    在具体boot loader执行过程中分为两个阶段：</p><ul><li><p>执行boot loader主程序</p><p>MBR通常仅安装了boot loader的最小主程序，并没有安装loader的相关配置文件</p></li><li><p>主程序加载配置文件</p><p>通过boot loader加载所有配置文件（一般在/boot下面）与相关的环境参数文件（文件系统定义与主要配置文件menu.lst）</p></li></ul><p><strong>现在常见的boot loader一般是grub</strong>，与grub有关的文件都放置到<code>/boot/grub</code>中。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111144346433.png" alt="image-20220111144346433"></p><p>其中最重要的配置文件是<code>menu.lst</code>文件。</p><h4 id="加载内核检测硬件"><a href="#加载内核检测硬件" class="headerlink" title="加载内核检测硬件"></a>加载内核检测硬件</h4><p>​    Linux会将内核解压缩到内存中，并利用内核的功能，开始测试与驱动各个周边设备（存储设备、CPU、网卡、声卡等）。然后，内核<strong>重新检测一次硬件（不一定使用BIOS的硬件检测信息）</strong>，此时，<strong>内核正式开始接管BIOS的工作。</strong></p><p>​    内核文件被加载后，一般放置在<code>/boot</code>目录下。在<code>/boot/modules</code>内，有很多<strong>内核模块</strong>（可以想想成驱动程序，如USB、SATA等）可以供Linux内核动态加载，该目录一定和根目录放置在同一分区！启动过程中<strong>内核必须挂载根目录（此时，以只读方式挂载），这样才能内核模块提供加载驱动程序的功能</strong>。</p><blockquote><p>若Linux安装在SATA里面，会出现这样的矛盾：</p><p>​    内核不认识SATA接口，需要加载SATA程序，不然没办法挂载根目录；</p><p>​    但是SATA驱动程序在<code>/boot/modules</code>里面，不挂载根目录，无法读取这个目录的驱动程序。</p><p>这里，还有个<strong>虚拟文件系统（InitialRAM Disk，一般文件名为<code>/boot/initrd</code>）</strong>可以解决这个问题。它通过boot loader加载到内存解压缩后，在内存中仿真成一个根目录，来加载启动过程中需要的内核模块。等模块都载入完成后，帮助内核重新调用<code>/sbin/init</code>来继续启动流程。</p><p><strong>如果是ext2/ext3文件系统的IDE接口的磁盘，则不需要<code>initrd</code>就可以直接被内核加载。</strong></p></blockquote><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111133612615.png" alt="image-20220111133612615"></p><h4 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h4><p>​    内核加载完成、硬件检测完成和驱动程序加载后，内核主动调用第一个进程<code>/sbin/init</code>。主要的功能是准备软件执行的环境，包括：<strong>系统的主机名、网络设置、语系处理、文件系统格式及其它服务的启动</strong>。<code>init</code>进程的配置文件为**<code>/etc/inittab</code>**。</p><ul><li><p>重要的配置项<code>run level</code></p><p>根据有无网络与有无X Window划分为7个等级，来规定系统使用不同的服务来启动。</p><ul><li>0：halt，系统直接关机</li><li>1：single user mode，单用户维护模式，用在系统出问题时的维护</li><li>2：Multi user without NFS，多用户模式，但无NFS服务</li><li>3：Full multi user mode，完整含有网络功能的纯文本模式</li><li>4：unused，系统保留功能</li><li>5：X11，与run level3类型，但使用X Window模式加载</li><li>6：reboot，重新启动</li></ul></li><li><p><code>/etc/inittab</code>文件结构</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111134232187.png" alt="image-20220111134232187"></p><p>配置语法：</p><p><code>[设置选项]:[run level]:[init的操作行为]:[命令选项]</code></p><ol><li><p>设置选项。最多四个字符，代表init的工作选项</p></li><li><p>run level，可能会配置多个等级</p></li><li><p>init的操作行为，主要如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111134943106.png" alt="image-20220111134943106"></p></li><li><p>选项命令，即可以进行的一些script命令</p></li></ol></li><li><p>init的处理流程</p><p>配置文件也是从上至下一行一行读取。</p><ul><li>取得默认run level</li><li>使用<code>/etc/rc.d/rc.sysinit</code>进行系统初始化，它里面的脚本主要配置文件是<code>/etc/sysconfig/*</code></li><li>如果此时run level是5，则加载<code>/etc/rc.d/rc5</code></li><li>设置好<code>[Ctrl]+[Alt]+[Del]</code>组合键</li><li>设置不断电系统的pf，pr两种机制</li><li>启动mingetty的6个终端机tty1~tty6</li><li>最终以<code>/etc/X11/perfdm -nodaemon启动图像界面</code></li></ul></li></ul><h4 id="etc-rc-d-rc-sysinit进行系统初始化"><a href="#etc-rc-d-rc-sysinit进行系统初始化" class="headerlink" title="/etc/rc.d/rc.sysinit进行系统初始化"></a><code>/etc/rc.d/rc.sysinit</code>进行系统初始化</h4><p>主要是设置各种系统环境，有以下：</p><ul><li><p>取得网络环境与主机类型</p><p>读取网络配置文件<code>/etc/sysconfig/network</code>，取得主机名与默认网关等网络环境</p></li><li><p>测试与挂载内存设备<code>/proc</code>及USB设备<code>/sys</code></p></li><li><p>决定是否启动SELinux</p></li><li><p>启动系统的随机数生成器</p></li><li><p>设置终端机字体</p></li><li><p>设置显示于启动过程找那个的欢迎界面</p></li><li><p>设置系统时间与时区</p><p>读取<code>/etc/sysconfig/clock</code>的设置值</p></li><li><p>接口设备的检测与PnP参数测试</p><p>根据内核在启动时的检测结果<code>/proc/sys/kernel/modprobe</code>来进行检测</p></li><li><p>用户自定义模块的加载</p><p>读取<code>/etc/sysconfig/modules/*.moduels</code></p></li><li><p>加载内核的相关设置</p><p>读取<code>/etc/ssyctl.conf</code></p></li><li><p>设置主机名与初始化电源管理模块</p></li><li><p>初始化软件磁盘阵列</p><p>读取<code>/etc/mdadm.conf</code></p></li><li><p>初始化LVM的文件系统</p></li><li><p>以fsck检验磁盘文件系统</p></li><li><p>进行磁盘配额quota的转化</p></li><li><p>重新以可读写模式挂载系统磁盘</p></li><li><p>启动quota</p></li><li><p>启动系统伪随机数生成器</p></li><li><p>清除启动过程中的临时文件</p></li><li><p>启动相关信息加载到<code>/var/log/dmesg</code>文件中</p></li></ul><h4 id="etc-rc-d-rcN启动系统服务"><a href="#etc-rc-d-rcN启动系统服务" class="headerlink" title="/etc/rc.d/rcN启动系统服务"></a>/etc/rc.d/rcN启动系统服务</h4><p>​    内部定义了启动时需要启动的服务信息，并有一定的启动先后顺序。</p><p>​    特别是最后一行，加载<code>/etc/rc.d/rc.local</code>文件，是用户自定义的开机启动程序</p><h3 id="多重引导"><a href="#多重引导" class="headerlink" title="多重引导"></a>多重引导</h3><p>其中引导加载程序除了可以安装在MBR之外，还可以安装在每个分区的引导扇区(boot sector)，才有了<strong>多重引导</strong>功能。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211220134716538.png" alt="image-20211220134716538"></p><p>​    每个分区都有自己的启动扇区，实际可开机的内核文件是放置在各分区内的。</p><p>​    loader只会认识自己的系统分区内的可开机内核文件和其他loader，loader可以直接指向或是间接将管理权转交另一个管理程序。</p><h2 id="Linux登录方式"><a href="#Linux登录方式" class="headerlink" title="Linux登录方式"></a>Linux登录方式</h2><p>​    在Linux默认登录模式中，主要分为两种：</p><ul><li>纯文本界面（运行等级 run level 3)，可以拥有tty1~tty6的终端界面。</li><li>图形界面（运行等级 run level 5），拥有tty1~tty7。其中tty7就是开机后等待登录的图形环境。</li></ul><p>登录环境的切换：</p><ul><li>[Ctrl] + [Alt] + [F1] ~ [F6]：文字界面登录tty1~tty6终端</li><li>[Ctrl] + [Alt] + [F7]：图形界面桌面</li></ul><h2 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h2><p>​    内核文件是个压缩文件，解压缩后才加载到内存中。内核文件相关位置：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111142448466.png" alt="image-20220111142448466"></p><h2 id="Linux命令行和简单命令"><a href="#Linux命令行和简单命令" class="headerlink" title="Linux命令行和简单命令"></a>Linux命令行和简单命令</h2><h3 id="可以输入多条命令"><a href="#可以输入多条命令" class="headerlink" title="可以输入多条命令"></a>可以输入多条命令</h3><p>​    使用**分号(;)**隔开多条命令，命令按顺序执行。</p><h3 id="可以换行输入命令"><a href="#可以换行输入命令" class="headerlink" title="可以换行输入命令"></a>可以换行输入命令</h3><p>​    当输入命令太长是时，可以使用<code>\[Enter]</code>进行换行输入</p><h3 id="用户符号区别"><a href="#用户符号区别" class="headerlink" title="用户符号区别"></a>用户符号区别</h3><ul><li><p>普通用户</p><p>[xxx@xxx <del>]$，其中`</del>`代表的是用户的主文件夹，即/home/username文件夹</p></li><li><p>root</p><p>[xxx@xxx <del>]#，命令提示符和普通用户不一样，且</del>代表/root文件夹</p></li></ul><h3 id="执行命令的查询路径PATH"><a href="#执行命令的查询路径PATH" class="headerlink" title="执行命令的查询路径PATH"></a>执行命令的查询路径PATH</h3><ul><li><p>概念</p><p>在终端执行命令的时候，其实由一个同名的可执行文件存在。系统会按照PATH的设置去每个PATH定义的目录下查询可执行文件，如果有多个同名的可执行文件，先查到的可执行文件先执行。（当涉及到别名等其他情况时情况会更复杂，详见<code>Shell-》Bash Shell环境-》路径与命令查找顺序</code>）</p></li><li><p>查看PATH</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个目录之间以冒号(:)隔开，有顺序之分。</p></li><li><p>一些事项</p><ul><li>不同身份用户默认的PATH不同，默认能够随意执行的命令也不同</li><li><strong>使用绝对路径或相对路径直接指定命令的文件名来执行，会比查询PATH来的正确</strong></li></ul></li></ul><h3 id="开关机相关命令"><a href="#开关机相关命令" class="headerlink" title="开关机相关命令"></a>开关机相关命令</h3><ul><li><p>将数据同步写入硬盘</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出登录</p><p>注销Linux，退出登录状态。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关机</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">shutdownpoweroff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="基础操作命令"><a href="#基础操作命令" class="headerlink" title="基础操作命令"></a>基础操作命令</h3><p>​    在Linux中，不一样的大小写代表不同命令，即<strong>大小写敏感</strong>。</p><ul><li><p>显示日期和时间</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示日历</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cal</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>简单计算器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">bc</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="重要的热键"><a href="#重要的热键" class="headerlink" title="重要的热键"></a>重要的热键</h3><ul><li><p>[Tab]</p><p>具有“命令补齐”和“文件补齐”功能。</p></li><li><p>[Ctrl] + C</p><p>中断当前程序。但对于比较重要的命令慎用。</p></li><li><p>[Ctrl] + D</p><p>代表<strong>键盘输入结束</strong>。也可以代替<code>exit</code>命令。</p></li></ul><h3 id="查询命令-man"><a href="#查询命令-man" class="headerlink" title="查询命令 man"></a>查询命令 man</h3><p>​    man是manual（操作说明）的简写。查询的结果页面称为man page。</p><ul><li><p>man page存放位置</p><p>一般为<code>/usr/share/man</code>，可以修改<code>/etc/man.config</code>或<code>/ect/man.conf</code>或<code>/etc/manpath.conf</code>来改变man page的查询路径。</p></li><li><p>使用方法</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">man</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222153617005.png" alt="image-20211222153617005" style="zoom:80%;" /><ul><li><p>一些操作</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222154010796.png" alt="image-20211222154010796"></p></li><li><p>man page简单解析</p><ul><li>第一行，命令后面的数字的含义</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222153704567.png" alt="image-20211222153704567"></p><ul><li><p>其他参数</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211222154050586.png" alt="image-20211222154050586"></p></li></ul></li></ul><h3 id="查询命令-info"><a href="#查询命令-info" class="headerlink" title="查询命令 info"></a>查询命令 info</h3><p>​    和man类似，但输出格式有所不同。</p><h3 id="查看Linux内核信息命令"><a href="#查看Linux内核信息命令" class="headerlink" title="查看Linux内核信息命令"></a>查看Linux内核信息命令</h3><ul><li>查看实际的内核版本</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看distribution信息</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lsb_release -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="清除界面显示"><a href="#清除界面显示" class="headerlink" title="清除界面显示"></a>清除界面显示</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h1><h2 id="Linux的账号与用户组"><a href="#Linux的账号与用户组" class="headerlink" title="Linux的账号与用户组"></a>Linux的账号与用户组</h2><h3 id="用户标识符"><a href="#用户标识符" class="headerlink" title="用户标识符"></a>用户标识符</h3><p>​    在登录Linux时，是根据ID（UID和GID）来辨认用户，ID和账号的关系存储在**<code>/etc/passwd</code>和<code>/etc/group</code>**文件中。</p><p>​    标识符ID分为两种</p><ul><li>用户ID，UID</li><li>用户组ID，GID</li></ul><h3 id="用户账号"><a href="#用户账号" class="headerlink" title="用户账号"></a>用户账号</h3><h4 id="用户登录shell流程"><a href="#用户登录shell流程" class="headerlink" title="用户登录shell流程"></a>用户登录shell流程</h4><ol><li>先查<code>/etc/passwd</code>文件是否有相关账号<ul><li>有，查出对应的UID，然后从<code>/etc/group</code>文件读出GID</li><li>没有，提示没有账号</li></ul></li><li>核对密码表，从<code>/etc/shadow</code>找出对应账号信息，对比密码是否正确</li><li>如果一切都正确，进入shell</li></ol><h4 id="etc-passwd文件概览"><a href="#etc-passwd文件概览" class="headerlink" title="/etc/passwd文件概览"></a><code>/etc/passwd</code>文件概览</h4><p>每一行都代表一个账号。注意，其中有很多系统账号，不能删除！</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106113429085.png" alt="image-20220106113429085"></p><p>一共被<code>:</code>分隔出7个字段</p><ol><li><p>账号名称</p></li><li><p>密码</p><p>显示<code>x</code>，因为对应密码被放到<code>/etc/shadow</code>文件了</p></li><li><p>UID</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106113610216.png" alt="image-20220106113610216"></p></li><li><p>GID</p></li><li><p>用户信息说明列</p></li><li><p>主文件夹路径</p><p>默认用户在<code>/home/username</code>，root在<code>/root</code></p></li><li><p>Shell</p><p>用户登录的默认shell设置</p></li></ol><h4 id="etc-shadow文件概览"><a href="#etc-shadow文件概览" class="headerlink" title="/etc/shadow文件概览"></a><code>/etc/shadow</code>文件概览</h4><p>每一行都代表一个账号信息</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106113918319.png" alt="image-20220106113918319"></p><p>一共被<code>:</code>分隔出9个字段</p><ol><li><p>账户名称</p></li><li><p>密码</p><p>密码经过加密了</p></li><li><p>最近更改密码的日期</p><p>从1970-01-01开始计算的累加日期</p></li><li><p>密码不可被更改的天数</p><p>相对于第3字段而言的，即为修改密码的间隔时间参数</p></li><li><p>密码需要修改的天数</p><p>相对于第3字段而言的，即为下一次需要修改密码的时间间隔</p></li><li><p>密码需要修改期限前的警告天数</p><p>相对第5字段而言的，发出提醒</p></li><li><p>密码过期后的账号宽限时间</p><p>相对第5字段而言的</p></li><li><p>账号失效日期</p><p>从1970-01-01开始计算的累加日期计算，表示账号在整个日期之后不能使用</p></li><li><p>保留字段</p><p>日后新功能加入使用</p></li></ol><h3 id="用户组设置"><a href="#用户组设置" class="headerlink" title="用户组设置"></a>用户组设置</h3><p>与用户组相关的配置文件在<code>/etc/group</code>和<code>/etc/gshadow</code>中。</p><h4 id="etc-group文件概览"><a href="#etc-group文件概览" class="headerlink" title="/etc/group文件概览"></a><code>/etc/group</code>文件概览</h4><p>每一行代表一个用户组</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106114733243.png" alt="image-20220106114733243"></p><p>一共被<code>:</code>分隔出4个字段</p><ol><li><p>用户组名称</p></li><li><p>用户组密码</p><p>显示<code>x</code>，移动到<code>/etc/gshadow</code>文件中</p></li><li><p>GID</p></li><li><p>此用户组支持的账号名称</p></li></ol><h4 id="etc-gshadow文件概览"><a href="#etc-gshadow文件概览" class="headerlink" title="/etc/gshadow文件概览"></a><code>/etc/gshadow</code>文件概览</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106115855619.png" alt="image-20220106115855619"></p><ol><li>用户组名</li><li>密码列</li><li>用户组管理员的账号</li><li>该用户组的所属账号</li></ol><h4 id="有效与初始用户组"><a href="#有效与初始用户组" class="headerlink" title="有效与初始用户组"></a>有效与初始用户组</h4><ul><li><p>初始用户组(initial group)</p><p><code>/etc/passwd</code>的GID，是用户登录系统就立刻拥有的用户组。</p></li><li><p>有效用户组(effective group)</p><p>当有多个用户组支持这个用户账号时，若用户新建文件，文件的GID对应的用户组，即为有效用户组</p></li><li><p>用户组信息查看groups</p><p>使用<code>groups</code>命令可以查看所以支持这个账号的用户组，且<strong>第一个列出的用户组就是有效用户组</strong></p></li><li><p>有效用户组切换newgrp</p><p>在已经支持本账号的用户组间切换</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">newgrp groupname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><h3 id="新增与删除用户"><a href="#新增与删除用户" class="headerlink" title="新增与删除用户"></a>新增与删除用户</h3><h4 id="新增用户useradd"><a href="#新增用户useradd" class="headerlink" title="新增用户useradd"></a>新增用户useradd</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106162339197.png" alt="image-20220106162339197"></p><ul><li><p>默认的一些参数</p><p>使用<code>useradd -D</code>查看你默认参数，如group、home目录等等。</p><p>这些数据由**<code>/etc/default/useradd</code>**提供</p></li><li><p>UID/GID、密码参数等</p><p>来自<code>/etc/login.defs</code>文件</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106162911549.png" alt="image-20220106162911549"></p></li></ul><h4 id="设置密码passwd"><a href="#设置密码passwd" class="headerlink" title="设置密码passwd"></a>设置密码passwd</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106163028254.png" alt="image-20220106163028254"></p><h4 id="修改密码参数chage"><a href="#修改密码参数chage" class="headerlink" title="修改密码参数chage"></a>修改密码参数chage</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106163238915.png" alt="image-20220106163238915"></p><h4 id="修改账号参数usermod"><a href="#修改账号参数usermod" class="headerlink" title="修改账号参数usermod"></a>修改账号参数usermod</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106163342766.png" alt="image-20220106163342766"></p><h4 id="删除用户userdel"><a href="#删除用户userdel" class="headerlink" title="删除用户userdel"></a>删除用户userdel</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106163515317.png" alt="image-20220106163515317"></p><p>删除用户的相关数据，主要是：</p><ul><li>用户账号/密码：<code>/etc/passwd</code>、<code>/etc/shadow</code></li><li>用户组相关参数：<code>/etc/group</code>、<code>/etc/gshadow</code></li><li>用户个人文件数据：<code>/home/username</code>、<code>/var/spool/mainl/username</code>等等</li></ul><h4 id="批量新建用户模板"><a href="#批量新建用户模板" class="headerlink" title="批量新建用户模板"></a>批量新建用户模板</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 新建账号，功能包括：</span><span class="token comment"># 1. 检查account1.txt文件是否存在，并将该文件内的账号取出</span><span class="token comment"># 2. 新建上述文件的账号</span><span class="token comment"># 3. 将上述账号的密码修改成强制第一次进入需要修改密码的格式</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/bin:/sbin:/usr/bin:/user/sbin<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f account1.txt <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"所需要的账号文件不存在，请新建account1.txt，每行一个账号名称"</span><span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token assign-left variable">usernames</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> account1.txt<span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">username</span> <span class="token keyword">in</span> <span class="token variable">$usernames</span><span class="token keyword">do</span><span class="token function">useradd</span> <span class="token variable">$username</span><span class="token builtin class-name">echo</span> <span class="token variable">$username</span> <span class="token operator">|</span> <span class="token function">passwd</span> --stdin <span class="token variable">$username</span>chage -d <span class="token number">0</span> <span class="token variable">$username</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># account1.txt</span>std01std02std03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户其他功能"><a href="#用户其他功能" class="headerlink" title="用户其他功能"></a>用户其他功能</h3><ul><li><p>查看用户相关信息</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164521828.png" alt="image-20220106164521828"></p></li><li><p>改变用户相关信息</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164553425.png" alt="image-20220106164553425"></p></li><li><p>改变用户的shell</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164613803.png" alt="image-20220106164613803"></p></li><li><p>查看UID/GID</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164651382.png" alt="image-20220106164651382"></p></li></ul><h3 id="新增与删除用户组"><a href="#新增与删除用户组" class="headerlink" title="新增与删除用户组"></a>新增与删除用户组</h3><h4 id="新增用户组groupadd"><a href="#新增用户组groupadd" class="headerlink" title="新增用户组groupadd"></a>新增用户组groupadd</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164753657.png" alt="image-20220106164753657"></p><h4 id="修改用户组参数groupmod"><a href="#修改用户组参数groupmod" class="headerlink" title="修改用户组参数groupmod"></a>修改用户组参数groupmod</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164836364.png" alt="image-20220106164836364"></p><h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106164900521.png" alt="image-20220106164900521"></p><p>删除用户组时，必须确保**<code>/etc/passwd</code>内的账号没有任何人使用该用户组作为初始用户组。**</p><h4 id="管理用户组"><a href="#管理用户组" class="headerlink" title="管理用户组"></a>管理用户组</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106165143996.png" alt="image-20220106165143996"></p><h2 id="ACL权限"><a href="#ACL权限" class="headerlink" title="ACL权限"></a>ACL权限</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    ACL（Access Control List），主要的目的是提供**<code>ogu</code>的<code>rxw</code>之外**的具体权限设置。ACL可以针对单一用户、单一文件/目录来进行<code>rwx</code>权限的设置。</p><p>​    ACL需要文件系统的支持，Centos默认是启动ACL的，若没有启动，可以：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mount</span> -o remount,acl /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    或者前往<code>/etc/fstab</code>文件修改信息如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106165802144.png" alt="image-20220106165802144"></p><h3 id="文件ACL的设置"><a href="#文件ACL的设置" class="headerlink" title="文件ACL的设置"></a>文件ACL的设置</h3><h4 id="设置文件ACL"><a href="#设置文件ACL" class="headerlink" title="设置文件ACL"></a>设置文件ACL</h4><ul><li>使用<code>setfacl</code>命令。</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106165910502.png" alt="image-20220106165910502"></p><ul><li><p>acl参数的格式</p><p><code>u:用户/用户组:权限</code></p><p>若用户字段没有，表示所有者</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">setfacl -m u:username:rwx filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置完后，文件的权限会出现<code>+</code></p><pre class="line-numbers language-none"><code class="language-none">-rwxr-xr--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="查看文件ACL"><a href="#查看文件ACL" class="headerlink" title="查看文件ACL"></a>查看文件ACL</h4><ul><li><p>使用<code>getfacl</code>命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getfacl filename <span class="token comment">#参数与setfacl相同，这里省略了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106170627549.png" alt="image-20220106170627549"></p><p><strong>其中mask是文件的最大范围权限！</strong></p></li></ul><h2 id="用户身份切换"><a href="#用户身份切换" class="headerlink" title="用户身份切换"></a>用户身份切换</h2><p>​    在不同用户身份切换，一般是普通用户和root的切换</p><h3 id="su"><a href="#su" class="headerlink" title="su"></a>su</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106171040573.png" alt="image-20220106171040573"></p><p>​    <strong>切换root的时候，需要输入root的密码</strong></p><ul><li><p>su后不接参数</p><p>表示使用non-login shell的方式登录root，很多原本的变量不会改变，如PATH等。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106171302965.png" alt="image-20220106171302965"></p></li><li><p>su后接<code>-</code></p><p>代表使用login shell的方式登录root，环境完全变为root环境</p></li><li><p>使用<code>exit</code>退出su环境</p></li></ul><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106171606965.png" alt="image-20220106171606965"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106171614502.png" alt="image-20220106171614502"></p><ul><li><p><strong>切换root的时候，不需要root密码，输入自己的密码即可，且仅有/etc/sudoers的用户才能执行sudo命令</strong>。</p></li><li><p>设置sudo权限使用<code>visudo</code>命令。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106172009357.png" alt="image-20220106172009357"></p></li></ul><h2 id="用户信息传递"><a href="#用户信息传递" class="headerlink" title="用户信息传递"></a>用户信息传递</h2><h3 id="查询用户在线信息"><a href="#查询用户在线信息" class="headerlink" title="查询用户在线信息"></a>查询用户在线信息</h3><ul><li><p><code>w</code>/<code>who</code></p><p>查看目前已登录系统的用户</p></li><li><p><code>last</code></p><p>查询近来登陆者信息</p></li><li><p><code>lastlog</code></p><p>读取<code>/var/log/lastlog</code>文件，查询每个账号的最近登录时间</p></li></ul><h3 id="用户对谈"><a href="#用户对谈" class="headerlink" title="用户对谈"></a>用户对谈</h3><ul><li><p>write</p><p>给某个用户写消息</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106172732376.png" alt="image-20220106172732376"></p></li><li><p>mesg</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mesg n <span class="token comment">#拒绝接收消息，但root的消息不可抵挡</span>mesg y <span class="token comment">#接收消息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>wall</p><p>对所有系统用户广播消息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wall messagecontent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="用户邮箱"><a href="#用户邮箱" class="headerlink" title="用户邮箱"></a>用户邮箱</h3><p>​    每个Linux用户都有一个mailbox</p><p>​    mailbox在<code>/var/spool/mail/username</code>文件</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106173200918.png" alt="image-20220106173200918"></p><h1 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h1><h2 id="文件系统与磁盘管理"><a href="#文件系统与磁盘管理" class="headerlink" title="文件系统与磁盘管理"></a>文件系统与磁盘管理</h2><p>​    Linux使用Ext2/Ext3作为文件系统。其中EXT2是Linux最传统的磁盘文件系统。</p><h3 id="文件系统结构"><a href="#文件系统结构" class="headerlink" title="文件系统结构"></a>文件系统结构</h3><h4 id="不同的OS使用不同文件系统"><a href="#不同的OS使用不同文件系统" class="headerlink" title="不同的OS使用不同文件系统"></a>不同的OS使用不同文件系统</h4><p>​    磁盘分区后，需要进行<strong>格式化</strong>。因为每种操作系统所设置的文件属性/权限并不相同，为了存放这些文件所需的数据，因此需要将分区进行格式化，以成为操作系统能够利用的文件系统格式。Windows并不认识Linux的Ext2文件系统。</p><ul><li>Windows 98，使用FAT或FAT16文件系统</li><li>Windows 2000以后，使用NTFS文件系统</li><li>Linux，使用<strong>Linux second extended file system</strong>(Ext2fs)文件系统</li></ul><h4 id="文件系统位置"><a href="#文件系统位置" class="headerlink" title="文件系统位置"></a>文件系统位置</h4><p>​    传统磁盘，一个分区只能被格式化为一个文件系统。</p><p>​    但由于LVM与软磁盘阵列(software raid)，这些技术可以将一个分区格式化为多个文件系统（例如LVM），也能够将多个分区合成一个文件系统（LVM，RAID）。</p><p>​    通常我们可以称呼<strong>一个可被挂载的数据为一个文件系统而不是一个分区</strong>。</p><h4 id="Ext2底层结构"><a href="#Ext2底层结构" class="headerlink" title="Ext2底层结构"></a>Ext2底层结构</h4><ul><li>Super block：记录文件系统的整体信息，包括inode/block的总量、使用量、剩余量，以及文件系统的格式与相关信息等。</li><li>inode：记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码</li><li>block：实际记录文件的内容，若文件太大时，会占用多个block</li></ul><p>文件系统先格式化出inode与block的块。系统文件的<strong>属性与权限</strong>数据放置到inode，而inode记录了文件数据的实际放置点的block号码。此时操作系统就据此排列磁盘的阅读顺序。这种方式称为<strong>索引式文件系统</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227141949090.png" alt="image-20211227141949090"></p><p>​    Ext2文件系统在格式化的时候，区分为多个块组（block group)的，每个块组都有独立的inode/block/superblock系统。<strong>文件系统最前面有一个启动扇区（boot sector)，这个启动扇区可以安装引导装载程序</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227142959039.png" alt="image-20211227142959039"></p><ul><li><p>data block（数据块）</p><p>是用来放置文件内容的地方。在Ext2文件系统中所支持的block大小有1KB，2KB，4KB。在格式化时，block的大小和编号就固定了。不同block大小，对文件系统有些影响：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227143757121.png" alt="image-20211227143757121"></p><p>每个block内最多只能放置一个文件的数据：</p><ul><li>如果文件大于block的大小，则一个文件会占用多个block数量</li><li>若文件小于block，则该block的剩余空间就不能够再被使用了（磁盘空间会浪费）。</li></ul></li><li><p>inodetable(inode表格)</p><p>inode的数量和大小在格式化的时候也被固定，除了用来放文件的属性和权限外，还具有下列特性：</p><ul><li>每个inode大小均固定为128bytes</li><li>每个文件都仅会占用一个inode而已。<strong>所以文件系统能够创建的文件数量与inode的数量有关</strong>。</li></ul><p>inode记录block号码的区域定义为<strong>12个直接记录区、1个间接记录区、1个双间接记录区、1个三间记录区</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227144546633.png" alt="image-20211227144546633"></p></li><li><p>Superblock（超级块）</p><p>记录整个文件系统相关信息的地方：</p><ul><li>block与inode的总量</li><li>未使用与已使用的inode/block数量</li><li>block与inode的大小</li><li>文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘(fsck)的时间等文件系统的相关信息</li><li>一个valid bit数值，若此文件系统已被挂载，则valid bit为0；若未被挂载，则valid bit为1。</li></ul><p><strong>一般来说，superblock的大小为1024bytes</strong>。一个文件一般应该仅有一个superblock。处理第一个block group含有superblock外，后续的block group不一定含有superblock，若含有则该superblock主要是作为第一个block group内的备份，可以进行superblock的救援。</p></li><li><p>File system Description（文件系统描述说明）</p><p>可以描述每个block group的开始与结束的block号码，以及说明每个区段(superblock，bitmap，inodemap, data block)分别介于哪一个block号码之间。</p></li><li><p>block bitmap(块对照表)</p><p>从block bitmap中可以知道哪些block是空的，方便新建文件</p><p>删除文件时，在block bitmap中对应的block号码的标志改为“未使用中”。</p></li><li><p>inode bitmap(inode对照表)</p><p>与block bitmap类似，只不过是记录inode的信息。</p></li></ul><h4 id="U盘底层结构"><a href="#U盘底层结构" class="headerlink" title="U盘底层结构"></a>U盘底层结构</h4><p>​    U盘（闪存），使用文件系统一般为FAT格式。FAT没有inode，它将每个block号码都记录在前一个block当中。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227142603771.png" alt="image-20211227142603771"></p><h4 id="与目录树关系"><a href="#与目录树关系" class="headerlink" title="与目录树关系"></a>与目录树关系</h4><ul><li><p>目录</p><p>ext2分配一个inode和至少一块block。</p><p>block里面记录在整个目录下的文件名与文件名占用的inode号码。</p><p><strong>文件系统最顶层的目录的inode一般为2号</strong>。</p></li><li><p>文件</p><p>ext3分配一个inode和多个block记录文件内容。</p></li></ul><h4 id="与内存的交互"><a href="#与内存的交互" class="headerlink" title="与内存的交互"></a>与内存的交互</h4><p>​    Linux使用异步处理（asynchronously）来解决读写磁盘慢的问题。</p><ul><li>当系统文件到内存后，若文件没有被改动过，则内存区段的文件被设置为clean</li><li>当更改过后，内存中的数据被设置为Dirty。所有的操作都在内存中执行，并没有写入磁盘。系统会不定时将内存中设置为Dirty的数据写会磁盘。也可以使用<code>sync</code>强制写入磁盘。</li></ul><h3 id="文件压缩与打包"><a href="#文件压缩与打包" class="headerlink" title="文件压缩与打包"></a>文件压缩与打包</h3><h4 id="文件解压缩技术"><a href="#文件解压缩技术" class="headerlink" title="文件解压缩技术"></a>文件解压缩技术</h4><ul><li><p>定义</p><p>由于二进制的0和二进制文件一些重复数据可以进行统计记录的原因，文件空间并不是完全被填满的。</p></li><li><p>压缩比</p><p>压缩前与压缩后的文件所占用的磁盘空间大小的比值</p></li><li><p>Linux常见压缩文件后缀</p><p><strong>compress、gizp、bzip都是对单一文件进行压缩</strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229154418756.png" alt="image-20211229154418756"></p></li></ul><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>​    将多个文件后目录包成一个大文件的命令功能。<br>​    <code>tar</code>命令，除了打包外，还支持通过gzip/bzip2进行压缩。</p><h3 id="完整备份和恢复"><a href="#完整备份和恢复" class="headerlink" title="完整备份和恢复"></a>完整备份和恢复</h3><p>​    使用<code>dump</code>命令可以对<strong>整个文件系统备份</strong>，也可以对<strong>单个目录备份</strong>。在多次备份中，后一次备份只备份与前一次备份的<strong>有变化的文件</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229160858256.png" alt="image-20211229160858256"></p><p>​    使用`restore命令可以恢复系统的数据</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><h4 id="新增磁盘步骤"><a href="#新增磁盘步骤" class="headerlink" title="新增磁盘步骤"></a>新增磁盘步骤</h4><ol><li>对磁盘进行分区，以新建可用的分区</li><li>对分区进行格式化，以创建系统可用的文件系统，并进行检验</li><li>在Linux上，需要创建挂载点（目录），并进行挂载</li></ol><h4 id="设置开机挂载"><a href="#设置开机挂载" class="headerlink" title="设置开机挂载"></a>设置开机挂载</h4><p>​    在<code>/etc/fstab</code>里面设置挂载相关信息。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229150611105.png" alt="image-20211229150611105"></p><p>​    其中第4列是一些特殊的文件系统参数(mount参数设置也有见)，如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229151139984.png" alt="image-20211229151139984"></p><p>​    第5列是指示“能否被dump备份命令使用”</p><blockquote><p>0：不做dump备份</p><p>1：每天进行dump操作</p><p>2：不定日期的dump备份操作</p></blockquote><p>​    第6列是“是否以fsck检验扇区”</p><blockquote><p>0：不要检验</p><p>1：最早检验</p></blockquote><h4 id="特殊设备挂载"><a href="#特殊设备挂载" class="headerlink" title="特殊设备挂载"></a>特殊设备挂载</h4><ul><li><p>镜像文件直接挂载</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229151922645.png" alt="image-20211229151922645"></p></li><li><p>创建大文件以制作loop设备文件挂载</p><p>对大文件格式化+挂载</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkfs</span> -t ext3 /home/loopdev<span class="token function">mount</span> -o loop /home/loopdev /media/cdrom/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h4><p>挂载相关配置文件</p><ul><li><p>Linux支持的文件系统的驱动</p><p><code>/lib/modules/$(uname -r)/kernel/fs/</code></p></li><li><p>系统指定的测试（默认）挂载文件系统类型</p><p><code>/etc/filesystems</code></p></li><li><p>系统已经加载的文件系统类型</p><p><code>/proc/filesystems</code></p></li><li><p>挂载信息设置<code>etc/fstab</code>、<code>/etc/mtab</code>和<code>/proc/mounts</code></p></li></ul><h2 id="文件属性与权限"><a href="#文件属性与权限" class="headerlink" title="文件属性与权限"></a>文件属性与权限</h2><p>​    任何一个文件都具有User、Group和Others 三种等级权限。root可以查看所有文件。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223104508097.png" alt="image-20211223104508097"></p><h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><h4 id="属性查看"><a href="#属性查看" class="headerlink" title="属性查看"></a>属性查看</h4><ul><li><p>使用<code>ls -al</code>命令可以查看当前文件下所有的文件详细的属性与权限。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223104925835.png" alt="image-20211223104925835"></p></li><li><p>参数</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223105504819.png" alt="image-20211223105504819"></p><table><thead><tr><th>权限</th><th>连接</th><th>所有者</th><th>用户组</th><th>文件容量</th><th>修改日期</th><th>文件名</th></tr></thead><tbody><tr><td>drwx——</td><td>3</td><td>root</td><td>root</td><td>4096</td><td>Sep 5 10:37</td><td>.gconf</td></tr><tr><td>-rw-r–r–</td><td>1</td><td>root</td><td>root</td><td>42304</td><td>Sep 4 18:26</td><td>install.log</td></tr></tbody></table></li></ul><h4 id="属性解析"><a href="#属性解析" class="headerlink" title="属性解析"></a>属性解析</h4><ul><li><p>第一列，文件类型与权限</p><p>一共10个字符。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223105515659.png" alt="image-20211223105515659"></p><p>第一个字符代表文件是“目录、文件或链接文件等”</p><ul><li><p>[d]是目录</p></li><li><p>[-]是文件</p></li><li><p>[l]表示连接文件（linkfile）</p><p>有两种连接文件的方式：</p><ul><li><p>hard link（硬连接/实际连接）</p><p>在某个目录下新建一条<strong>文件名连接到某inode号码</strong>的关联记录</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227155701119.png" alt="image-20211227155701119"></p><p>有两个限制：不能跨文件系统，不能连接到目录</p></li><li><p>symbolic link（符号连接，即快捷方式）</p><p>创建一个单独的文件，这个文件会让数据的读取指向它连接的那个文件的文件名。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227160109388.png" alt="image-20211227160109388"></p></li></ul></li><li><p>[b]表示可供存储的接口设备</p></li><li><p>[c]表示串行端口设备，如键盘、鼠标等</p></li></ul><p>后面9个字符，3个分为一组”rwx”的组合，r为可读，w为可写，x为可执行。如果没有相应权限，用[-]代替。</p><ul><li>第一组，<strong>文件所有者的权限</strong></li><li>第二组，<strong>用户组的权限</strong></li><li>第三组，<strong>其他人的权限</strong></li></ul><p><strong>特别注意这些权限对于文件和目录的意义</strong>:</p><ul><li><p>对于文件的意义</p><p>特别对于w权限，具有<strong>写入、编辑、新增、修改</strong>文件的内容的权限，但<strong>并不具备删除该文件本身的权限</strong>。</p></li><li><p>对于目录的意义</p><ul><li><p>r权限，表示可以读取目录下的文件名数据</p></li><li><p>w权限，表示具有更改目录结构列表的权限，包括：</p><ul><li>新建新的文件和目录</li><li>删除文件和目录</li><li>重命名文件和目录</li><li>转移该目录内的文件、目录位置</li></ul></li><li><p>x权限，表示用户能否进入该目录成为工作目录</p><p>即cd命令能否进入</p></li></ul></li></ul><p><strong>总而言之</strong>：</p><blockquote><ul><li><p>让用户能进入某目录成为“可工作目录”的基本权限：</p><ol><li>可使用的命令：`cd等切换工作目录命令</li><li>目录所需权限：用户对这个目录至少具有<code>x</code>权限</li><li>额外需求：如果用户想要在这个目录使用<code>ls</code>，则还需要<code>r</code>权限</li></ol></li><li><p>用户在某个目录内读取一个文件的基本权限：</p><ol><li>可使用的命令：<code>cat</code>、<code>more</code>等命令</li><li>目录所需权限：用户对这个至少具有<code>x</code>权限</li><li>文件所需权限：用户对文件至少需要具有<code>r</code>的权限才行</li></ol></li><li><p>让用户可以修改一个文件的基本权限：</p><ol><li>可使用的命令：<code>nano</code>、<code>vim</code>等编辑器</li><li>目录所需权限：用户在该文件所在的目录至少要有x权限</li><li>文件所需权限：用户对该文件至少要有<code>rw</code>权限</li></ol></li><li><p>让一个用户可以创建一个文件的基本权限：</p><p>目录所需权限：用户再该目录要具有<code>wx</code>权限，特别是<code>w</code>权限</p></li><li><p>让用户进入某目录并执行该目录下的命令的基本权限：</p><ol><li>目录所需权限：用户在该目录至少具有<code>x</code>权限</li><li>文件所需权限：用户在该文件至少需要有<code>x</code>权限</li></ol></li></ul></blockquote></li><li><p>第二列，有多少文件名连接到此节点</p><p>每个文件都会将权限与属性记录到文件系统的i-node中。这个属性记录有多少不同的文件名连接到相同的一个i-node号码。</p></li><li><p>第三列，表示文件所有者账号</p></li><li><p>第四列，表示文件的所属用户组</p></li><li><p>第五列，文件容量的大小，默认为<strong>B</strong></p></li><li><p>第六列，这个文件的创建文件日期或最近的修改日期</p><p>​    特别注意一下文件的时间，Linux下面会记录许多的时间参数，其中有三个主要的变动时间。<strong>ls默认显示的是mtime</strong>。</p><ul><li><p>modification time(mtime)</p><p>文件的“内容数据”（不是文件属性或权限）改变时，更新mtime</p></li><li><p>status time(ctime)</p><p>文件的“状态”（权限或属性被修改等）改变时，更新ctime</p></li><li><p>access time(atime)</p><p>当“文件的内容被读取”（如使用cat命令)时，更新atime</p></li></ul></li><li><p>第七列，文件名。</p><p>隐藏文件，文件名有个<code>.</code></p></li></ul><h3 id="改变文件属性与权限"><a href="#改变文件属性与权限" class="headerlink" title="改变文件属性与权限"></a>改变文件属性与权限</h3><h4 id="改变文件所属用户组-chgrp"><a href="#改变文件所属用户组-chgrp" class="headerlink" title="改变文件所属用户组 chgrp"></a>改变文件所属用户组 chgrp</h4><p>​    注意，改变后的组名要在<code>/etc/group</code>文件中才行。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chgrp</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> groupname filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="改变文件所有者-chown"><a href="#改变文件所有者-chown" class="headerlink" title="改变文件所有者 chown"></a>改变文件所有者 chown</h4><p>​    注意，改变后的用户要在<code>/etc/password</code>文件中才行。此外，还可以顺便改变用户组。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> username filenmae<span class="token function">chown</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> username:groupname filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    使用环境，如<code>cp</code>命令，复制文件时，会同时复制执行者的属性与权限，可能需要改变权限。</p><h4 id="改变文件的权限-chmod"><a href="#改变文件的权限-chmod" class="headerlink" title="改变文件的权限 chmod"></a>改变文件的权限 chmod</h4><p>​    用来改变文件的权限，有两种方式：数字、符号。</p><ul><li><p>数字类型</p><p>使用数字来代替<code>rwx</code>。</p><ul><li>r:4</li><li>w:2</li><li>x:1</li><li>-:0</li></ul><p>每组权限<code>rwx</code>的权限数字，是对应的数字相加。如：</p><blockquote><p>owner = rwx = 4 + 2 + 1 = 7</p><p>group = rwx = 4 + 2 + 1 = 7</p><p>others = — = 0 + 0 +0</p></blockquote><p>命令使用方式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> xyz filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>符号类型</p><p>使用u, g, o分别代替user 、group、others三种身份，a代表all，即全部身份。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223112151967.png" alt="image-20211223112151967"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> <span class="token assign-left variable">u</span><span class="token operator">=</span>rwx, <span class="token assign-left variable">go</span><span class="token operator">=</span>rx filename<span class="token function">chmod</span> a+x filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="文件的默认权限"><a href="#文件的默认权限" class="headerlink" title="文件的默认权限"></a>文件的默认权限</h3><p>​    在新建文件或目录时候的权限默认值，由umask指定。</p><p>​    umask是四个数字，如<code>0022</code>，与一般权限有关的后三个数字，分别表示user、group、others需要<strong>在默认权限的基础上拿掉的权限</strong>。比如这里group和others需要去掉<code>w</code>权限。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211224112749847.png" alt="image-20211224112749847"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">umask</span> xxx <span class="token comment">#直接设置ugo需要去掉的权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="默认情况的权限"><a href="#默认情况的权限" class="headerlink" title="默认情况的权限"></a>默认情况的权限</h4><ul><li><p>若用户创建“文件”，<strong>默认没有可执行<code>x</code>权限</strong>，只有<code>rw</code>权限，所有最大为666，即默认权限为：</p><p><code>-rw-rw-rw-</code></p></li><li><p>若用户创建“目录”，默认为777，即</p><p><code>drwxrwxrwx</code></p></li></ul><h4 id="设置umask后的权限"><a href="#设置umask后的权限" class="headerlink" title="设置umask后的权限"></a>设置umask后的权限</h4><p>​    比如若umask为<code>0022</code></p><ul><li><p>新建文件时</p><p><code>-rw-rw-rw-</code> - <code>-----w--w-</code> = <code>-rw-r--r--</code></p></li><li><p>新建目录时</p><p><code>drwxrwxrwx</code> - <code>d----w--w-</code> = <code>drwxr-xr-x</code></p></li></ul><h3 id="文件的隐藏属性"><a href="#文件的隐藏属性" class="headerlink" title="文件的隐藏属性"></a>文件的隐藏属性</h3><h4 id="设置文件的隐藏属性"><a href="#设置文件的隐藏属性" class="headerlink" title="设置文件的隐藏属性"></a>设置文件的隐藏属性</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211224113249637.png" alt="image-20211224113249637"></p><h4 id="显示文件隐藏属性"><a href="#显示文件隐藏属性" class="headerlink" title="显示文件隐藏属性"></a>显示文件隐藏属性</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211224113314101.png" alt="image-20211224113314101"></p><h3 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h3><p>​    在Linux的一些特殊文件的权限里，如<code>/tmp</code>、<code>/usr/bin/passwd</code>等，有<code>s</code>、<code>t</code>等等权限。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211224133849294.png" alt="image-20211224133849294"></p><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>​    <code>s</code>出现在文件所有者的<code>x</code>权限上时，称为Set UID，简称SUID权限。提供的功能：</p><ul><li>SUID权限仅对<strong>二进制</strong>程序有效</li><li>执行者对于该程序具有<code>x</code>的执行权限</li><li>本权限仅在执行该程序过程中有效</li><li>执行者将具有该程序所有者的权限</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211224134144319.png" alt="image-20211224134144319"></p><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>​    <code>s</code>出现在文件用户组的<code>x</code>权限上时，称为Set GID，简称SGID权限。如<code>/usr/bin/locate</code>文件。</p><p>对于<strong>文件</strong>提供的功能：</p><ul><li>SGID对二进制程序有用</li><li>程序执行者对该程序具有<code>x</code>权限</li><li>执行者在执行过程中获得该程序用户组的支持</li></ul><p>对于<strong>目录</strong>提供的功能：</p><ul><li>用户若对于此目录具有<code>rx</code>权限，则该用户能进入目录</li><li>用户对此目录的有效用户组会变成该目录的用户组</li><li>若用户再此目录下具有<code>w</code>权限，则用户创建的新文件的用户组与此目录的用户组相同</li></ul><h4 id="SBIT"><a href="#SBIT" class="headerlink" title="SBIT"></a>SBIT</h4><p>​    Sticky Bit(SBIT)目前只针对目录有效，作用是：</p><blockquote><p>若用户对目录具有<code>wx</code>权限，当用户在该目录下创建文件或目录时，仅有自己与root才有权利删除该文件。</p></blockquote><h4 id="特殊权限的设置"><a href="#特殊权限的设置" class="headerlink" title="特殊权限的设置"></a>特殊权限的设置</h4><p>​    依然使用<code>chmod</code>命令，但需要在之前数字方式的基础上，使用4个数字修改权限，最前面的数字就是代表<code>SUID</code>、<code>SGID</code>、<code>SBIT</code>的权限。</p><ul><li>SUID: 4</li><li>SGID: 2</li><li>SBIT: 1</li></ul><h2 id="Linux目录详解"><a href="#Linux目录详解" class="headerlink" title="Linux目录详解"></a>Linux目录详解</h2><p>​    Filesystem Hierarchy Standard(FHS)标准，规定每个特定的Linux目录下应该要放置什么样子的数据。FHS定义出三层目录：</p><ul><li>/ ，根目录，与开机系统有关</li><li>/usr , Unix software resource，与软件安装有关</li><li>/var，variable，与系统运作过程有关</li></ul><h3 id="四种交互作用形态"><a href="#四种交互作用形态" class="headerlink" title="四种交互作用形态"></a>四种交互作用形态</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223114038459.png" alt="image-20211223114038459"></p><ul><li><p>可分享的</p><p>分享给其他系统挂载使用的目录</p></li><li><p>不可分享的</p><p>仅与自身机器有关，不适合分享给其他主机</p></li><li><p>不变的</p><p>有些数据不经常变动，跟随distribution而不变动。如函数库、文件说明文件等。</p></li><li><p>可变动的</p><p>进程改变的数据，如登录文件等。</p></li></ul><h3 id="常见目录"><a href="#常见目录" class="headerlink" title="常见目录"></a>常见目录</h3><h4 id="根目录-的内容"><a href="#根目录-的内容" class="headerlink" title="根目录(/)的内容"></a>根目录(/)的内容</h4><p>​    FHS建议，根目录所在分区应该越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区。</p><p>​    根目录与开机有关，<strong>开机过程中仅有根目录会被挂载</strong>，其他分区在开机后陆续进行挂载。下面这些目录一定要和根目录放在同一分区下：</p><ul><li>/etc 配置文件</li><li>/bin 重要执行文件</li><li>/dev 需要的设备文件</li><li>/lib 执行文件所需要的函数库与内核所需的模块</li><li>/sbin 重要的系统执行文件</li></ul><p>​    根目录下的常见子目录如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223114837952.png" alt="image-20211223114837952"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223114851313.png" alt="image-20211223114851313"></p><h4 id="usr的内容"><a href="#usr的内容" class="headerlink" title="/usr的内容"></a><code>/usr</code>的内容</h4><p>​    是所有系统默认软件的安装目录。/usr的子目录建议有下列：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223151450942.png" alt="image-20211223151450942"></p><p>​    </p><h4 id="var内容"><a href="#var内容" class="headerlink" title="/var内容"></a><code>/var</code>内容</h4><p>​    在系统运行之后逐渐填满容量的目录，包括缓存、登录文件、软件运行所产生的文件等。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223152046728.png" alt="image-20211223152046728"></p><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul><li>绝对路径：由根目录(/)开始写起的文件名或目录名称</li><li>相对路径：相对当前路径的文件名写法。<code>./xx</code>，<code>../xx</code>，<code>xx/xx</code>等<ul><li><code>.</code>代表当前目录</li><li><code>..</code>代表上一层目录</li></ul></li></ul><h2 id="Linux文件系统命令"><a href="#Linux文件系统命令" class="headerlink" title="Linux文件系统命令"></a>Linux文件系统命令</h2><h3 id="目录相关命令"><a href="#目录相关命令" class="headerlink" title="目录相关命令"></a>目录相关命令</h3><h4 id="切换目录cd"><a href="#切换目录cd" class="headerlink" title="切换目录cd"></a>切换目录cd</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示当前目录pwd"><a href="#显示当前目录pwd" class="headerlink" title="显示当前目录pwd"></a>显示当前目录pwd</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">pwd</span> <span class="token punctuation">[</span>-P<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-P参数显示出当前路径，而非连接路径</p><h4 id="新建目录mkdir"><a href="#新建目录mkdir" class="headerlink" title="新建目录mkdir"></a>新建目录mkdir</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> <span class="token punctuation">[</span>-mp<span class="token punctuation">]</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>-m 777</p><p>配置文件的权限</p></li><li><p>-p filename1/filename2</p><p>递归创建目录</p></li></ul><h4 id="删除一个空的目录rmdir"><a href="#删除一个空的目录rmdir" class="headerlink" title="删除一个空的目录rmdir"></a>删除一个空的目录rmdir</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rmdir</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>递归删除目录</p><h4 id="查看文件与目录ls"><a href="#查看文件与目录ls" class="headerlink" title="查看文件与目录ls"></a>查看文件与目录ls</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223171658704.png" alt="image-20211223171658704"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223171810849.png" alt="image-20211223171810849"></p><p>​    其中<code>ls -l</code>命令有个别名为<code>ll</code>。</p><h4 id="复制cp"><a href="#复制cp" class="headerlink" title="复制cp"></a>复制cp</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223171917441.png" alt="image-20211223171917441"></p><p>​    特别注意，<strong>在默认的条件中，cp的源文件与目的文件的权限是不同的，目的文件的所有者通常会是命令操作者本身</strong>。</p><h4 id="移除rm"><a href="#移除rm" class="headerlink" title="移除rm"></a>移除rm</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223172715286.png" alt="image-20211223172715286"></p><h4 id="移动mv"><a href="#移动mv" class="headerlink" title="移动mv"></a>移动mv</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223172939196.png" alt="image-20211223172939196"></p><h4 id="取路径的文件名basename和目录名称dirname"><a href="#取路径的文件名basename和目录名称dirname" class="headerlink" title="取路径的文件名basename和目录名称dirname"></a>取路径的文件名basename和目录名称dirname</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223173744142.png" alt="image-20211223173744142"></p><h3 id="文件内容相关命令"><a href="#文件内容相关命令" class="headerlink" title="文件内容相关命令"></a>文件内容相关命令</h3><h4 id="从第一开始显示cat"><a href="#从第一开始显示cat" class="headerlink" title="从第一开始显示cat"></a>从第一开始显示cat</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223174226131.png" alt="image-20211223174226131"></p><h4 id="从最后一行开始显示tac"><a href="#从最后一行开始显示tac" class="headerlink" title="从最后一行开始显示tac"></a>从最后一行开始显示tac</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tac</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="带行号输出nl"><a href="#带行号输出nl" class="headerlink" title="带行号输出nl"></a>带行号输出nl</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223174807041.png" alt="image-20211223174807041"></p><h4 id="一页一页显示more"><a href="#一页一页显示more" class="headerlink" title="一页一页显示more"></a>一页一页显示more</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">more</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可用的操作：</p><ul><li>空格键，向下翻一页</li><li>Enter，向下滚动一行</li><li>/字符串，向下查询“字符串”关键字</li><li>:f，立刻显示出文件名以及目前显示的行数</li><li>q，立刻离开more，不再显示该文件内容</li><li>b或[Ctrl]+b，往回翻页</li></ul><h4 id="可以往前翻页显示less"><a href="#可以往前翻页显示less" class="headerlink" title="可以往前翻页显示less"></a>可以往前翻页显示less</h4><p>​    在more的功能基础上，加上往前翻页的功能</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">less</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    可用的操作：</p><ul><li>空格键，往下翻一页</li><li>[PageDown]，往下翻一页</li><li>[PageUp]，往上翻一页</li><li>/字符串，向下查询“字符串”的功能</li><li>?字符串，向上查询“字符串”的功能</li><li>n，重复前一个查询（与/或?有关）</li><li>N，反向重复前一个查询（与/或?有关）</li><li>q，离开less这个程序</li></ul><h4 id="只看头几行head"><a href="#只看头几行head" class="headerlink" title="只看头几行head"></a>只看头几行head</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223180110583.png" alt="image-20211223180110583"></p><h4 id="只看结尾几行tail"><a href="#只看结尾几行tail" class="headerlink" title="只看结尾几行tail"></a>只看结尾几行tail</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223180132401.png" alt="image-20211223180132401"></p><h4 id="二进制方式读取文件od"><a href="#二进制方式读取文件od" class="headerlink" title="二进制方式读取文件od"></a>二进制方式读取文件od</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211223180349752.png" alt="image-20211223180349752"></p><h4 id="修改文件时间或创建新文件touch"><a href="#修改文件时间或创建新文件touch" class="headerlink" title="修改文件时间或创建新文件touch"></a>修改文件时间或创建新文件touch</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211224104756745.png" alt="image-20211224104756745"></p><h4 id="查看文件类型file"><a href="#查看文件类型file" class="headerlink" title="查看文件类型file"></a>查看文件类型file</h4><p>​    获取文件的基本数据的类型，如ASCII文件、data文件、binary文件，或是有没有动态函数库(share library)等信息。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">file</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件压缩打包命令"><a href="#文件压缩打包命令" class="headerlink" title="文件压缩打包命令"></a>文件压缩打包命令</h3><h4 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h4><ul><li><p>compress</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229154657937.png" alt="image-20211229154657937"></p></li><li><p>gzip</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229154921021.png" alt="image-20211229154921021"></p></li><li><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229154947217.png" alt="image-20211229154947217"></p></li></ul><h4 id="打包命令"><a href="#打包命令" class="headerlink" title="打包命令"></a>打包命令</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229160014952.png" alt="image-20211229160014952"></p><p>常用操作：</p><ul><li><p>压缩</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -jcv -f tarfilename.tar.bz2 filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">tar -jtv -f tarfilename.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压缩</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">tar</span> -jxv -f tarfilename.tar.bz2 -C filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="文件-命令的信息查询命令"><a href="#文件-命令的信息查询命令" class="headerlink" title="文件/命令的信息查询命令"></a>文件/命令的信息查询命令</h3><h4 id="脚本文件名查询which"><a href="#脚本文件名查询which" class="headerlink" title="脚本文件名查询which"></a>脚本文件名查询which</h4><p>​    根据PATH环境变量所规范的路径，去查询完整文件名或命令路径。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227121425091.png" alt="image-20211227121425091"></p><h4 id="按文件名查找相关文件whereis-locate-find"><a href="#按文件名查找相关文件whereis-locate-find" class="headerlink" title="按文件名查找相关文件whereis/locate/find"></a>按文件名查找相关文件whereis/locate/find</h4><p>​    这两个命令查询的时候根据<strong>文件数据库</strong>查询，速度会快很多。相对于<code>find</code>命令，是直接去磁盘找。</p><ul><li><p><code>whereis</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227122111403.png" alt="image-20211227122111403"></p></li><li><p><code>locate</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227122434362.png" alt="image-20211227122434362"></p><p>其中<code>keyword</code>指的是可以根据<code>文件部分名称</code>查找相关的文件。</p><ul><li>数据库文件：<code>/var/lib/mlocate/</code></li><li>更新数据库：<ul><li>命令：<code>updatedb</code></li><li>配置文件：<code>/etc/updatedb.conf</code></li></ul></li></ul></li><li><p><code>find</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227123151130.png" alt="image-20211227123151130"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227123201007.png" alt="image-20211227123201007"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227123337769.png" alt="image-20211227123337769"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227123420024.png" alt="image-20211227123420024"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227123511169.png" alt="image-20211227123511169"></p></li></ul><h3 id="Linux磁盘命令"><a href="#Linux磁盘命令" class="headerlink" title="Linux磁盘命令"></a>Linux磁盘命令</h3><h4 id="查询磁盘每个区段信息dumpe2fs"><a href="#查询磁盘每个区段信息dumpe2fs" class="headerlink" title="查询磁盘每个区段信息dumpe2fs"></a>查询磁盘每个区段信息dumpe2fs</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227150331559.png" alt="image-20211227150331559"></p><h4 id="列出文件系统的整体磁盘使用df"><a href="#列出文件系统的整体磁盘使用df" class="headerlink" title="列出文件系统的整体磁盘使用df"></a>列出文件系统的整体磁盘使用df</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227154617262.png" alt="image-20211227154617262"></p><h4 id="评估文件系统的磁盘使用量du"><a href="#评估文件系统的磁盘使用量du" class="headerlink" title="评估文件系统的磁盘使用量du"></a>评估文件系统的磁盘使用量du</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227155016624.png" alt="image-20211227155016624"></p><h4 id="连接文件ln"><a href="#连接文件ln" class="headerlink" title="连接文件ln"></a>连接文件ln</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211227160403922.png" alt="image-20211227160403922"></p><h4 id="磁盘分区fdisk"><a href="#磁盘分区fdisk" class="headerlink" title="磁盘分区fdisk"></a>磁盘分区fdisk</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229140604320.png" alt="image-20211229140604320"></p><p>该命令之后会进入一个交互式环境：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229140841468.png" alt="image-20211229140841468"></p><h4 id="磁盘格式化mkfs-mke2fs"><a href="#磁盘格式化mkfs-mke2fs" class="headerlink" title="磁盘格式化mkfs/mke2fs"></a>磁盘格式化mkfs/mke2fs</h4><ul><li><p>mkfs</p><p>进行格式化，创建文件系统</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229141501494.png" alt="image-20211229141501494"></p></li><li><p>mke2fs</p><p>自定义数据创建文件系统</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229141838478.png" alt="image-20211229141838478"></p></li></ul><h4 id="磁盘检验fsck-badblocks"><a href="#磁盘检验fsck-badblocks" class="headerlink" title="磁盘检验fsck/badblocks"></a>磁盘检验fsck/badblocks</h4><ul><li><p>fsck</p><p>检验文件系统是否出错</p><p>执行fsck时，<strong>被检查的分区务必不可挂载到系统上！</strong></p><p>执行完成后，若系统磁盘有问题会在<strong>挂载点目录</strong>下面创建<code>lost+found</code>目录，存放有问题的数据</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229142400667.png" alt="image-20211229142400667"></p></li><li><p>badblocks</p><p>检查硬盘或软盘扇区有无坏轨</p><p>可以被<code>mke2fs -c 设备文件名</code>命令代替，不常用badblocks。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229143439923.png" alt="image-20211229143439923"></p></li></ul><h4 id="磁盘挂载mount"><a href="#磁盘挂载mount" class="headerlink" title="磁盘挂载mount"></a>磁盘挂载mount</h4><p>​    挂载是将参数写入<code>/etc/mtab</code>和<code>/proc/mounts</code>文件</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229143811728.png" alt="image-20211229143811728"></p><h4 id="磁盘卸载umount"><a href="#磁盘卸载umount" class="headerlink" title="磁盘卸载umount"></a>磁盘卸载umount</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229144827724.png" alt="image-20211229144827724"></p><h4 id="修改设备文件参数mknod"><a href="#修改设备文件参数mknod" class="headerlink" title="修改设备文件参数mknod"></a>修改设备文件参数mknod</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229145806337.png" alt="image-20211229145806337"></p><h4 id="修改磁盘卷标e2label"><a href="#修改磁盘卷标e2label" class="headerlink" title="修改磁盘卷标e2label"></a>修改磁盘卷标e2label</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229150006799.png" alt="image-20211229150006799"></p><h4 id="更改文件系统类型tune2fs"><a href="#更改文件系统类型tune2fs" class="headerlink" title="更改文件系统类型tune2fs"></a>更改文件系统类型tune2fs</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229150104697.png" alt="image-20211229150104697"></p><h4 id="新建镜像文件mkisofs"><a href="#新建镜像文件mkisofs" class="headerlink" title="新建镜像文件mkisofs"></a>新建镜像文件mkisofs</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229161135999.png" alt="image-20211229161135999"></p><h4 id="光盘刻录cdrecord"><a href="#光盘刻录cdrecord" class="headerlink" title="光盘刻录cdrecord"></a>光盘刻录cdrecord</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211229161253678.png" alt="image-20211229161253678"></p><h1 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h1><h2 id="例行性工作"><a href="#例行性工作" class="headerlink" title="例行性工作"></a>例行性工作</h2><ul><li><p>概念</p><p>周期性或定时需要完成的事情</p></li><li><p>Linux的常见例行性工作</p><ul><li><p>进行日志文件的轮替(log rotate)</p></li><li><p>日志文件分析logwatch</p></li><li><p>新建locate数据库</p><p>对文件名数据库<code>/var/lib/mlocate/</code>文件进行更新</p></li><li><p>whatis数据库建立</p><p>与man page相关的查询命令的数据库</p></li><li><p>RPM软件日志文件的新建</p><p>软件变动后，文件名的排序、数据库的建立等等</p></li><li><p>删除临时文件</p><p><code>tmpwatch</code>命令进行周期工作，删除软件运行中产生的临时文件</p></li><li><p>与网路服务有关的分析行为</p></li></ul></li></ul><h3 id="仅执行一次的工作调度"><a href="#仅执行一次的工作调度" class="headerlink" title="仅执行一次的工作调度"></a>仅执行一次的工作调度</h3><h4 id="启动atd服务"><a href="#启动atd服务" class="headerlink" title="启动atd服务"></a>启动atd服务</h4><p>使用单一工作调度，需要开启atd服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/etc/init.d/atd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置单一工作调度at"><a href="#设置单一工作调度at" class="headerlink" title="设置单一工作调度at"></a>设置单一工作调度at</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107094901902.png" alt="image-20220107094901902"></p><ul><li><p>at的工作机理</p><p>将工作以文本文件的方式写入**<code>/var/spool/at/</code>**目录内，该工作便等待atd服务的取用与执行</p></li><li><p>at的限制相关文件</p><p>可以利用<code>/etc/at.allow</code>和<code>/etc/at.deny</code>进行at的使用限制</p><ol><li>先寻找<code>/etc/at.allow</code>文件，写入这个文件的用户才能使用at，不在文件中的用户不可以使用（即使没有写入<code>/etc/at.deny</code>文件，也不可以使用）</li><li>如果<code>/etc/at.allow</code>文件不存在，就寻找<code>/etc/at.deny</code>这个文件，写在<code>/etc/at.deny</code>文件的用户不可以使用at，没有在<code>/etc/at.deny</code>的用户就可以使用at</li><li>如果两个文件都不存在，那么只用root可以使用at命令</li></ol></li><li><p>at的运行</p><ul><li><p>输入<code>at</code>命令后，会进入at shell环境来让用户执行工作命令。所以，在at shell中最好使用绝对路径来执行相关命令。</p></li><li><p>at的执行与终端机无关，所以所有的stdout和stderr都会传送到执行者的mailbox</p></li><li><p>at具有“后台执行”功能</p></li></ul></li></ul><h4 id="查询当前at工作调度"><a href="#查询当前at工作调度" class="headerlink" title="查询当前at工作调度"></a>查询当前at工作调度</h4><p>使用<code>atq</code>命令即可</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">atq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除任务调度atrm"><a href="#删除任务调度atrm" class="headerlink" title="删除任务调度atrm"></a>删除任务调度atrm</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">atrm <span class="token punctuation">[</span>jobnumber<span class="token punctuation">]</span> <span class="token comment"># jobnumber是atq命令查出的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CPU空闲时执行工作batch"><a href="#CPU空闲时执行工作batch" class="headerlink" title="CPU空闲时执行工作batch"></a>CPU空闲时执行工作batch</h4><p>​    当<strong>CPU工作负载</strong>（与当前CPU进行切换的进程数量有关）小于0.8时，才进行任务的执行</p><p>​    <code>batch</code>是利用at来进行命令的执行，命令使用与at相似</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107101119636.png" alt="image-20220107101119636"></p><h3 id="循环执行的工作调度"><a href="#循环执行的工作调度" class="headerlink" title="循环执行的工作调度"></a>循环执行的工作调度</h3><h4 id="启动crond服务"><a href="#启动crond服务" class="headerlink" title="启动crond服务"></a>启动crond服务</h4><p>​    使用<code>crond</code>系统服务来控制的，该服务Linux是默认启动的。</p><p>​    <code>crond</code>服务的最低检测限制是“分钟”，所以服务会<strong>每分钟读取<code>/etc/crontab</code>和<code>/var/spool/cron</code>的数据内容</strong>。</p><p>​    设置完任务后，如果没有被执行，可以重启crond服务。</p><h4 id="设置用户循环工作调度crontab"><a href="#设置用户循环工作调度crontab" class="headerlink" title="设置用户循环工作调度crontab"></a>设置用户循环工作调度crontab</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107101927894.png" alt="image-20220107101927894"></p><ul><li><p>crontab的工作机理</p><p>将工作以文本文件的方式写入**<code>/var/spool/cron/</code>**目录内，该工作便等待crond服务的取用与执行</p><p>与此同时，cron执行的每项工作都被记录到<code>/var/log/cron</code>日志文件中</p></li><li><p>crontab的限制相关文件</p><p>与at类似，这里的文件是<code>/etc/cron.allow</code>、<code>/etc/cron.deny</code>。</p></li><li><p>cron工作的设置格式</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107102546981.png" alt="image-20220107102546981"></p><p>输入<code>crontab -e</code>就会进入<code>vi</code>的编辑界面。每项工作一行，可以分为6个字段：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107102656700.png" alt="image-20220107102656700"></p><p>设置参数的一些辅助字符：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107102743019.png" alt="image-20220107102743019"></p></li><li><p>查询用户目前的crontab内容</p><pre class="line-numbers language-none"><code class="language-none">crontab -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除任务</p><p>删除全部工作使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除部分工作，用<code>crontab -e</code>编辑文件删除</p></li></ul><h4 id="设置系统的循环工作调度"><a href="#设置系统的循环工作调度" class="headerlink" title="设置系统的循环工作调度"></a>设置系统的循环工作调度</h4><p>​    通过编辑<code>/etc/crontab</code>文件，即可设置系统例行性工作调度。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107103439790.png" alt="image-20220107103439790"></p><h3 id="唤醒停机期间的工作任务"><a href="#唤醒停机期间的工作任务" class="headerlink" title="唤醒停机期间的工作任务"></a>唤醒停机期间的工作任务</h3><ul><li><p><code>anacron</code></p><p><code>anacron</code>是以天为单位或开机后立刻仅<code>anacron</code>操作，会去检测停机期间应该进行但没有进行的<code>crontab</code>任务，并将该任务执行一遍，然后<code>anacron</code>就会自动停止。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107103817261.png" alt="image-20220107103817261"></p></li><li><p>运行机理</p><p><code>anacron</code>读取时间记录文件(timestamps)，分析现在的时间与时间记录文件所记载的上次执行<code>anacron</code>的时间，两者比较后若发现有区别，那就是在某些时刻没有进行<code>crontab</code>。此时<code>anacron</code>开始执行未进行的<code>crontab</code>任务。</p></li><li><p>与<code>crontab</code>的关系</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107110721695.png" alt="image-20220107110721695"></p></li><li><p><code>/etc/anacrontab</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107110816360.png" alt="image-20220107110816360"></p></li></ul><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>​    在Linux系统中，<strong>触发任何一个事件时，系统都会将它定义成为一个进程，并且给予这个进程一个ID，即为PID，同时依据触发这个进程的用户与相关属性关系，给予PID一组有效的权限设置</strong>.</p><p>​    执行一个程序或命令，就可以触发事件而得到PID。程序一般是放置在磁盘中，通过用户的执行来触发。触发后会加载到内存中成为一个个体，那就是<strong>进程</strong>。为了操作系统可管理这个进程，进程有执行者的权限属性等参数，并包括进程所需要的脚步用户数据、文件等，最后操作系统再给予一个PID。系统就是通过PID判断进程是否具有权限进行某项工作的。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107111812811.png" alt="image-20220107111812811"></p><p>​    进程衍生出来的其他进程一般也会沿用这个进程的相关权限。</p><h3 id="子进程与父进程"><a href="#子进程与父进程" class="headerlink" title="子进程与父进程"></a>子进程与父进程</h3><p>​    比如在bash下执行其他命令，这些命令有时候也会被触发成为PID，这个即为子进程，原来的bash环境则为父进程。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107112113431.png" alt="image-20220107112113431"></p><ul><li><p>子进程与父进程的关系通过<code>PPID</code>参数判断。<code>ps -l</code>命令输入后：<img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107112314853.png" alt="image-20220107112314853"></p></li><li><p>子进程与父进程的调用</p><p>在Linux中称为<code>fork-and-exec</code>流程。</p><p>父进程以fork的方式产生一个一模一样的子进程，被复制出来的子进程再以exec的方式来执行实际要进程的进程，最终成为一个子进程的存在。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107112954832.png" alt="image-20220107112954832"></p></li></ul><h3 id="后台进程设置"><a href="#后台进程设置" class="headerlink" title="后台进程设置"></a>后台进程设置</h3><h4 id="后台运行进程"><a href="#后台运行进程" class="headerlink" title="后台运行进程"></a>后台运行进程</h4><ul><li><p>丢入bash后台使用<code>&amp;</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">command</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后会给出工作号码和command所触发的PID，如：</p><pre class="line-numbers language-none"><code class="language-none">[1] 8400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>后台的输出信息处理</p><p>使用数据流重定向，将数据流重定向到指定文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">command</span> <span class="token operator">></span> outfilename <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="暂停当前进程并丢到后台"><a href="#暂停当前进程并丢到后台" class="headerlink" title="暂停当前进程并丢到后台"></a>暂停当前进程并丢到后台</h4><p>如正在使用vim编辑文件，临时离开的情况</p><p>在vim的一般模式下，使用<code>[Ctrl]+Z</code>，终端会输出类似下列输出</p><pre class="line-numbers language-none"><code class="language-none">[1]+ Stopped<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[1]表示工作号码，<code>+</code>表示最近一个被丢进后台的工作（相对应，<code>-</code>表示最近第二个被丢进后台的工作），Stopped表示进程工作状态处于暂停（相对应，<code>Running</code>表示进程处于后台运行状态）</p><h4 id="查看后台进程jobs"><a href="#查看后台进程jobs" class="headerlink" title="查看后台进程jobs"></a>查看后台进程jobs</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107133908349.png" alt="image-20220107133908349"></p><h4 id="后台进程拿到前台fg"><a href="#后台进程拿到前台fg" class="headerlink" title="后台进程拿到前台fg"></a>后台进程拿到前台fg</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107134131976.png" alt="image-20220107134131976"></p><p><code>fg</code>后不接参数，默认取的是带有<code>+</code>表示的工作</p><h4 id="后台进程状态变为运行"><a href="#后台进程状态变为运行" class="headerlink" title="后台进程状态变为运行"></a>后台进程状态变为运行</h4><p>​    <code>[Ctrl]+Z</code>是变为后台暂停运行，<code>bg</code>是让后台暂停的进程变为运行状态。使用方法同fg</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">bg</span> %jobnumber<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重启-删除后台进程kill"><a href="#重启-删除后台进程kill" class="headerlink" title="重启/删除后台进程kill"></a>重启/删除后台进程kill</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107134621042.png" alt="image-20220107134621042"></p><p>对于signal，主要了解1、9、15的用法。</p><p>另外，kill后面接的数字<strong>默认是PID</strong>，如果是bash的工作控制，则要使用<code>%jobnumber</code>形式。</p><h4 id="脱机管理"><a href="#脱机管理" class="headerlink" title="脱机管理"></a>脱机管理</h4><p>​    如果是远程ssh登录Linux，单单使用<code>&amp;</code>将进程后台运行，在会话结束时，进程也会关闭。需要使用<code>nohup</code>将进程放入系统后台，而不是bash后台</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107135342163.png" alt="image-20220107135342163"></p><p>注意，<strong>nohup并不支持bash内置命令，所以后面接的命令必须要是外部命令</strong>。</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="进程查看"><a href="#进程查看" class="headerlink" title="进程查看"></a>进程查看</h4><ul><li><p><strong>某一时间点</strong>系统进程查看ps</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107135940956.png" alt="image-20220107135940956"></p></li><li><p>仅查看自己的bash相关进程<code>ps -l</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107140029482.png" alt="image-20220107140029482"></p><ol><li>进程标志和权限说明<ul><li>4表示进程的权限为root</li><li>1表示此子进程仅可fork而无法实际执行(exec)</li></ul></li><li>进程的状态<ul><li>R表示进程正在运行中</li><li>S表示进程正在睡眠，可以被唤醒</li><li>D表示阻塞，通常可能在等待I/O</li><li>T表示停止状态</li><li>Z表示“僵尸”状态，进程已经终止，但却无法被删除至内存外</li></ul></li><li>进程被哪个UID拥有</li><li>进程的PID</li><li>进程的父进程PID（PPID）</li><li>CPU使用率，单位为百分比</li><li>PRI/NI和CPU，表示进程被CPU所执行的优先级。数值越小代表越快被CPU执行</li><li>ADDR/SZ/WCHAN，和内存有关<ul><li>ADDR是kernel function，指出该进程在内存的哪个部分，如果是running进程，会显示<code>-</code></li><li>SZ表示进程用掉多少内存</li><li>WCHAN表示目前进程是否在运行中，如果是running进程，会显示<code>-</code></li></ul></li><li>TTY表示登录者的终端机位置，若为远程登录则使用动态终端接口(pts/n)。</li><li>TIME表示进程实际花费CPU运行的时间</li><li>CMD，表示造成此程序的触发进程的命令为何</li></ol></li><li><p>查看系统所有进程<code>ps aux</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107142511658.png" alt="image-20220107142511658"></p><ol><li>USER，进程属于哪个用户账号</li><li>PID</li><li>%CPU，进程使用的CPU资源百分比</li><li>%MEM，进程所占用的物理内存百分比</li><li>VSZ，进程使用掉的虚拟内存量，单位KB</li><li>RSS，进程占用的固定的内存量，单位KB</li><li>TTY，进程的终端机位置，网络连接显示pts/n，和终端机无关则显示<code>?</code></li><li>STAT，进程状态，</li><li>START，进程被触发启动的时间</li><li>TIME，进程实际使用CPU的时间</li><li>COMMAND，进程的实际命令</li></ol></li><li><p>僵尸进程</p><ul><li><p>原因</p><p>该进程应该已经执行完毕，或是因故应该要终止了，但是该进程的父进程却无法完整将该进程结束，从而进程一直存在内存中</p></li><li><p><code>ps</code>相关命令查询时，在COMMAND后还有<code>&lt;defunct&gt;</code>字样，即表示为僵尸进程</p></li><li><p>处理僵尸进程一般需要杀掉其父进程，或者reboot</p></li></ul></li><li><p><strong>动态</strong>查看进程变化<code>top</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107143601079.png" alt="image-20220107143601079"></p></li><li><p>进程相关性查看<code>pstree</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107143831020.png" alt="image-20220107143831020"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107143841556.png" alt="image-20220107143841556"></p><p>可以看出，<strong>所有进程都是依附在init进程下面。</strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107144454140.png" alt="image-20220107144454140"></p></li></ul><h4 id="进程重启、关闭、删除"><a href="#进程重启、关闭、删除" class="headerlink" title="进程重启、关闭、删除"></a>进程重启、关闭、删除</h4><p>依然使用前面说过的<code>kill</code>命令：<code>kill -signal PID</code></p><p>还可以使用<code>killall -signal command</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107145029150.png" alt="image-20220107145029150"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107145039002.png" alt="image-20220107145039002"></p><p>场景的<code>signal</code>如下：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107144728687.png" alt="image-20220107144728687"></p><h3 id="进程的执行顺序"><a href="#进程的执行顺序" class="headerlink" title="进程的执行顺序"></a>进程的执行顺序</h3><p>​    CPU具体执行哪个进程需要考虑进程的优先执行序(Priority)和CPU调度</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107145552380.png" alt="image-20220107145552380"></p><ul><li><p>进程的PRI和NI</p><p>进程的PRI即为优先级的意思，该值越低，越优先执行。</p><p>但是<strong>PRI由内核动态调整，用户无法直接调整PRI值</strong>，所以通过NI（nice）值来调整。最终的CPU执行优先级为：</p><pre class="line-numbers language-none"><code class="language-none">PRI(final) &#x3D; PRI(kernel) + nice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nice的值可调范围为<code>-20~19</code></p><ul><li>root可以调整其他人的nice值</li><li>一般用户仅可以调整自己的nice，且范围为<code>0~19</code></li><li>一般用户仅可以把nice值增大</li><li><strong>nice值可以在子父进程之前传递</strong></li></ul></li><li><p>设置程序初始nice值</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107150142119.png" alt="image-20220107150142119"></p></li><li><p>调整进程nice值</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107150226734.png" alt="image-20220107150226734"></p></li></ul><h3 id="特殊文件与程序"><a href="#特殊文件与程序" class="headerlink" title="特殊文件与程序"></a>特殊文件与程序</h3><h4 id="具有SUID-SGID权限的命令执行状态"><a href="#具有SUID-SGID权限的命令执行状态" class="headerlink" title="具有SUID/SGID权限的命令执行状态"></a>具有SUID/SGID权限的命令执行状态</h4><p>SUID的权限会生效是由于具有该权限的程序被触发</p><p>比如passwd执行后，就具有root的权限。触发passwd后，会取得一个新的进程与PID，该PID产生时通过SUID来给予该PID特殊的权限设置。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107152830305.png" alt="image-20220107152830305"></p><h4 id="proc-目录的意义"><a href="#proc-目录的意义" class="headerlink" title="/proc/*目录的意义"></a><code>/proc/*</code>目录的意义</h4><p>所有的进程存在内存中，内存中的数据又是写入到<code>/proc/*</code>目录下。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107153425758.png" alt="image-20220107153425758"></p><h4 id="查找正在使用某文件的程序fuser"><a href="#查找正在使用某文件的程序fuser" class="headerlink" title="查找正在使用某文件的程序fuser"></a>查找正在使用某文件的程序fuser</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107153550031.png" alt="image-20220107153550031"></p><h4 id="列出被进程所打开的文件名lsof"><a href="#列出被进程所打开的文件名lsof" class="headerlink" title="列出被进程所打开的文件名lsof"></a>列出被进程所打开的文件名lsof</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107153702734.png" alt="image-20220107153702734"></p><h4 id="找到正在执行的进程的PID"><a href="#找到正在执行的进程的PID" class="headerlink" title="找到正在执行的进程的PID"></a>找到正在执行的进程的PID</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107153753496.png" alt="image-20220107153753496"></p><h2 id="系统资源管理"><a href="#系统资源管理" class="headerlink" title="系统资源管理"></a>系统资源管理</h2><h3 id="查看内存使用情况free"><a href="#查看内存使用情况free" class="headerlink" title="查看内存使用情况free"></a>查看内存使用情况free</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107151350735.png" alt="image-20220107151350735"></p><h3 id="查看内核相关信息uname"><a href="#查看内核相关信息uname" class="headerlink" title="查看内核相关信息uname"></a>查看内核相关信息uname</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107151432730.png"></p><h3 id="查看系统启动时间和负载uptime"><a href="#查看系统启动时间和负载uptime" class="headerlink" title="查看系统启动时间和负载uptime"></a>查看系统启动时间和负载uptime</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107151542516.png" alt="image-20220107151542516"></p><h3 id="跟踪网络netstat"><a href="#跟踪网络netstat" class="headerlink" title="跟踪网络netstat"></a>跟踪网络netstat</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107151704286.png" alt="image-20220107151704286"></p><p>比较常用的有，查看哪些进程启动了网络连接/占用网络端口</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107151859230.png" alt="image-20220107151859230"></p><h3 id="分析内核产生的信息dmesg"><a href="#分析内核产生的信息dmesg" class="headerlink" title="分析内核产生的信息dmesg"></a>分析内核产生的信息dmesg</h3><p>特别是开机检测硬件的一些信息等。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">dmesg</span> <span class="token operator">|</span> <span class="token function">more</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测系统资源变化vmstat"><a href="#检测系统资源变化vmstat" class="headerlink" title="检测系统资源变化vmstat"></a>检测系统资源变化vmstat</h3><p>可以检测CPU/内存/磁盘输入输出状态等</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107152254151.png" alt="image-20220107152254151"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107152308103.png" alt="image-20220107152308103"></p><h2 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>​    Security Enhanced Linux之意，是在进行程序、文件等权限设置依据的一个内核模板。由于网路服务也是程序，刚好也能够控制网络服务能否访问系统资源。</p><p>​    依据进程的所有者与文件资源的<code>rwx</code>权限来决定有无访问文件系统能力的方式，被称为“自主访问控制”（Discretionary Access Control，DAC）。在某些情况会有问题，如root具有最高的权限、用户可以取得进程来更改文件资源的访问权限等</p><p>​    为了避免上述问题发生，SELinux导入强制访问控制（Mandatory Access Control，MAC）的方式。可以<strong>针对特定的进程与特定的文件资源来进行权限的控制。将权限控制的主体，从用户变成 了进程</strong>。</p><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>​    SELinux的目标是：该进程能否读取文件资源</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107160035341.png" alt="image-20220107160035341"></p><ul><li><p>主体</p><p>SELinux主要想管理的就是进程</p></li><li><p>目标</p><p>SELinux想访问的是文件系统</p></li><li><p>策略</p><p>SELinux会依据某些服务来制定基本的访问安全性策略。主要有两个：</p><ul><li>targeted：针对网络服务限制较多，针对本机限制较少。是默认策略</li><li>strict：完整的SELinux限制，限制方面较为严格</li></ul></li><li><p>安全上下文</p><p>主体与目标的安全上下文必须一致才能顺利访问。</p><p>安全上下文有点类似<code>rwx</code>。进程的安全上下文存在内存中，文件的安全上下文放置到文件的inode内。</p><p>进程的安全上下文使用<code>ps -Z</code>查看，文件的安全上下文使用<code>ls -Z</code>查看：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220107160341505.png" alt="image-20220107160341505"></p><p>以<code>:</code>隔开为3个字段</p><ol><li><p>身份标识(user)</p><ul><li>root，标识root的账号身份</li><li>system_u，标识系统程序，通常就是进程</li><li>user_u，标识一般用户账号的身份</li></ul></li><li><p>角色(role)</p><p>表明这个数据是程序、文件资源还是用户</p><ul><li>object_r：代表文件或目录等文件资源</li><li>system_r：进程，一般用户</li></ul></li><li><p>类型(type)</p><p>在文件资源上称为type，在进程上称为domain。</p><p><strong>主体与目标之间是否具有可以读写的权限与进程的domain及文件的type有关</strong>。</p><blockquote><p>如httpd_exec_t的domain，可以访问httpd_sys_content_t这个type的文件</p></blockquote></li></ol></li></ul><h3 id="SELinux启动、关闭和查看"><a href="#SELinux启动、关闭和查看" class="headerlink" title="SELinux启动、关闭和查看"></a>SELinux启动、关闭和查看</h3><h4 id="SELinux查看"><a href="#SELinux查看" class="headerlink" title="SELinux查看"></a>SELinux查看</h4><ul><li><p>查看运行状态</p><p>并不是所有的Linux distribution都支持SELinux。SELinux支持三种（状态）模式：</p><ul><li>enforcing，强制模式，代表SELinux正在运行，且已经正确开始限制domain/type</li><li>permissive，宽容模式，点SELinux正在运行，不过仅会有警告信息并不会实际限制domain/type的访问。**这种模式可以用来作为SELinux的调试</li><li>disabled，关闭状态，SELinux没有运行</li></ul><p>使用<code>getenforce</code>进行SELinux状态查看</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110124621230.png" alt="image-20220110124621230"></p></li><li><p>查看策略等信息</p><p>使用<code>sestatus</code>进行SELinux状态查看。</p><p><strong>SELinux的配置文件是<code>/etc/selinux/config</code></strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110125019761.png" alt="image-20220110125019761"></p><p>效果如图：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110125038013.png" alt="image-20220110125038013"></p></li></ul><h4 id="SELinux启动与关闭"><a href="#SELinux启动与关闭" class="headerlink" title="SELinux启动与关闭"></a>SELinux启动与关闭</h4><ul><li><p>SELinux的运行状态、策略等更改时，需要重新启动SELinux</p></li><li><p>启动SELinux，需要编辑配置文件<code>/etc/selinux/config</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110163820510.png" alt="image-20220110163820510"></p><p>配置完后，在内核文件查询是否已经开启。<strong>如果要开启SELinux，不可以在kernel行出现selinux=0的字样。</strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110164047471.png" alt="image-20220110164047471"></p></li><li><p>SELinux模式在enforcing和permissive之间切换<code>setenforce</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110164317413.png" alt="image-20220110164317413"></p><p>注意，<code>setenforce</code>无法在Disabled模式下面进行切换。</p></li></ul><h3 id="安全上下文的设置和查看"><a href="#安全上下文的设置和查看" class="headerlink" title="安全上下文的设置和查看"></a>安全上下文的设置和查看</h3><p>安全上下文的配置文件目录是<code>/etc/selinux/targeted/</code></p><h4 id="安全上下文的查看"><a href="#安全上下文的查看" class="headerlink" title="安全上下文的查看"></a>安全上下文的查看</h4><ul><li><p>进程的安全上下文使用<code>ps -Z</code>查看</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110165137536.png" alt="image-20220110165137536"></p></li><li><p>文件的安全上下文使用<code>ls -Z</code>查看</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110165153206.png" alt="image-20220110165153206"></p></li></ul><p>httpd这个进程拥有的httpd_t这个domain去读取index.html文件时，就会看是否和文件的type匹配。</p><h4 id="修改文件的安全上下文chcon"><a href="#修改文件的安全上下文chcon" class="headerlink" title="修改文件的安全上下文chcon"></a>修改文件的安全上下文<code>chcon</code></h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110165330344.png" alt="image-20220110165330344"></p><h4 id="文件的默认安全上下文的查询与修改semanage"><a href="#文件的默认安全上下文的查询与修改semanage" class="headerlink" title="文件的默认安全上下文的查询与修改semanage"></a>文件的默认安全上下文的查询与修改<code>semanage</code></h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110172110502.png" alt="image-20220110172110502"></p><h4 id="文件的安全上下文恢复默认值restorecon"><a href="#文件的安全上下文恢复默认值restorecon" class="headerlink" title="文件的安全上下文恢复默认值restorecon"></a>文件的安全上下文恢复默认值<code>restorecon</code></h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110165413096.png" alt="image-20220110165413096"></p><h3 id="SELinux的策略与规则管理"><a href="#SELinux的策略与规则管理" class="headerlink" title="SELinux的策略与规则管理"></a>SELinux的策略与规则管理</h3><p>策略相关的配置文件目录是<code>/etc/selinux/targeted/</code></p><h4 id="策略详细信息查询seinfo"><a href="#策略详细信息查询seinfo" class="headerlink" title="策略详细信息查询seinfo"></a>策略详细信息查询seinfo</h4><p>策略的信息包括：<strong>所有类型</strong>、<strong>所有角色</strong>、<strong>所有身份标识</strong>、<strong>所有规则（布尔值）</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110170352796.png" alt="image-20220110170352796"></p><h4 id="详细规则（布尔值）查询sesearch"><a href="#详细规则（布尔值）查询sesearch" class="headerlink" title="详细规则（布尔值）查询sesearch"></a>详细规则（布尔值）查询sesearch</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110171422652.png" alt="image-20220110171422652"></p><h4 id="布尔值状态查询getsebool"><a href="#布尔值状态查询getsebool" class="headerlink" title="布尔值状态查询getsebool"></a>布尔值状态查询getsebool</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110171749959.png" alt="image-20220110171749959"></p><h4 id="布尔值关闭或开启setsebool"><a href="#布尔值关闭或开启setsebool" class="headerlink" title="布尔值关闭或开启setsebool"></a>布尔值关闭或开启setsebool</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110171825521.png" alt="image-20220110171825521"></p><h3 id="SELinux的输出信息"><a href="#SELinux的输出信息" class="headerlink" title="SELinux的输出信息"></a>SELinux的输出信息</h3><p>SELinux在发生错误时，有几个服务会记录这些信息</p><ul><li><p><code>setroubleshoot</code>，将错误信息写入<code>/var/log/messages</code></p><p>设置服务开启：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110165755103.png" alt="image-20220110165755103"></p><p>发生错误时，可以查看：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> /var/log/messages <span class="token operator">|</span> <span class="token function">grep</span> setroubleshoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>audit</code>，将详细数据写入<code>/var/log/audit/audit.log</code></p><p>与<code>setroubleshoot</code>不同的是，<code>auditd</code>会将所有信息记录下来，不仅仅是错误信息。</p><p>设置服务开启：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110170059951.png" alt="image-20220110170059951"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110170108678.png" alt="image-20220110170108678"></p><p>可以使用<code>audit2why</code>进行文件数据分析</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110170211945.png" alt="image-20220110170211945"></p></li></ul><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>​    常驻在内存当中的进程都负责一些系统所提供的功能以服务用户各项任务，因此这些常驻进程就会被称为服务(service)。执行service的程序或进程称之为<strong>daemon</strong>。</p><h4 id="服务的分类"><a href="#服务的分类" class="headerlink" title="服务的分类"></a>服务的分类</h4><p><strong>按照daemon启动与管理的方式分：</strong></p><ul><li><p>stand_alone，可自行单独启动服务</p><p>自行启动，不必通过其他机制的管理</p><p>值存在内存中，响应速度较快</p></li><li><p>super_daemon，通过这个特殊的daemon统一管理其他服务</p><p>当没有客户端的请求时，各项服务都未启动，等到有请求时，super daemon才唤醒相对应的服务。当请求结束后，服务也会关闭并释放系统资源。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110173218216.png" alt="image-20220110173218216"></p><p>有两种具体的工作状态：</p><ul><li><p>多线程</p><p>super deamon同时负责多个进程</p></li><li><p>单线程</p><p>super deamon一个一个处理请求</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110173450041.png" alt="image-20220110173450041"></p></li></ul><p>​    </p><p><strong>按照daemon工作状态的方式分：</strong></p><ul><li><p>signal-control</p><p>通过信号来管理，有请求进来会立即启动去处理</p></li><li><p>interval-control</p><p>每个一段时间主动执行某项工作。</p></li></ul><h4 id="daemon的命令规则"><a href="#daemon的命令规则" class="headerlink" title="daemon的命令规则"></a>daemon的命令规则</h4><p>服务名称后，通常会加一个<code>d</code>，{xxx}d。</p><h3 id="服务的端口号"><a href="#服务的端口号" class="headerlink" title="服务的端口号"></a>服务的端口号</h3><p>在配置文件**/etc/services**中，写了服务与端口号的对应关系。格式为：</p><p><code>&lt;daemon name&gt; &lt;port/数据包协议&gt; &lt;服务的说明&gt;</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110173927162.png" alt="image-20220110173927162"></p><h3 id="服务的启动"><a href="#服务的启动" class="headerlink" title="服务的启动"></a>服务的启动</h3><h4 id="服务的脚本文件"><a href="#服务的脚本文件" class="headerlink" title="服务的脚本文件"></a>服务的脚本文件</h4><p>Linux distribution提供了服务的shell script文件来就进行启动和配置。</p><ul><li><code>/etc/init.d/*</code>，启动脚本放置处</li><li><code>/etc/sysconfig/*</code>，服务的初始化环境配置文件</li><li><code>/etc/xinetd.conf, /etc/xinetd.d/*</code>，super daemon配置文件</li><li><code>/etc/*</code>，各服务的配置文件</li><li><code>/var/lib/*</code>，各服务产生的数据库</li><li><code>/var/run/*</code>，各服务的程序PID记录处</li></ul><h4 id="Stand-alnoe的-etc-init-d-的启动"><a href="#Stand-alnoe的-etc-init-d-的启动" class="headerlink" title="Stand_alnoe的/etc/init.d/*的启动"></a>Stand_alnoe的/etc/init.d/*的启动</h4><ul><li><p><code>/etc/init.d/*</code>下文件名直接启动</p></li><li><p><code>service</code>命令启动</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110174804482.png" alt="image-20220110174804482"></p><p>service分析daemon后的参数，再去<code>/etc/init.d/*</code>取正确的服务来执行</p></li></ul><h4 id="由Super-daemon管理的启动"><a href="#由Super-daemon管理的启动" class="headerlink" title="由Super_daemon管理的启动"></a>由Super_daemon管理的启动</h4><p>​    <strong>super_daemon是由<code>xinetd</code>这个进程实现的</strong>，它管理的服务的配置文件在<code>/etc/xinetd.d/*</code>下面，通过编辑服务文件的<code>disable</code>字段来启动。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">disable</span><span class="token operator">=</span>yes <span class="token comment">#关闭服务</span><span class="token assign-left variable">disable</span><span class="token operator">=</span>no  <span class="token comment">#开启服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    **xinetd管理的服务，有个默认的配置文件<code>xinetd.conf</code>**。当启动的服务，没有设置配置文件里面的值时，则该配置文件的值就作为默认值。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110175640107.png" alt="image-20220110175640107"></p><h4 id="设置开启立即启动服务"><a href="#设置开启立即启动服务" class="headerlink" title="设置开启立即启动服务"></a>设置开启立即启动服务</h4><ul><li><p>管理系统服务默认开启开启启动chkconfig</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110181651492.png" alt="image-20220110181651492"></p></li><li><p>图形界面管理模式ntsysv</p><p>Red Hat系统独有，通过图像界面管理服务</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110181743827.png" alt="image-20220110181743827"></p></li></ul><h4 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h4><p>定义好shell script文件后，放入<code>/etc/init.d/</code>下面。文件有些格式要求：</p><p><code>chkconfig:[runlevels][启动顺序][停止顺序]</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110182231354.png" alt="image-20220110182231354"></p><p>然后还是使用<code>chkconfig</code>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110181931860.png" alt="image-20220110181931860"></p><h3 id="服务的查看"><a href="#服务的查看" class="headerlink" title="服务的查看"></a>服务的查看</h3><p>​    前面在<code>Linux进程-系统资源管理-跟踪网络netstat</code>已经介绍过。查看端口即可查看相关服务。</p><h3 id="服务的防火墙管理"><a href="#服务的防火墙管理" class="headerlink" title="服务的防火墙管理"></a>服务的防火墙管理</h3><p>​    防火墙，是针对源IP或域进行允许或拒绝的设置，以决定该连接是否能够成功实现连接的一种方式。</p><p>​    <strong>任何以xinetd管理的服务都可以通过<code>/etc/hosts.allow和/etc/hosts.deny</code>来设置防火墙</strong>。通过TCP数据包分析出IP和Port（TCP Wrappers）并搭配这两个文件，就能决定连接是否可以进入主机。<strong>服务必须支持TCP Wrappers的功能，才能受这两个配置文件的限制</strong>。</p><ul><li><p>查询程序是否支持TCP Wrappers</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ldd $ <span class="token punctuation">(</span>which service1 service2 <span class="token punctuation">..</span>.<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若有<code>libwrap.so</code>这个函数库文件，即支持TCP Wrappers.</p></li><li><p>配置文件语法</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110180554365.png" alt="image-20220110180554365"></p></li><li><p>hosts.allow的优先级高于host.deny</p></li><li><p>配置文件第一和第二字段的特殊符号：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220110180741836.png" alt="image-20220110180741836"></p></li><li><p>可以配合TCP Wrappers软件，配置文件做更复杂的操作</p></li></ul><h1 id="Linux应用程序"><a href="#Linux应用程序" class="headerlink" title="Linux应用程序"></a>Linux应用程序</h1><ul><li><p>源码</p><p>Linux的软件几乎都是经过GPL的授权，所以每个软件几乎均提供源代码。</p><p>由于有些源码文件较大，所以一般软件的源码都是打包和压缩为Tarball文件，扩展名一般为<code>*.tar.gzip</code>或<code>*.tar.bz2</code>。里面的文件通常包含：</p><ul><li>源代码文件</li><li>检测程序文件，可能为configure或config等文件名</li><li>本软件的建议说明与安装说明，INSTALL或README</li></ul></li><li><p>Linux的软件</p><p>软件的命名也有一定的规范：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111152129217.png" alt="image-20220111152129217"></p><p>软件的安装和升级主要有两种模式：</p><ul><li>Red Hat系统（含Fedora/CentOs系列）开发的RPM软件管理机制与yum在线更新模式</li><li>Debian使用的dpkg软件管理机制与APT在线更新模式等</li></ul></li></ul><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><p>全名是RedHat Package Manager，有如下<strong>优点</strong>：</p><ul><li>RPM内含已经编译过的程序与设置文件等数据，可以让用户免除重新编译的困扰</li><li>RPM在被安装之前，会先检查系统的硬盘容量、操作系统版本等，可避免文件被错误安装</li><li>RPM文件本身提供软件版本信息、依赖属性软件名称、软件用途说明、软件所含文件等信息，便于了解软件</li><li>RPM管理的方式使用<strong>数据库记录PRM文件的相关参数</strong>，便于升级、删除、查询与验证。</li></ul><h3 id="软件默认安装路径"><a href="#软件默认安装路径" class="headerlink" title="软件默认安装路径"></a>软件默认安装路径</h3><ul><li><p>安装软件完毕后，软件相关信息被写入<code>/var/lib/rpm/</code>目录下的数据库文件中</p></li><li><p>软件内的文件的位置：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111152654789.png" alt="image-20220111152654789"></p><p>一般情况：如果是应用软件：<code>/usr/local</code>；如果是系统相关：<code>/usr/sbin</code>,<code>/usr/bin</code>等。具体可以使用<code>rpm -ql softwarename</code>查看。</p></li></ul><h3 id="RPM安装软件"><a href="#RPM安装软件" class="headerlink" title="RPM安装软件"></a>RPM安装软件</h3><p>安装软件必须先取得<strong>root权限</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111152831791.png" alt="image-20220111152831791"></p><p>其他的参数：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111152942318.png" alt="image-20220111152942318"></p><h3 id="RPM升级与更新"><a href="#RPM升级与更新" class="headerlink" title="RPM升级与更新"></a>RPM升级与更新</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111153209580.png" alt="image-20220111153209580"></p><p><strong>不过一般是使用yum来进行软件的升级更新</strong>。</p><h3 id="RPM软件查询"><a href="#RPM软件查询" class="headerlink" title="RPM软件查询"></a>RPM软件查询</h3><p>查询使用RPM安装的软件的信息。</p><p>本质是去查询<code>/var/lib/rpm/</code>目录下的数据库文件。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111153252618.png" alt="image-20220111153252618"></p><h3 id="RPM卸载软件与重建数据库"><a href="#RPM卸载软件与重建数据库" class="headerlink" title="RPM卸载软件与重建数据库"></a>RPM卸载软件与重建数据库</h3><p>卸载的时候，很容易发送软件依赖属性导致无法删除的情况。所以删除的时候一定要从<strong>最上往下删除</strong>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> -e softwarename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在RPM安装、删除、升级等过程中，可能会破坏<code>/var/lib/rpm/</code>目录下的数据库文件。可以进行数据库重建：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> --rebuilddb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h2><p>​    yum是通过分析RPM的标题数据后，根据各软件的相关性制作出属性依赖时的解决方案，然后可以自动处理软件的依赖属性问题，以解决软件安装或删除与升级问题。</p><h3 id="yum的查询软件"><a href="#yum的查询软件" class="headerlink" title="yum的查询软件"></a>yum的查询软件</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111154027037.png" alt="image-20220111154027037"></p><h3 id="yum安装和升级软件"><a href="#yum安装和升级软件" class="headerlink" title="yum安装和升级软件"></a>yum安装和升级软件</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220111154109937.png" alt="image-20220111154109937"></p><h3 id="yum删除软件"><a href="#yum删除软件" class="headerlink" title="yum删除软件"></a>yum删除软件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum remove softwarename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="yum的配置文件"><a href="#yum的配置文件" class="headerlink" title="yum的配置文件"></a>yum的配置文件</h3><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="程序编辑器"><a href="#程序编辑器" class="headerlink" title="程序编辑器"></a>程序编辑器</h2><h3 id="Vi"><a href="#Vi" class="headerlink" title="Vi"></a>Vi</h3><p>​    所以UNIX Like系统都会内置<code>Vi</code>文本编辑器，很多软件等编辑接口也都会主动调用<code>vi</code>。</p><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>​    分为一般模式、编辑模式与命令模式三种。</p><ul><li><p>一般模式</p><p>以<code>vi</code>命令打开一个文件就直接进入一般模式了。</p><p>可以进行删除、复制、粘贴等操作（<strong>但不会改变文件内容</strong>）</p></li><li><p>编辑模式</p><p>在一般模式，按下<code>i, I, o, O, a, A, r, R</code>按键进入，可以编辑文件内容。</p></li><li><p>命令行模式</p><p>在一般模式，输入<code>:</code>、<code>/</code>、<code>?</code>，光标移动到最下面一行，输入相关参数可以进行查找数据等操作。</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103111542246.png" alt="image-20220103111542246"></p><h4 id="按键说明"><a href="#按键说明" class="headerlink" title="按键说明"></a>按键说明</h4><ul><li>移动光标</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103111659552.png" alt="image-20220103111659552"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103112214806.png" alt="image-20220103112214806"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103111753039.png" alt="image-20220103111753039"></p><ul><li><p>一般模式切换编辑模式</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103112427307.png" alt="image-20220103112427307"></p></li><li><p>一般模式切换到命令行模式</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103112503104.png" alt="image-20220103112503104"></p></li></ul><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><p>​    <code>Vim</code>是<code>Vi</code>的高级版本，<code>Vim</code>可以使用颜色或底线等方式来显示一些特殊的信息，还支持正则表达式的查找架构、多文件编辑、块复制等。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103113750337.png" alt="image-20220103113750337"></p><h4 id="块选择"><a href="#块选择" class="headerlink" title="块选择"></a>块选择</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103113153738.png" alt="image-20220103113153738"></p><ol><li>使用<code>vim</code>打开文件</li><li>使用按键移动光标到预选块左上角</li><li>按下<code>[Ctrl] + V</code>后将光标移动到预选块右下角</li><li>按下<code>y</code>进行复制</li><li>按下<code>p</code>进行粘贴</li></ol><h4 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103113454143.png"></p><h4 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103113619794.png" alt="image-20220103113619794"></p><h2 id="Shell概念"><a href="#Shell概念" class="headerlink" title="Shell概念"></a>Shell概念</h2><h3 id="硬件、内核与Shell"><a href="#硬件、内核与Shell" class="headerlink" title="硬件、内核与Shell"></a>硬件、内核与Shell</h3><p>​    我们必须通过<code>shell</code>将我们输入到命令与内核通信，好让内核可以控制硬件来正确无误的工作。</p><p>​    <code>Shell</code>的功能只是提供用户操作系统的一个接口，因此<code>Shell</code>需要可以调用其他软件。即<strong>只要能操作应用程序等接口都能称为<code>shell</code></strong>.</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103114029649.png" alt="image-20220103114029649"></p><h3 id="Linux的Shell"><a href="#Linux的Shell" class="headerlink" title="Linux的Shell"></a>Linux的Shell</h3><p>​    在<code>/etc/shells</code>文件中定义了可用的<code>shell</code>。</p><ul><li><code>/bin/sh</code>，<strong>已经被<code>/bin/bash</code>所代替</strong></li><li><code>/bin/bash</code>，Linux的模式shell，基于GNU架构</li><li><code>/bin/ksh</code>，Kornshell由AT&amp;T Bell lab.发展出来，兼容bash</li><li><code>/bin/tcsh</code>，整合C Sehll，提供更多功能</li><li><code>/bin/csh</code>，已经被/bin/tcsh`所替代</li><li><code>/bin/zsh</code>，基于ksh发展出来，功能更强大的shell</li></ul><p><code>bash</code>内置了很多命令，可以利用<code>type</code>判断是否是内置命令。</p><h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><p>​    程序、变量与不同用户的关系：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103163456519.png" alt="image-20220103163456519"></p><p><strong>注意，后面命令别名、自定义的变量，如果没有进行保存操作（Bash Shell小节会说），在注销bash后会失效</strong>。</p><h3 id="变量的显示与设置"><a href="#变量的显示与设置" class="headerlink" title="变量的显示与设置"></a>变量的显示与设置</h3><ul><li><p>显示</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;var&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">var</span><span class="token operator">=</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li><p>等号两边不能接空格</p></li><li><p>变量内容有空格，可以使用双引号或单引号</p></li><li><p><strong>若变量需要在其他子进程执行，需要使用<code>export</code>命令</strong></p><p>子进程仅会继承父进程的环境变量，子进程不会继承父进程的自定义变量</p><p><code>export</code>即是将自定义变量转换为环境变量</p></li><li><p>通常大小自负为系统默认变量，自行设置变量可以使用小写字符</p></li><li><p>设置数字变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>content<span class="token comment">#数组名字为var，下标为index，内容为content</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>取消设置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">unset</span> varname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="evn命令查看环境变量"><a href="#evn命令查看环境变量" class="headerlink" title="evn命令查看环境变量"></a><code>evn</code>命令查看环境变量</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105133804168.png" alt="image-20220105133804168"></p><h4 id="set命令查看所有变量"><a href="#set命令查看所有变量" class="headerlink" title="set命令查看所有变量"></a><code>set</code>命令查看所有变量</h4><p>​    含环境变量与自定义变量</p><p>​    <code>export</code>即是将自定义变量转换为环境变量</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105133904835.png" alt="image-20220105133904835"></p><h3 id="变量相关操作命令"><a href="#变量相关操作命令" class="headerlink" title="变量相关操作命令"></a>变量相关操作命令</h3><h4 id="语系变量locale"><a href="#语系变量locale" class="headerlink" title="语系变量locale"></a>语系变量locale</h4><ul><li><p>查看系统支持的所有语系</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">locale -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看语系相关设置编码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">locale<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103170213177.png" alt="image-20220103170213177"></p></li></ul><h4 id="读取键盘输入的变量read"><a href="#读取键盘输入的变量read" class="headerlink" title="读取键盘输入的变量read"></a>读取键盘输入的变量read</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103170543499.png" alt="image-20220103170543499"></p><h4 id="声明变量类型declare"><a href="#声明变量类型declare" class="headerlink" title="声明变量类型declare"></a>声明变量类型declare</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103171756248.png" alt="image-20220103171756248"></p><p>设置字符串时，默认变量类型为<strong>字符串</strong>。</p><h4 id="变量的删除、替换"><a href="#变量的删除、替换" class="headerlink" title="变量的删除、替换"></a>变量的删除、替换</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103172941732.png" alt="image-20220103172941732"></p><h4 id="变量的测试与内容替换"><a href="#变量的测试与内容替换" class="headerlink" title="变量的测试与内容替换"></a>变量的测试与内容替换</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103173042243.png" alt="image-20220103173042243"></p><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><ul><li><p>设置别名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">newName</span><span class="token operator">=</span>originName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看别名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">alias</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除别名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">unalias</span> aliasName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="Bash环境和操作"><a href="#Bash环境和操作" class="headerlink" title="Bash环境和操作"></a>Bash环境和操作</h2><h3 id="路径与命令查找顺序"><a href="#路径与命令查找顺序" class="headerlink" title="路径与命令查找顺序"></a>路径与命令查找顺序</h3><p>​    当同一个命令名对应不同文件时，查找顺序如下：</p><ol><li>以相对/绝对路径执行命令</li><li>由alias找到该命令执行</li><li>由bash内置的命令来执行</li><li>通过PATH环境变量的路径找到的一个命令来执行</li></ol><h3 id="登录和欢迎信息"><a href="#登录和欢迎信息" class="headerlink" title="登录和欢迎信息"></a>登录和欢迎信息</h3><ul><li><p>登录提示信息文件</p><ul><li><p><code>/etc/issue</code>放置本地登录信息</p><p>这个文件可以使用反斜杠作为变量调用。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105135332090.png" alt="image-20220105135332090"></p></li><li><p><code>/etc/issue.net</code>放置远程登录信息</p></li></ul></li><li><p>欢迎信息</p><p>登录完成后，告诉登录者的信息。在<code>/etc/motd</code>文件放置。</p></li></ul><h3 id="环境配置文件"><a href="#环境配置文件" class="headerlink" title="环境配置文件"></a>环境配置文件</h3><p>bash Shell有两种登录方式</p><ul><li><p>login shell</p><p>取得bash时需要完整的登录流程的，即为login shell。</p><p>这种方式登录时会读取<code>/etc/profile</code>和<code>~/.bash_profile或~/bash_login或~/.profile</code>。前者为系统整体设置，后者为用户个人设置。</p></li><li><p>non-login shell</p><p>取得bash接口的方法不需要重复登录时，如在图形界面登录后启动终端机，此时终端机的环境即为non-login shell。bash下产生的bash子进程也是这个情况</p></li></ul><h4 id="login-Shell"><a href="#login-Shell" class="headerlink" title="login Shell"></a>login Shell</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105141733209.png" alt="image-20220105141733209"></p><h5 id="系统配置文件"><a href="#系统配置文件" class="headerlink" title="系统配置文件"></a>系统配置文件</h5><p>​    <code>/etc/profile</code>每个用户登录后取得bash时一定要读取的文件。下面是这个文件中主要的几个变量：</p><ul><li>PATH：会依据UID决定PATH变量要不要含有sbin的系统命令目录</li><li>MAIL：依据账号设置好用户的mailbox到<code>/var/spool/mail/账号名</code></li><li>USER：根据用户的账号设置此变量内容</li><li>HOSTNAME：依据主机的hostname命令决定此变量内容</li><li>HISTSIZE：历史命令记录条数</li></ul><p>此外，文件中还会调用其他的配置文件。</p><h5 id="个人配置文件"><a href="#个人配置文件" class="headerlink" title="个人配置文件"></a>个人配置文件</h5><p>​    在读取<code>/etc/profile</code>后会继续读取个人配置文件。3个个人配置文件<strong>只会读取其中一个</strong>，读取顺序是：</p><ol><li><code>~/.bash_profile</code></li><li><code>~/.bash_login</code></li><li><code>~/.profile</code></li></ol><p>其中<code>~/.bash_profile</code>中主要逻辑是判断<code>~/.bashrc</code>文件是否存在，存在就读取。</p><h4 id="non-login-Shell"><a href="#non-login-Shell" class="headerlink" title="non-login Shell"></a>non-login Shell</h4><p>​    该方式登录bash仅会读取<code>~/.bashrc</code>而已。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105143606285.png" alt="image-20220105143606285"></p><h4 id="读取环境配置文件"><a href="#读取环境配置文件" class="headerlink" title="读取环境配置文件"></a>读取环境配置文件</h4><p>​    修改上述配置文件后，通常需要注销和重新登录后生效。但是使用<code>source</code>命令可以直接生效而不用重启.</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">source filename. filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="通配符和特殊符号"><a href="#通配符和特殊符号" class="headerlink" title="通配符和特殊符号"></a>通配符和特殊符号</h3><ul><li><p>通配符</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105144730322.png" alt="image-20220105144730322"></p></li><li><p>特殊符号</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105144744963.png" alt="image-20220105144744963"></p></li></ul><h3 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h3><h4 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h4><p>​    命令执行的时候需要输入，执行完后需要将数据输出。具体从哪输入和输出到哪则可以进行设置。</p><ul><li>标准输入（standard input, stdin)：代码为0，使用&lt;或&lt;&lt;</li><li>标准输出（standard output, stdout)：代码为1，使用&gt;或&gt;&gt;</li><li>标准错误输出（standard error output，stderr)：代码为2，使用2&gt;或2&gt;&gt;</li></ul><h4 id="数据流输出"><a href="#数据流输出" class="headerlink" title="数据流输出"></a>数据流输出</h4><ul><li><p>不同符号的意义</p><ul><li>1&gt;：以覆盖的方法将正确的数据输出到指定的文件或设备上</li><li>1&gt;&gt;：以累计的方法将正确的数据输出到指定的文件或设备上</li><li>2&gt;：以覆盖的方法将错误的数据输出到指定的文件或设备上</li><li>2&gt;&gt;：以累计的方法将错误的数据输出到指定的文件或设备上</li></ul></li><li><p>常见用法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">command</span> <span class="token operator">></span> filename1 <span class="token operator"><span class="token file-descriptor important">2</span>></span> filename2 <span class="token comment"># 正确和错误数据分别输出到两个文件</span><span class="token builtin class-name">command</span> <span class="token operator">></span> filename <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token comment"># 正确和错误数据分别输出到同一个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>/dev/null</code>垃圾桶</p><p>这个黑洞设备可以吃掉任何导向这个设备的信息，即输入这里的信息将被丢弃。</p></li></ul><h4 id="数据流输入"><a href="#数据流输入" class="headerlink" title="数据流输入"></a>数据流输入</h4><p>​    stdin即是将原本需要由键盘输入的数据改由文件内容来代替</p><ul><li><p><code>&lt;</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cat</span> <span class="token operator">></span> outfilename <span class="token operator">&lt;</span> inputfilename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105150517867.png" alt="image-20220105150517867"></p></li><li><p>&lt;&lt;</p><p>代表输入结束的意思。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105150546420.png" alt="image-20220105150546420"></p></li></ul><h3 id="多个命令执行的判断条件"><a href="#多个命令执行的判断条件" class="headerlink" title="多个命令执行的判断条件"></a>多个命令执行的判断条件</h3><h4 id="命令回传码"><a href="#命令回传码" class="headerlink" title="命令回传码$?"></a>命令回传码$?</h4><p>​    若一个命令执行的结果为正确，在Linux下面会回传一个**<code>$?=0</code>**</p><h4 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105151003619.png" alt="image-20220105151003619"></p><p>​    若有多个判断条件，Linux<strong>从左到右</strong>开始进行判断</p><h3 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a>管道命令</h3><p>​    符号是<code>|</code>，将多个命令连接起来进行处理</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105151436691.png" alt="image-20220105151436691"></p><p>管道命令在使用时，<strong>每个管道后面的第一个数据一定是“命令”，且这个命令必须要能够接收数据</strong>。</p><p>管道命令的注意点：</p><ul><li>管道命令仅处理<strong>stdout，忽略stderr</strong></li><li>管道命令必须接收前一个命令的数据成为stdin来继续处理</li></ul><p>注意减号<code>-</code>的用途，<strong>在某些命令用到文件名的时候，stdin和stdout可以用<code>-</code>来代替</strong>。</p><h4 id="选取命令"><a href="#选取命令" class="headerlink" title="选取命令"></a>选取命令</h4><ul><li><p>cut</p><p>按自定义方式分割字符串并选取片段</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105151821196.png" alt="image-20220105151821196"></p></li><li><p>grep</p><p>查找输入相关的字符串</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105151953296.png" alt="image-20220105151953296"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152001216.png" alt="image-20220105152001216"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160248886.png" alt="image-20220105160248886"></p></li></ul><h4 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h4><ul><li><p>sort</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152100436.png" alt="image-20220105152100436"></p></li><li><p>uniq</p><p>对输出结果去重处理</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152156981.png" alt="image-20220105152156981"></p></li><li><p>wc</p><p>统计字符</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152440567.png" alt="image-20220105152440567"></p></li></ul><h4 id="双向重定向"><a href="#双向重定向" class="headerlink" title="双向重定向"></a>双向重定向</h4><p>​    同时将数据流送到文件与屏幕</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152614042.png" alt="image-20220105152614042"></p><h4 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h4><ul><li><p>tr</p><p>删除一段信息当中的文字，或是进行文字信息的替换。</p><p>后面的字符串可以是<strong>正则表达式</strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152749247.png" alt="image-20220105152749247"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105152803495.png"></p></li><li><p>col</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105153105945.png" alt="image-20220105153105945"></p></li><li><p>join</p><p>对比两个文件的数据相关性，并将两个文件当中有相同数据的行相加在一起</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105153216104.png" alt="image-20220105153216104"></p></li><li><p>paste</p><p>直接将两个文件的两行贴在一起</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105153540224.png" alt="image-20220105153540224"></p></li><li><p>expand</p><p>将[tab]转换为空格键</p><p>[tab]默认为8个空格</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105153703697.png" alt="image-20220105153703697"></p></li></ul><h4 id="切割命令"><a href="#切割命令" class="headerlink" title="切割命令"></a>切割命令</h4><p>​    将一个大文件依据文件大小或行数来切割为小文件</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105153901791.png" alt="image-20220105153901791"></p><h4 id="参数代换"><a href="#参数代换" class="headerlink" title="参数代换"></a>参数代换</h4><p>​    xargs读入stdin的数据，并以空格或断行字符进行分隔为名的参数</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105154026640.png" alt="image-20220105154026640"></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>​    正则表达式(Regular Expression)是通过一些特殊字符的排列，用以查找、替换、删除一行或多行文字字符串。</p><h3 id="基础正则"><a href="#基础正则" class="headerlink" title="基础正则"></a>基础正则</h3><h4 id="语系的设置"><a href="#语系的设置" class="headerlink" title="语系的设置"></a>语系的设置</h4><p>​    不同语系对正则的结果有影响，通常使用C语系即<code>LANG=C</code>，兼容POSIX的标准。其有些特殊的符号如下。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160112857.png" alt="image-20220105160112857"></p><h4 id="基础正则字符表"><a href="#基础正则字符表" class="headerlink" title="基础正则字符表"></a>基础正则字符表</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160416217.png" alt="image-20220105160416217"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160426010.png" alt="image-20220105160426010"></p><h3 id="扩展正则"><a href="#扩展正则" class="headerlink" title="扩展正则"></a>扩展正则</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160844165.png" alt="image-20220105160844165"></p><h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><h4 id="数据CURD工具sed"><a href="#数据CURD工具sed" class="headerlink" title="数据CURD工具sed"></a>数据CURD工具<code>sed</code></h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160754008.png" alt="image-20220105160754008"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105160800618.png" alt="image-20220105160800618"></p><h4 id="输出格式化工具"><a href="#输出格式化工具" class="headerlink" title="输出格式化工具"></a>输出格式化工具</h4><ul><li><p>printf</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105161017356.png" alt="image-20220105161017356"></p></li><li><p>awk</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">awk</span> <span class="token string">'条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105161841639.png" alt="image-20220105161841639"></p><ul><li><p>相比于sed常常处理整行数据，awk可以分段处理，非常适合处理小型的数据处理。</p></li><li><p>awk可以后接文件处理，也可以处理前一个命令的stdout.</p></li><li><p>处理的每一行的字段内的数据，默认以空格键或[tab]键进行分隔。</p></li><li><p>每一行的字段都有变量名<code>$colum</code>，colum是第几列，其中<code>$0</code>表示整行。</p></li><li><p>awk的内置参数：</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105162023997.png" alt="image-20220105162023997"></p><ul><li>awk的条件逻辑运算符</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105162144128.png" alt="image-20220105162144128"></p><ul><li>在awk中，shell变量可以直接使用，不用加上$符号</li></ul></li></ul><h2 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h2><h3 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h3><p>​    shell script 是利用shell的功能所写的一个“程序”，这个程序是使用纯文本文件，将一些shell的语法与命令（含外部命令）写在里面，搭配正则表达式、管道命令与数据流重定向等功能，以达到我们所想要的处理目的。</p><p>​    shell script是直接利用shell与相关工具，所以不需要编辑即可执行。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><ol><li>命令的执行是从上而下，从左而右地分析与执行</li><li>空白行会被忽略掉，并且[tab]键所得到的空白同样是为空格键</li><li>读取到一个Enter符号（CR），就尝试开始执行改行命令</li><li>一行内容太多，可以使用<code>\[Enter]</code>换行</li><li><code>#</code>视为批注</li></ol><h4 id="执行命令的方法"><a href="#执行命令的方法" class="headerlink" title="执行命令的方法"></a>执行命令的方法</h4><p>​    执行sh文件必须具备可读与可执行(<code>rx</code>)权限！</p><p>​    分为执行命令的方式有两大种，其中第一种又分3种。</p><ul><li><p>使用bash</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">bash shell.sh或sh shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>绝对路径执行</li><li>相对路径执行</li><li>放置到PATH或其已经写入的目录下，直接输入sh文件名执行</li></ul><p><strong>这种方式执行，script会使用一个新的<code>bash</code>环境来执行命令，即script是在bash的子进程执行的。所以在script中设置的变量不会传回到父进程中。</strong></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105165748382.png" alt="image-20220105165748382"></p></li><li><p>利用source或<code>.</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> shell.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这种方式执行，script直接在父进程中执行，所以script中定义的变量会生效</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105165853548.png" alt="image-20220105165853548"></p></li></ul><h4 id="sh文件分析"><a href="#sh文件分析" class="headerlink" title="sh文件分析"></a>sh文件分析</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105164206712.png" alt="image-20220105164206712"></p><ul><li><p>第一部分，声明，说明这个script使用的shell名称</p><p>bash在执行的时候会加载相关的配置文件，一般是non-login shell的<code>~/.bashrc</code>。</p></li><li><p>第二部分，批注，程序内容的说明</p></li><li><p>第三部分，主要环境变量的说明</p><p>一般来说声明PATH和LANG，以使用外部命令</p></li><li><p>第4部分，主要程序部分</p></li><li><p>第5部分，告知执行结果</p><p><code>exit n表示中断程序并回传一个值个系统。后面的命令使用</code>$?`即可得到这个值。</p></li></ul><h4 id="sh的默认变量"><a href="#sh的默认变量" class="headerlink" title="sh的默认变量"></a>sh的默认变量</h4><ul><li><p>使用特殊符号，读取sh文件后接的输入参数。</p><p>​    按整条命令的参数顺序，依次为<code>$0</code>、<code>$1</code>等（从bash/sh的下一个参数开始）</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106105950275.png" alt="image-20220106105950275"></p></li><li><p>一些特殊符号：</p><ul><li><code>$#</code>，表示sh文件后面接的参数的个数</li><li><code>$@</code>，表示sh文件的所有参数</li><li><code>$*</code>，表示<code>$0c$1c$2</code>，其中c为分隔符，默认为空格键</li></ul></li><li><p><code>shift</code>，造成参数变量号码偏移</p></li></ul><h3 id="逻辑语法"><a href="#逻辑语法" class="headerlink" title="逻辑语法"></a>逻辑语法</h3><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p><strong>两个可以写在条件里面的判断式</strong>:</p><ul><li><p>测试命令Test</p><p>检测某个文件是否存在、是否有特定属性权限、基本大小判断等等。<img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106104417160.png" alt="image-20220106104417160"><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106104450709.png" alt="image-20220106104450709"></p></li><li><p>判读符号[]</p><p>返回结果只有真和假，可以结合<code>&amp;&amp;</code>和<code>||</code>使用</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106105056317.png" alt="image-20220106105056317"></p><p><strong>一些注意事项：</strong></p><ul><li>中括号的两端需要有空格符来分割</li><li>中括号内的每个组件都需要有空格键来分隔</li><li>中括号内的变量，最好都以双引号括起来</li><li>中括号内的常量，最好都以单或双引号括起来</li></ul><p><strong>一些参数：</strong></p><ul><li><code>-o</code>参数，在中括号里面相当于“或”</li></ul></li></ul><p><strong>下面就是具体的条件表达式</strong>:</p><ul><li><p><code>if...then</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106110644574.png" alt="image-20220106110644574"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106110719404.png" alt="image-20220106110719404"></p></li><li><p><code>case..esac</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106110834908.png" alt="image-20220106110834908"></p><p>一个列子：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106110856307.png" alt="image-20220106110856307"></p></li></ul><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><em>不定循环</em>：</p><ul><li><p><code>while do done</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106111728580.png" alt="image-20220106111728580"></p></li><li><p><code>until do done</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106111744960.png" alt="image-20220106111744960"></p></li></ul><p><em>固定循环</em>：</p><ul><li><p><code>for...do...done</code></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106111858866.png" alt="image-20220106111858866"></p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106111937902.png" alt="image-20220106111937902"></p></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>语法</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106111103302.png" alt="image-20220106111103302"></p><p>由于shell script的执行方式是由上而下、由左而右，所以<strong>function的设置一定要在程序的最前面</strong>。</p></li><li><p>内置参数</p><p>函数名称用<code>$0</code>表示，后续节点变量依次用<code>$1</code>、<code>$2</code>等表示。</p><p>后面接参数的形式是：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fname opt1 opt2 opt3 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="shell-script的追踪与调试"><a href="#shell-script的追踪与调试" class="headerlink" title="shell script的追踪与调试"></a>shell script的追踪与调试</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220106112036406.png" alt="image-20220106112036406"></p><h2 id="Shell其他相关命令"><a href="#Shell其他相关命令" class="headerlink" title="Shell其他相关命令"></a>Shell其他相关命令</h2><h3 id="Shell资源限制命令ulimit"><a href="#Shell资源限制命令ulimit" class="headerlink" title="Shell资源限制命令ulimit"></a>Shell资源限制命令ulimit</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220103172454549.png" alt="image-20220103172454549"></p><h3 id="查看历史输入命令history"><a href="#查看历史输入命令history" class="headerlink" title="查看历史输入命令history"></a>查看历史输入命令history</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105133021865.png" alt="image-20220105133021865"></p><ul><li>历史命令记录在<code>~/.bash_history</code>文件中</li><li><code>~/.bash_history</code>记录的命令个数和bash的<code>HISTSIZE</code>变量有关。</li></ul><h3 id="设置终端机环境stty-set"><a href="#设置终端机环境stty-set" class="headerlink" title="设置终端机环境stty/set"></a>设置终端机环境stty/set</h3><ul><li>设置按键代表的含义等</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105144130419.png" alt="image-20220105144130419"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">stty <span class="token keyword">function</span> Key<span class="token comment">#例如： stty erase ^h，^代表[Ctrl]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>设置Bash的终端机环境</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105144453394.png" alt="image-20220105144453394"></p><h3 id="文件比较命令diff-cmp-patch"><a href="#文件比较命令diff-cmp-patch" class="headerlink" title="文件比较命令diff/cmp/patch"></a>文件比较命令diff/cmp/patch</h3><ul><li><p>diff</p><p>以行为单位进行文件比较</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105162630991.png" alt="image-20220105162630991"></p></li><li><p>cmp</p><p>利用字节为单位进行比较，可以比较二进制文件</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105162745735.png" alt="image-20220105162745735"></p></li><li><p>patch</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20220105162854512.png" alt="image-20220105162854512"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见日志框架</title>
      <link href="/2021/12/13/chang-jian-ri-zhi-kuang-jia/"/>
      <url>/2021/12/13/chang-jian-ri-zhi-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="常见日志框架"><a href="#常见日志框架" class="headerlink" title="常见日志框架"></a>常见日志框架</h1><blockquote><p>参考：</p><ul><li><a href="https://www.cnblogs.com/eaglelihh/p/15003410.html#log4j2">https://www.cnblogs.com/eaglelihh/p/15003410.html#log4j2</a></li><li><a href="https://cloud.tencent.com/developer/article/1876048">https://cloud.tencent.com/developer/article/1876048</a></li></ul></blockquote><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mjg2NTM3NQ==,size_16,color_FFFFFF,t_70.png" alt="常见日志框架"></p><ol><li><p><strong>市面流行的日志框架</strong>：</p><ul><li>JUL：java util logging Java原生日志框架。</li><li>Log4j：Apache的一个开源项目。</li><li>Logbcak ：由Log4j之父做的另一个开源项目，业界中称为 log4j 后浪。他是一个可靠、通用且灵活的Java日志框架。</li><li>Log4j2 ：Log4j的第二个版本，各个方面与Logback及其相似。具有插件式结构、配置文件优化等特征，在Spring Boot1.4版本之后就不在支持 log4j ，所以出现了第二个版本的。</li><li>JCL</li><li>SLF4j</li></ul></li><li><p><strong>分类：</strong></p><ul><li>日志框架技术 ：JUL、Log4j、Logbcak、Log4j2</li><li>日志门面技术 ：JCL、SLF4j</li></ul></li><li><p>为什么要使用日志门面技术：</p><ul><li><p>每一种日志框架都有自己单独的API，要使用对应的框架就要使用对应的API，这就大大的增加了应用程序代码对于日志框架的耦合性。使用日志门面技术之后，不论底层是什么日志框架，我们拿到代码之后可以使用自己习惯的日志框架就行解读，不用修改一行代码。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211213141008145.png" alt="image-20211213141008145" style="zoom:50%;" /></li><li><p>其实框架1调用的是自己的方法a() ，框架2调用的自己的方法b() ,此时将这两个方法抽取出来称为方法c()。</p></li></ul></li></ol><h1 id="日志的发展历程"><a href="#日志的发展历程" class="headerlink" title="日志的发展历程"></a>日志的发展历程</h1><ol><li><p>从最早期开始，大家都是使用<code>System.out</code>和<code>System.err</code>来打印日志；不灵活也不可以配置；要么全部打印，要么全部不打印；没有一个统一的日志级别</p></li><li><p>后来<code>Log4j</code>就出现了，它是<code>Ceki Gülcü</code>这个大佬开发的，后来<code>Log4j</code>成为了<code>Apache</code>基金会项目中的一员</p></li><li><p>后来<code>Java</code>也推出了自己的日志框架<code>JUL(Java Util Logging)</code>，在<code>package java.util.logging</code>下</p></li><li><p> <code>Apache</code>又推出了日志接口<code>Jakarta Commons Logging</code>，也就是日志抽象层，你就可以很方便的在<code>Log4j</code>和<code>JUL</code>之间做切换</p></li><li><p><code>Ceki Gülcü</code>觉得觉得<code>JCL</code>不好，开发了一套新的日志门面<code>Slf4j(Simple Logging Facade for Java)</code>、它的实现<code>Logback</code>以及一些桥接包：</p><blockquote><p>jcl-over-slf4j.jar ：jcl ——&gt; slf4j<br>slf4j-jcl.jar ：slf4j ——&gt; jcl<br>log4j-over-slf4j ：log4j ——&gt; slf4j<br>slf4j-log4j12.jar ：slf4j ——&gt; log4j<br>jul-to-slf4j ：jul ——&gt; slf4j<br>slf4j-jdk14.jar ：slf4j ——&gt; jul</p></blockquote></li><li><p>后来<code>Apache</code>直接推出新项目，不是<code>Log4j1.x</code>升级，而是新项目<code>Log4j2</code>，因为<code>Log4j2</code>是完全不兼容<code>Log4j1.x</code>的，它也搞了分离的设计，分化成<code>log4j-api</code>和<code>log4j-core</code>，这个<code>log4j-api</code>也是日志接口，<code>log4j-core</code>是日志实现，它也出了很多桥接包：</p><blockquote><p>log4j-jcl ：jcl ——&gt; log4j2<br>log4j-1.2-api ：log4j ——&gt; log4j2<br>log4j-slf4j-impl ：slf4j ——&gt; log4j2<br>log4j-jul ：jul ——&gt; log4j2<br>log4j-to-slf4j ：log4j2 ——&gt; slf4j</p></blockquote></li></ol><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token number">.17</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>配置文件：log4j<span class="token punctuation">.</span>properties# <span class="token class-name">Set</span> root logger level <span class="token keyword">to</span> DEBUG and its only appender <span class="token keyword">to</span> A1<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>rootLogger<span class="token operator">=</span>DEBUG<span class="token punctuation">,</span> A1# A1 is set <span class="token keyword">to</span> <span class="token namespace">be</span> a <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>A1<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>ConsoleAppender</span># A1 <span class="token keyword">uses</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>A1<span class="token punctuation">.</span>layout<span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>PatternLayout</span>log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>A1<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>ConversionPattern<span class="token operator">=</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">4</span>r <span class="token punctuation">[</span><span class="token operator">%</span>t<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span><span class="token number">5</span>p <span class="token operator">%</span>c <span class="token operator">%</span>x <span class="token operator">-</span> <span class="token operator">%</span>m<span class="token operator">%</span>n 测试类：<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> 输出：<span class="token number">0</span>    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>eagleli<span class="token punctuation">.</span>log<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Main</span>  <span class="token operator">-</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jul"><a href="#jul" class="headerlink" title="jul"></a>jul</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">测试类：<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> 输出：八月 <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2021</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">19</span> 下午 <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>eagleli<span class="token punctuation">.</span>log<span class="token punctuation">.</span>jul<span class="token punctuation">.</span></span>Main</span> main信息<span class="token operator">:</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jcl"><a href="#jcl" class="headerlink" title="jcl"></a>jcl</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>测试类：<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">LogFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出：八月 <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2021</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">25</span> 下午 <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>eagleli<span class="token punctuation">.</span>log<span class="token punctuation">.</span>jcl<span class="token punctuation">.</span></span>Main</span> main信息<span class="token operator">:</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面输出结果可以看出，默认会使用<code>jul</code>作为底层的日志框架</p><p>如果我们想换成<code>log4j</code>作为底层的日志框架，怎么办呢？只需要加一个依赖即可，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>logging<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token number">.17</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>输出：<span class="token number">0</span>    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>eagleli<span class="token punctuation">.</span>log<span class="token punctuation">.</span>jcl<span class="token punctuation">.</span></span>Main</span>  <span class="token operator">-</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，底层日志框架已经变了，同样发现，我们的代码没有任何改动，只是加了一个依赖，由此可以看出接口的重要性。</p><h2 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>slf4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.7</span><span class="token number">.30</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>logback<span class="token operator">-</span>classic<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.2</span><span class="token number">.3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span> 测试类：<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> 输出：<span class="token number">23</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">30.893</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>eagleli<span class="token punctuation">.</span>log<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Main</span> <span class="token operator">-</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面底层日志框架使用的是<code>logback</code></p><p>那如果我们想切换成<code>jcl</code>作为底层实现框架，怎么办呢？只需换一个依赖即可，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>slf4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.7</span><span class="token number">.30</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>slf4j<span class="token operator">-</span>jcl<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.7</span><span class="token number">.30</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>输出：八月 <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2021</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">27</span> 下午 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>JCLLoggerAdapter</span> info信息<span class="token operator">:</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面结果可以看出，底层已经切到<code>jcl</code>了，而<code>jcl</code>默认采用的是<code>jdk</code>日志框架</p><p><code>cl-over-slf4j</code>和<code>slf4j-jcl</code>是不能同时使用的</p><p>因为前一个使用<code>jcl API</code>桥接到<code>slf4j</code>，后一个是使用<code>slf4j API</code>桥接到<code>jcl</code>，如果同时引用会导致循环调用，进而导致栈溢出</p><h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>log4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.14</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>log4j<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.14</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span> 测试类：<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出：<span class="token number">23</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">12.148</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> ERROR <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>eagleli<span class="token punctuation">.</span>log<span class="token punctuation">.</span>log4j2<span class="token punctuation">.</span></span>Main</span> <span class="token operator">-</span> hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上我们采用的<code>log4j2</code>作为底层的实现，我们想要用<code>slf4j</code>作为底层的实现，怎么办呢？只需加一个依赖即可，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">依赖：    <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>log4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.14</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>log4j<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">2.14</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span>输出：SLF4J<span class="token operator">:</span> <span class="token class-name">Failed</span> <span class="token keyword">to</span> <span class="token namespace">load</span> <span class="token keyword">class</span> <span class="token string">"org.slf4j.impl.StaticLoggerBinder"</span><span class="token punctuation">.</span>SLF4J<span class="token operator">:</span> <span class="token class-name">Defaulting</span> <span class="token keyword">to</span> <span class="token namespace">no</span><span class="token operator">-</span>operation <span class="token punctuation">(</span>NOP<span class="token punctuation">)</span> logger implementationSLF4J<span class="token operator">:</span> <span class="token class-name">See</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>org<span class="token operator">/</span>codes<span class="token punctuation">.</span>html#<span class="token class-name">StaticLoggerBinder</span> <span class="token keyword">for</span> further details<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果看出，我们底层日志框架已经切换了，因为没有任何<code>slf4j</code>的实现类框架，所以没有输出日志。</p>]]></content>
      
      
      <categories>
          
          <category> Log </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻墙软件的原理探究</title>
      <link href="/2021/12/10/fan-qiang-ruan-jian-de-yuan-li-tan-jiu/"/>
      <url>/2021/12/10/fan-qiang-ruan-jian-de-yuan-li-tan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="翻墙软件的原理探究"><a href="#翻墙软件的原理探究" class="headerlink" title="翻墙软件的原理探究"></a>翻墙软件的原理探究</h1><blockquote><p>转载和参考：</p><ul><li><a href="https://www.hack520.com/330.html">https://www.hack520.com/330.html</a></li><li><a href="https://superxlcr.github.io/2018/07/01/%E4%B8%8A%E7%BD%91%E9%99%90%E5%88%B6%E5%92%8C%E7%BF%BB%E5%A2%99%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">上网限制和翻墙基本原理</a></li></ul></blockquote><p>主要分为几个原因和相应解决办法：</p><ul><li>DNS污染和劫持</li><li>封锁IP</li><li>封锁HTTP代理</li><li>封锁VPN</li></ul><p>另外还有一些工具介绍。</p><h1 id="DNS污染和劫持"><a href="#DNS污染和劫持" class="headerlink" title="DNS污染和劫持"></a>DNS污染和劫持</h1><h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><ul><li><p><strong>DNS劫持</strong>：DNS Hijacking。就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，<strong>导致对该域名的访问由原IP地址转入到修改后的指定IP</strong>，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。</p></li><li><p>DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了<a href="https://www.hack520.com/topic/baidu/">百度</a>的网站。这些都属于DNS劫持。</p></li></ul><img src="https://cdn.hack520.com/images/2018/56.png" alt="DNS劫持示意图" style="zoom:75%;" /><h2 id="DNS污染"><a href="#DNS污染" class="headerlink" title="DNS污染"></a>DNS污染</h2><ul><li><p><strong>DNS污染</strong>，又称为域名服务器缓存污染（DNS cache pollution）或者域名服务器快照侵害（DNS cache poisoning）。 DNS污染是指一些刻意制造或无意中制造出来的域名服务器分组，把域名指往不正确的IP地址。它是一种让一般用户由于得到虚假目标主机IP而不能与其通信的方法，是一种DNS缓存投毒攻击（DNS cache poisoning）。其工作方式是：由于通常的DNS查询没有任何认证机制，而且DNS查询通常基于的UDP是无连接不可靠的协议，因此DNS的查询非常容易被篡改，通过对UDP端口53上的DNS查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。DNS污染是发生在用户请求的第一步上，直接从协议上对用户的DNS请求进行干扰。</p></li><li><p>DNS污染症状：目前一些被禁止访问的网站很多就是通过DNS污染来实现的，例如YouTube、Facebook等网站。</p></li></ul><p>举个例子易于理解：这招是GFW常用的。你访问google.com 因为人家服务器在国外，你的DNS过去解析，肯定要走国际带宽的出口，然后就被GFW逮住了。因为DNS 走的是UDP协议，且UDP又没有什么校验机制，只管发送。所以这时候，GFW就假装成DNS服务器回应你了，而此时真正的请求可能正在被真正的DNS服务器处理，假的已经返回给你了，浏览器就选择了最快返回的那个地址去解析了。当然是一个不可用的地址啦。</p><p>因为DNS 走的UDP协议，并且是53端口，所以这有多好发现也就不言而喻了。如果你强行让DNS走TCP协议，GFW 有办法让你连接重置，虽然污染不了你的DNS，但是你还是无法获得ip。也就是为什么有一种FQ方式就叫修改host 文件，修改后，域名不需要去DNS服务器请求了，直接在你的操作系统里就已经解析出了ip 地址。但是，GFW还是会定期封杀这些网站的ip地址，你的host就没用了。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决办法：</p><ol><li>使用<a href="https://www.opendns.com/setupguide/">OpenDNS</a>（208.67.222.222）或<a href="https://developers.google.com/speed/public-dns/">GoogleDNS</a>（8.8.8.8）（现在不太好用，被封锁，速度慢）</li><li>使用一些第三方的DNS服务器</li><li>自己用VPS搭建DNS服务器</li><li>修改机器host文件，直接IP访问</li></ol><h1 id="封锁IP"><a href="#封锁IP" class="headerlink" title="封锁IP"></a>封锁IP</h1><p>通过上面一些方式，可以绕过DNS污染，通过IP地址访问无法访问的网页。但是目前针对IP进行大范围的封锁。虽然google这种大公司有很多镜像IP地址，但是目前基本全部被封锁掉，有漏网的可能也坚持不了多久。而且很多小公司的服务是部署在一些第三方的主机上，所以封锁IP有时会误伤，封锁一个IP导致主机上本来可以使用的页面也无法访问了。</p><p>不过目前不可能把所有国外的IP全部封锁掉，所以我们采用机会从国内连接到国外的VPS，进行翻墙。</p><p>解决办法：</p><ol><li>使用VPS搭建代理</li><li>使用IPV6 （IPV6地址巨大，采用封地址不现实，但是目前国内只有部分高校部署了IPV6）</li></ol><h1 id="封锁HTTP代理"><a href="#封锁HTTP代理" class="headerlink" title="封锁HTTP代理"></a>封锁HTTP代理</h1><p>对于没有办法搭建VPS的人来说，最好的办法就是使用HTTP代理。</p><h2 id="HTTP代理和封锁"><a href="#HTTP代理和封锁" class="headerlink" title="HTTP代理和封锁"></a>HTTP代理和封锁</h2><p>客户端不在直接请求目标服务器，而是请求代理服务器，代理服务器在去请求目标服务器。然后返回结果。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1.png" alt="代理示意图"></p><p>对于HTTP代理来说，封锁起来非常简单。因为HTTP协议是明文，Request Message中就带有要请求的URL或IP地址，这样很容易就被检测到。对于HTTPS来说，虽然通信是进行加密了，但是在建连之前会给代理服务器发送CONNECT方法，这里也会带上要访问的远端服务器地址。如果代理服务器在国外，在出去前就会被检测到。 如果代理服务器在国内，呵呵，你也出不去啊。</p><p>对于HTTP代理，因为是明文，所以很容易被服务器了解你的一些数据。<strong>所以不要随便使用第三方的HTTP代理访问HTTP网站，而HTTPS虽然不知道你的数据，但是可以知道你去了那里。</strong></p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决办法：</p><ol><li>使用VPS搭建VPN</li><li>使用第三方VPN</li></ol><h1 id="封锁VPN"><a href="#封锁VPN" class="headerlink" title="封锁VPN"></a>封锁VPN</h1><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><strong>虚拟专用网</strong>（英语：<strong>Virtual Private Network</strong>，简称<strong>VPN</strong>），是一种常用于连接中、大型企业或团体与团体间的私人网络的通讯方法。虚拟私人网络的讯息透过公用的网络架构（例如：<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91">互联网</a>）来传送<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E9%83%A8%E7%BD%91">内联网</a>的网络讯息。它利用已加密的<a href="https://zh.wikipedia.org/wiki/%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE">通道协议</a>（Tunneling Protocol）来达到保密、发送端认证、消息准确性等私人消息安全效果。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/2.jpg" alt="VPN示意图"></p><p>正常网络通信时，所有网络请求都是通过我们的物理网卡直接发送出去。而VPN是客户端使用相应的VPN协议先与VPN服务器进行通信，成功连接后就在操作系统内建立一个虚拟网卡，一般来说默认PC上所有网络通信都从这虚拟网卡上进出，经过VPN服务器中转之后再到达目的地。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/3.png" alt="VPN发送流程示意图"></p><p>通常VPN协议都会对数据流进行强加密处理，从而使得第三方无法知道数据内容，这样就实现了翻墙。翻墙时VPN服务器知道你干的所有事情（HTTP，对于HTTPS，它知道你去了哪）。</p><p>VPN有多种协议：OPENVPN、PPTP、L2TP/IPSec、SSLVPN、IKEv2 VPN，Cisco VPN等。其中的PPTP和L2TP是明文传输协议。只负责传输，不负责加密。分别利用了MPPE和IPSec进行加密。</p><h2 id="封锁方式"><a href="#封锁方式" class="headerlink" title="封锁方式"></a>封锁方式</h2><p>对于VPN和其他一些加密的传输的协议来说，没有办法直接获取明文的请求信息，所以没有办法直接封锁，而是使用了监控的方式：</p><ul><li><p>暴力破解</p><p>对于一些使用弱加密方式的协议来说，直接使用暴力破解检查传输内容。比如PPTP使用MPPE加密，但是MPPE是基于RC4，对于强大的防火墙背后的超级计算机集群，破解就是几秒钟的事情。</p><p>破解后明文中一旦包含了违禁内容，请求就会被封。而对应的IP可能会进入重点关怀列表。</p></li><li><p>特征检测</p><p>要想成功翻墙都必须与对应的远程服务器建立连接，然后再用对应的协议进行数据处理并传输。<br>而问题就出在这里：翻墙工具和远程服务器建立连接时，如果表现的很独特，在一大堆流量里很显眼，就会轻易被GFW识别出从而直接阻断连接，而VPN（尤其是OPENVPN）和SSH这方面的问题尤其严重。</p></li><li><p>流量监控</p><p>当一个VPN地址被大量人请求，并保持长时间连接时，就很容易引起关注。SSH接口有大量数据请求。一般会结合其他特征。</p></li><li><p>深度包检测</p><p><strong>深度数据包检测</strong>（英语：Deep packet inspection，缩写为 DPI），又称<strong>完全数据包探测</strong>（complete packet inspection）或<strong>信息萃取</strong>（Information eXtraction，IX），是一种电脑网络数据包过滤技术，用来检查通过检测点之<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E5%B0%81%E5%8C%85">数据包</a>的数据部分（亦可能包含其<a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E5%A4%B4">标头</a>），以搜索不匹配规范之协议、病毒、垃圾邮件、入侵，或以预定之准则来决定数据包是否可通过或需被路由至其他不同目的地，亦或是为了收集统计数据之目的。</p></li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/11.png" alt="VPN原理示意图" style="zoom:67%;" /><h1 id="关于Shadowsocks"><a href="#关于Shadowsocks" class="headerlink" title="关于Shadowsocks"></a>关于Shadowsocks</h1><h2 id="Socks代理-SSH-Socks"><a href="#Socks代理-SSH-Socks" class="headerlink" title="Socks代理/SSH Socks"></a>Socks代理/SSH Socks</h2><p><strong>SOCKS</strong>是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。SOCKS是”SOCKetS”的缩写[1]。<br>当防火墙后的客户端要访问外部的服务器时，就跟SOCKS代理服务器连接。这个代理服务器控制客户端访问外网的资格，允许的话，就将客户端的请求发往外部的服务器。<br>这个协议最初由David Koblas开发，而后由NEC的Ying-Da Lee将其扩展到版本4。最新协议是版本5，与前一版本相比，增加支持UDP、验证，以及IPv6。<br>根据OSI模型，SOCKS是会话层的协议，位于表示层与传输层之间</p><ul><li>与HTTP代理的对比</li></ul><p>SOCKS工作在比HTTP代理更低的层次：SOCKS使用握手协议来通知代理软件其客户端试图进行的连接SOCKS，然后尽可能透明地进行操作，而常规代理可能会解释和重写报头（例如，使用另一种底层协议，例如FTP；然而，HTTP代理只是将HTTP请求转发到所需的HTTP服务器）。虽然HTTP代理有不同的使用模式，CONNECT方法允许转发TCP连接；然而，SOCKS代理还可以转发UDP流量和<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>，而HTTP代理不能。HTTP代理通常更了解HTTP协议，执行更高层次的过滤（虽然通常只用于GET和POST方法，而不用于CONNECT方法）</p><p>Socks代理本身协议是明文传输，虽然相对HTTP有一些优势，但是明文也导致Socks代理很容易被封。所以可以考虑对Socks进行加密。所以出现了SSH Socks，对于MAC和Linux来说，不需要Client就可以进行访问。详细可以看：<a href="https://my.oschina.net/leejun2005/blog/94401">SSH隧道技术简介：端口转发&amp;SOCKS代理</a></p><p>但是网上看有些地区好像会对一些VPS的SSH进行端口干扰。我在武汉好像SSH到我的VPS一会就会断。在上海一直没这问题。而且SSH一般是小流量数据，如果数据量特别大，也会被认为是翻墙，进入特别关怀列表。</p><h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><p><strong>认准官网：</strong><a href="https://shadowsocks.org/en/index.html">https://shadowsocks.org/en/index.html</a> <strong>（.com那个是卖账号的）</strong></p><pre class="line-numbers language-none"><code class="language-none">A secure socks5 proxy,designed to protect your Internet traffic.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Shadowsocks 目前不容易被封杀主要是因为：</p><ol><li>建立在socks5协议之上，socks5是运用很广泛的协议，所以没办法直接封杀socks5协议</li><li>使用socks5协议建立连接，而没有使用VPN中的服务端身份验证和密钥协商过程。而是在服务端和客户端直接写死密钥和加密算法。所以防火墙很难找到明显的特征，因为这就是个普通的socks5协议。</li><li>Shadowsock搭建也比较简单，所以很多人自己架设VPS搭建，个人使用流量也很小，没法通过流量监控方式封杀。</li><li>自定义加密方式和密钥。因为加密主要主要是防止被检测，所以要选择安全系数高的加密方式。之前RC4会很容易被破解，而导致被封杀。所以现在推荐使用AES加密。而在客户端和服务端自定义密钥，泄露的风险相对较小。</li></ol><p><strong>所以如果是自己搭建的Shadosocks被封的概率很小，但是如果是第三方的Shadeowsocks，密码是server定的，你的数据很可能遭受到中间人攻击。</strong></p><p>顺便说一下，Shadowssocks是天朝的clowwindy大神写的。不过Shadowsocks项目源码已经从github上删除了并停止维护了，但是release中还有源码可以下载。<a href="https://github.com/shadowsocks/shadowsocks">https://github.com/shadowsocks/shadowsocks</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络与Web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络与Web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的学生时代</title>
      <link href="/2021/12/10/wo-de-xue-sheng-shi-dai/"/>
      <url>/2021/12/10/wo-de-xue-sheng-shi-dai/</url>
      
        <content type="html"><![CDATA[<h1 id="我的学生时代"><a href="#我的学生时代" class="headerlink" title="我的学生时代"></a>我的学生时代</h1><p><strong>引文</strong>：之前想和恩师一起聚一聚吃饭的，但是因为疫情暂时不能离开南京市。除了叙叙旧，我有很多话和人生感悟想找一位倾听者，正好小师弟面临高考，想让我给一些参考意见。于是，就想着可以从高中开始，写一篇关于高中学习生活，高考本科选择、校园生活学习、研究生选择、工作选择相关的人生感悟（类似自传吧～</p><h1 id="高中"><a href="#高中" class="headerlink" title="高中"></a><strong>高中</strong></h1><p>2012年进入高中学习，听说那是市里最好的，省重点的高中，因为初中学的并不扎实的我，还是非常开心能考进这里。</p><h2 id="那些日子"><a href="#那些日子" class="headerlink" title="那些日子"></a>那些日子</h2><p>可能我比较内向，可能我想在这里改变初中上学时对知识一知半解的状态，从第一天入学开始，就沉浸在了知识里面。每天按时对知识预习、复习、写作业，周末也会来学校学习，很多不理解的知识会在周末弄明白，同时语数英政史地理化生全部学科的复习也会花掉很多时间，因为我不喜欢学过学懂的知识忘记掉的感觉。会很累也很充实！</p><p>从第一次考试开始，到最后的高考，每一场考试，我都尽着最大的努力，考出我自己的水平。然而这其中压力、迷茫、成绩的起伏、名列前茅的光环，都推着我愈挫愈勇。</p><p>到了高考前的7天假，我好像比平常任何一场考试都平静，可能想着终于结束了不堪回首的高中三年，可能有预感高考的结果，或者anything else?</p><p>2015年，高考结束，拿到分数的那一刻，652，好像记得还是很平静，这个分数算是我比较失败的水平了吧。不管结果怎么样，还是要选择大学呀。可能当时只有两个要求985和地点在上海，所以符合的也就ECNU啦。关于大学后文再说，先总结一下高中：</p><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><ol><li><p>复习</p><p>之所以把“复习”放在第一位，是因为它真的很重要，比学习新知识还重要！复习是对一本书知识的梳理，最好可以根据目录或者自己的归纳，写出知识点进行复习。更有甚者，我当时复习的程度是，无论那门课，那本书，说到那个知识点，我可以一口说出所在页数，甚至能回忆起书本那一页的样子。这也是我的记忆方法“<strong>图像记忆法</strong>”。</p><p>复习的时间也很重要，不要等到考试前才复习，当天的知识尽量当天复习，每周再对本周或近几周知识做一个总结。所以我高中的时候特别喜欢放假，这个时候我就有大把时间复习。</p><p>然后考试前的一两天和当天，只需要稍微看一下难记忆的点即可，缓解压力的同时，也会更高效和针对性的备考。</p></li><li><p>自学</p><p>自学的重要性排在第二，也非常重要。这也是长大之后必须具备的能力。自己提前看书本的知识，做对应的习题，在没有人教你的时候去学习会暴露出很多问题，等上课的时候带着这些问题听课，自然就会其他人有侧重点，听课也不会觉得一脸懵。<strong>这个方法，甚至上大学学高数的时候我还在用。</strong></p></li><li><p>预习</p><p>如果能做到第二点自学，那这一点也就自然而然做了。不过有时候作业比较多，或者时间不够来不及自学，那最少要预习第二天的知识，不然上课的时候非常容易出现听不懂，心累的状况。</p></li></ol><h2 id="最重要的能力"><a href="#最重要的能力" class="headerlink" title="最重要的能力"></a>最重要的能力</h2><p>高中期间除了学习方法，也会锻炼和培养出一些让我受益终身的品质。</p><ol><li>自学能力。同时也是对新知识的适应能力和适应速度</li><li>自律。自己规划自己的学习时间，克制自己贪玩的心。</li><li>自愈。这在高中的时候可能表现在面对低谷时的抗压能力。</li></ol><h2 id="关于高考后大学及专业的选择"><a href="#关于高考后大学及专业的选择" class="headerlink" title="关于高考后大学及专业的选择"></a>关于高考后大学及专业的选择</h2><h3 id="我的选择和原因"><a href="#我的选择和原因" class="headerlink" title="我的选择和原因"></a>我的选择和原因</h3><p>​    对我自己而言，主要对上海比较熟悉，选定了城市后再看看分数，就只能上华师大了。</p><h3 id="关于专业和学校的调研"><a href="#关于专业和学校的调研" class="headerlink" title="关于专业和学校的调研"></a>关于专业和学校的调研</h3><p>​    借此机会，调研了不同学校，不同专业的声音。关于“报考时选择的原因”，“对学校的评价”，“本专业的评价”三个问题进行了调研。调研范围仅限于我的好朋友们，肯定是最真实的声音，当然可能参杂个人和不全面观点，仅供我的小师弟参考～</p><p>​    我在分类的时候，观点是专业和学校都非常重要，在学校不差的情况下，专业还是非常重要的，所以这次以专业进行分类。</p><p>​    概览：</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211210152838517.png" alt="image-20211210152838517" style="zoom:40%;" /><h4 id="电子与微电子"><a href="#电子与微电子" class="headerlink" title="电子与微电子"></a>电子与微电子</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211210152336072.png" alt="image-20211210152336072" style="zoom:50%;" /><h4 id="通信工程"><a href="#通信工程" class="headerlink" title="通信工程"></a>通信工程</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211210152422838.png" alt="image-20211210152422838" style="zoom:50%;" /><h4 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211210152545415.png" alt="image-20211210152545415" style="zoom:50%;" /><h4 id="金融"><a href="#金融" class="headerlink" title="金融"></a>金融</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211211114237337.png" alt="image-20211211114237337" style="zoom:50%;" /><h4 id="环化材"><a href="#环化材" class="headerlink" title="环化材"></a>环化材</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211211114158777.png" alt="image-20211211114158777" style="zoom:50%;" /><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211210152729165.png" alt="image-20211210152729165" style="zoom:50%;" /><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    各个专业各个学校各有利弊，根据自己的爱好和规划考虑选择。</p><h1 id="本科"><a href="#本科" class="headerlink" title="本科"></a>本科</h1><p>2015年进入华东师范大学进行本科的学习，开启了“大学生”的生活。</p><h2 id="那些日子-1"><a href="#那些日子-1" class="headerlink" title="那些日子"></a>那些日子</h2><ul><li>开学前的3个月暑假</li></ul><p>​    在高中三年憋的久了，好像都不会和别人交流了，所以还没开学就开始尝试着和我可爱的同学们交流（还记得那些尬聊的日子！太尴尬了）。好像开学前也看了些高数的书之类的吧，可能“学习成瘾”了吧。</p><ul><li>大一</li></ul><p>​    大一开学后不久，好像就感觉到学业的一些压力，理论知识在理解上比高中要深好多，而且课程也非常多，应该每学期都有10门课左右吧，太可怕了，想每门课都吃透，需要花大量大量的时间呀。所以图书馆就成了我除了寝室待的时间最长的地方了。印象中，图书馆的每一层都待过吧，甚至感觉图书馆厕所的每个坑都蹲过（玩笑归玩笑，但是总感觉是事实～哈哈哈）。在学习上让我印象最深刻的应该就是英语了吧，在应试教育下成长的学生，对听说读写分开训练，简直就是噩梦，果然期末考试完后英语是最拖完GPA，也是唯一的吧，太可怕了，果然是“华东英语大学”。</p><p>​    大一在学业之余，也参加社团和学生组织，不过好像表现的都不是很好吧，记得好像还被学姐说不作为😂。真的非常抱歉，我那时候可能还不止怎么和别人交流，非常内向，19岁的时候可能也没有太多的责任感😞，但是现在的我肯定不会不作为的，反而非常讨厌不作为的人！然后大一上学期的时候还在部门碰到了第一个好朋友，和自己也太像了吧～紧接着，又在电路分析课上结识了人生知己。</p><p>​    以为大一就会这么平淡又压力的过去，可是大一下学期在学业压力、家庭矛盾、社交矛盾等等问题的影响下，unfortunately, i became a patient with mild depression。经历2周左右的失眠，有过绝望，有过奔溃，想过放弃，想过离开😭。然而，熬过低谷，就是坦途。在这期间，很幸运有一位善良的学姐帮我解决英语的困扰，很幸运有我的知己一路陪伴和开导。</p><ul><li><p>大二</p><p>​    就像上面那句话的后半句，熬过那个低谷，大二开始，就开启了我开挂般的人生。</p><p>​    这一年度，有了好哥们的陪同，一同上课，一同吃饭，一同泡图书馆，一同K歌，一同王者开黑，一同谈论人生，一同认识世界。我带着他扫清知识障碍，他带着我打开心扉大门。</p><p>​    这一年结束，尽管有英语在也影响不了我拿到高GPA，尽管有各种不开心也影响不了我的友情升温。</p><p>​    对，还认识（应该是单方膜拜）了我的女神！低调而又不失自信，实力与颜值并存。记得大一的时候把我的学导（也是成熟而又有实力的姐姐）当作学习的榜样，那这个时候应该把想把我自己的生活去做到女神那样。</p></li><li><p>大三</p><p>​    大三就更无敌了，大三上学期，带着我的兄弟们选完所有学分（能选的都选），好像是13门课吧，还都是专业课要考试的！！！这一年在图书馆的日子应该就更久了。</p><p>​    哎对，还有我当了学导，带了一个很厉害很厉害的小学妹，记得这学期图书馆的日子很难熬，也多亏相互陪伴。</p><p>​    除了学业，这一年改变最大的好像就是人生终于探出情感的分支，追求喜欢的女生，现在想起来好像和短视频上刷到的那些剧情还挺相似哈哈哈哈，细节咱就不说了，反正最后没成就是了🤭。但还是感谢那段时间的相处吧，第一次尝试接触异性，第一次为了谁去做各种事情，还是蛮有意思。顺便say sorry，那个时候好像20岁？21岁？不懂得照顾对方的感受吧，也是经历了那么多自己对情感会比较敏感的原因，那段时间发生的不开心，还是要say sorry！！！</p><p>​    对了，17年末18年初，好像下了场大雪吧，哈哈哈哈，我被困在高速上一天一夜，也是个难忘的经历哈哈哈哈哈哈。</p><p>​    大三下学期开始就各种玩耍和放松了，去各地玩耍，玩各种游戏，还认识了咱大中国的网络好儿女。</p></li><li><p>大四</p><p>大四上学期好像和大三下学期类似，就是18年那年吧，顺利保研后，就继续享受着人生。</p><p>但是大四下学期就比较难受了，去了外校，也就是南大做毕设，又开始了各种压力和自我怀疑，还有对研究生生活和南京生活的不习惯，幸好在4月份做完毕设就回上海了！</p><p>然后做毕设的时候，校内的挂名导师（那是一位无法形容的老师），也是各种折磨我，难受～</p><p>19年的6月份也顺利毕业，开始了研究生生活，这个也后文再说，先总结一下大学本科的我。</p></li></ul><h2 id="关于学习方法和保研的选择"><a href="#关于学习方法和保研的选择" class="headerlink" title="关于学习方法和保研的选择"></a>关于学习方法和保研的选择</h2><ol><li><p>学习方法</p><ul><li><p>及时消化课程知识</p><p>​    每天上完课后，我都回去图书馆把当天课上没听懂的地方都去理解清楚。这也是非常重要的点，因为有些课程还是比较紧的，一周会有多次，如果一次听不懂没有及时理解，那下一节课就会直接懵掉了。</p><p>​    当然大学生很多都会在考试周前再去复习，这也无可厚非，我还是喜欢把事情做在平时，“<strong>不打无准备的仗</strong>”。</p></li><li><p>借助作业理解知识点</p><p>​    大学生的作业也是非常的多。当去理解完今天的知识的时候后，就可以边完成作业，边更深度的理解知识。<strong>最重要的，遇到不会的，一定要看答案</strong>。这点和高中不同，高中的基础相对基础，需要根据作业去锻炼自己解题的能力，大学的知识难度较高，需要先把知识理解即可，如果理解力很厉害的话，有自己的体会和理解会更好。</p></li><li><p>关于实践学科</p><ul><li>编程课。对于电子系的学生，第一次接触c和c++时候，一脸懵。我在听完课后，会去把书后面的习题，一题一题的做一遍，不会的就去看答案，要理解，理解完再自己做一遍。对于一些基础的算法，比如冒泡排序什么的，甚至可以达到记忆的程度，久而久之，会提高自己的编程能力。</li><li>电路课。课程需要在硬件电路板上完成各种功能，这应该也是大学里面的第一次大量动手实践课。对理论知识和差错能力都是很大的考验。所以，在理论知识理解透彻后，可以多花点时间泡在实验室里面，把觉得奇怪的地方弄懂，一步一步调试。（记得当时，老师也是在课程外的时间去开放实验室给我们练习）</li></ul></li></ul></li><li><p>保研</p><ul><li><p>一些条件</p><p>这个我大一进校就知道有这个事情，所以能做的也就比较简单：</p><ul><li>不能挂科！！！</li><li>每门课尽可能拿高绩点！！！</li><li>一些比赛，如果感兴趣可以参加，特别是市级、省级、国家级，会有相应加分。</li></ul></li><li><p>夏令营和9月推免</p><p>在大三结束和大四开学前的那个暑假，会有各大学校的夏令营，可以去报名参加，如果通过会发offer，后续保研名额正式下来的时候，就可以选择了。</p><p>我当时是参加了南大的夏令营，就是参观学校和各个实验室，然后最后一天会有个面试答辩，问专业相关的知识。一共就二三天左右。</p><p>除了夏令营，还有9月有个推免系统，不过建议走夏令营，机会更大。</p></li><li><p>学信网信息填写</p><p>等过段时间，如果通过夏令营会邮件通知offer，然后就开始选导师了。我是发了几个老师的邮件，然后我现在的导师秒回邮件，问了些问题就接受我了。后续其他老师邮件过来后，我就没有回复了，就这么草率的决定了导师。所以选<strong>导师环节，一定要重视</strong>，利用夏令营多认识学校的学长和学姐，也多和同级的同学通通气，选错导师，可是3年的事情。</p><p>保研一般会在9月28号，去学信网填写相关信息。</p><p>接着可能导师会联系你去做毕设，如果想抓紧大四的时间休息，建议别去；如果一心科研，那越早去越好。</p></li></ul></li></ol><h2 id="一些非常重要的感悟"><a href="#一些非常重要的感悟" class="headerlink" title="一些非常重要的感悟"></a>一些非常重要的感悟</h2><p>​    这个part是除了学业的感悟。大学4年时间，说长不长，说短不短。对我而言，是我性格从内向到开朗的转变过程，也是我价值观形成的过程。</p><h3 id="要学会社交"><a href="#要学会社交" class="headerlink" title="要学会社交"></a>要学会社交</h3><p>​    在高中的三年，虽然收获了很多很多，但是最让我遗憾的是：几乎整个三年被学业占据，我的心智几乎没有长进。不会社交，不会说话，没有对人生的思考。即使有对事物的反抗，但没有成形的价值观，所以一到大学便越到各种各样的社交问题。不过，三生有幸，遇见知己，开启了改变自己的几年时光。</p><p>​    学会了大胆帮助他人。很多时候，我很想帮助别人，但是由于内向，我会选择无视（不是不善良，是真的害羞，可能社牛们不懂哈哈哈）。记得在大学第一次提供帮助是帮一个女生推自行车上坡，全程不敢抬头，全程脸红哈哈哈。大家肯定觉得很奇怪吧，为什么我会这么害羞，讲道理我也不清楚😂。</p><p>​    之后在知己的陪伴下，我们去接触其他专业，其他学院的同学，慢慢的我也不那么害怕了，也比较享受和不同人交流的过程。后面好像我自己也会选一些公共课，和其他专业的同学多多交流，也很幸运，也遇到了很多很多nice的同学，非常开心！！！</p><p>​    不断的扩大交际圈，收获友情，甚至收获爱情，这会让你受益终身！所以，大胆社交！这个可是课上无法教你的东西。</p><h3 id="要学会娱乐"><a href="#要学会娱乐" class="headerlink" title="要学会娱乐"></a>要学会娱乐</h3><p>​    记得大一刚开学的时候，看到大家很喜欢去上海各地逛逛，而我对去校外玩耍没有多大兴趣。后来仔细想了一下，除了我当时比较内向外，更重要的是小时候已经逛遍了上海各地，非常熟悉，那自然没有多大兴趣，我就自然专注力就在课程和学业上面。这说明了一个非常重要的概念，<strong>“先玩好，才能学好”</strong>。这可能也适用于初高中的小朋友们，假设他们早已玩遍各种玩具和景点，吃遍各种美食，那他们可能心智也会更成熟，对这些自然兴趣会小很多，也会把注意力放到学习上。</p><p>​    然后谈到的点就是家长们都非常诟病的“<strong>游戏</strong>”。首先我觉得不是游戏什么的问题啦，归根结底就是<strong>自律</strong> ，这点我在高中part的时候就说过这个。举几个我的例子和情境，大家看看我的做法有没有问题。</p><ol><li><p>有天晚上我需要去图书馆学习，已经计划好了。但是吃饭的时候在玩<strong>阴阳师</strong>，可能玩的起劲了，饭吃完了还继续玩了1个小时左右。然后自己意识到时间有点晚了，赶紧放下手机，去了图书馆。</p><p>很多人会说要不玩这个游戏，我岂不是就按计划去图书馆了。但是如果我不完，一天到晚去学，我肯定会对书本知识疲倦，从而产生抵触心理。游戏是个缓解对学习疲倦的方式而已。如果那天我没有继续玩，那么就算我去了图书馆，我心里肯定还是痒痒的，不如<strong>先玩好，再专心去学</strong>。</p></li><li><p> 有点晚上我从图书馆学习回来好像已经晚上11点半了，洗漱完到床上应该已经12点多了。那天可能作业比较多，真的学了一天，非常非常累了，所以就打了一局<strong>王者荣耀</strong>，然后可能遇到什么有趣的事情了，发了个朋友圈。被我父亲看见了，直接怼”这么晚了，还在玩游戏，我看了多心痛“，我记得我当时回了句”这么晚，我也是学习到这么晚，才休息“。</p></li></ol><p>   很多人也会说那么晚了，干嘛不直接睡觉算了，休息好。但是我要反驳你了，此时闭眼睡觉，明天起床的一天又是充满学习的一天，还是和上面收到的原因类似，几天下来人就会很疲倦了。玩一局游戏，这里面最关键的因素不在游戏身上，而是<strong>在我的学习中穿插了可以缓解学习疲倦的事情</strong>。</p><p>所以对一个自律的人，无论是游戏还是其他娱乐方式，都不会成为他的阻碍。所以，家长们，你们应该教给孩子的<strong>不是如何去戒掉游戏，而是如何去学会自律</strong>。</p><p>另外，在15-19年间，<strong>王者荣耀</strong>的大火，也带来了全新的社交方式—“王者社交”。不熟悉的人一起玩玩游戏，相互配合，也会相识；熟悉的人一起开黑，也会度过这段非常开心的时光。</p><h3 id="要调节情绪"><a href="#要调节情绪" class="headerlink" title="要调节情绪"></a>要调节情绪</h3><p>​    成熟的人，有个共同的特点，就是会隐藏自己的情绪。</p><p>​    我之前好像也是会有不开心的就直接怼，不管体不体面，不管场合合适不合适。但是最终自己还是会受伤。所以学会礼貌，学会分场合，学会控制自己的情绪，非常重要。</p><p>​    不过后来学会在人前控制情绪后，我会把我的很多情绪发泄在社交平台上。之前没觉得，现在倒觉得也非常的不合适，应该没有人会喜欢带着负面情绪的人吧。然后我就控制了我的朋友圈的情绪，哈哈哈跑去微博上宣泄了。但是发现微博上也有好多小可爱啊😂，但是如果微博我也控制了，我已不是没地方了。</p><p>​    转念一想，应该每个人都有不开心的时候，都有一些或多或少的负面情绪吧，所以找一个你认为合适，你认为得体的方式去发泄～别让你的负面情绪影响到其他人就行。</p><h1 id="硕士研究生"><a href="#硕士研究生" class="headerlink" title="硕士研究生"></a>硕士研究生</h1><p>​    2019年的6月份就来到南京大学，正式开始了研究生的生活。</p><h2 id="那些科研的日子"><a href="#那些科研的日子" class="headerlink" title="那些科研的日子"></a>那些科研的日子</h2><p>​    我是2019年2月份寒假结束就来到南大实验室进行校外毕设，相当于提前体验研究生生活。但是日子可没那么好过哇，编写嵌入式代码，查各种资料，半知半解的去研究自己的系统。非常累，只想着快点结束毕设回上海去哈哈哈。</p><p>​    正式开始研究生生活就是2019的7月份了，那个暑假的两个月第一次承担科研任务，一开始还是没感觉的，慢慢的做着很多都不是很清楚，知道9月份开始往返公司和学校，让我感觉力不从心，也非常的焦虑。一方面觉得这个任务我一个人完成非常吃力，另一方面每周多次离开学校去公司，错过了课程和打卡。最后就和导师商量解决方法。可惜，发生了很多不开心的事情。然后开始考虑转软件开发了。研一上学期基本上就一事无成了，但是确定了后续转软件的想法了。</p><p>​    2019年底爆发了疫情，2020年初开始长达半年的居家学习了。这段时间除了完成实验室一些莫名其妙的事情，就开始学习我的Java后端技术栈，也是非常的通过的度过。知道2020年6月份入学后，前一届师兄毕业，我接手他的活，自己才正式有了较为明确的研究方向。接着2020年下半年就白天干实验室的事情，晚上学习后端开发，非常的辛苦。这下半年也完成了姿态识别方向的2个系统的设计，第3个系统也开始了一点萌芽。</p><p>​    2021年上半年，继续完成了第3个系统的设计，中间起起伏伏，最后顺利的完成。这段时间也是在进行实习生的面试，也是忙的不可开交。2021年的下半年已经进入研三了，帮实验室干些服务器设计和其他软件开发的活，也写着自己系统相关的论文，另一方面也开始进行秋招！</p><h3 id="正确对待研究生规划"><a href="#正确对待研究生规划" class="headerlink" title="正确对待研究生规划"></a>正确对待研究生规划</h3><p>​    下面是从知乎看到的两首诗，可以看到两种不同的规划和结果。大家自己品。</p><ul><li>科研型</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211215152706821.png" alt="image-20211215152706821" style="zoom:50%;" /><ul><li>事业型</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211215152805726.png" alt="image-20211215152805726" style="zoom:50%;" /><h3 id="正确对待导师态度"><a href="#正确对待导师态度" class="headerlink" title="正确对待导师态度"></a>正确对待导师态度</h3><p>​    如题！！！</p><p>学业方面，现在是2021年12月中旬了，即将进入研三下学期，也是研究生最后半学期了，希望毕业顺利，一切顺利吧～</p><h2 id="关于求职"><a href="#关于求职" class="headerlink" title="关于求职"></a>关于求职</h2><p>​    好家伙，自从决定要开始干软件了，收集起资料开始干！</p><h3 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程"></a>准备过程</h3><p>​    我可“<strong>不打无准备的仗</strong>”！</p><ul><li><p>开端</p><p>我应该是2019年的那个国庆节，在b站上把java入门看完了，算是准备的一个开端吧。后面2个月因为实验室的一些事情，好像还看了一些Python的知识，那个时候可能还没确定要干嘛吧。2019年底，买了一本《Java编程思想》开始肯，那个时候和导师不开心，也不去实验室了，天天在图书馆待着啃这本书。</p></li><li><p>系统学习</p><p>2020年寒假过后，应该是2月22号左右。买了一套java后端技术栈视频开始啃。乍一看，这么多！！！果然也是学了2个多月左右。</p><p>四五月份左右买了10几本书开始细看每个技术点，把知识挖深。同时也跟着视频做了点项目，但是大部分不太懂。</p></li><li><p>知识进阶</p><p>在6月份开始，开始把项目自己整合和提升，从零开始，一行一行的写。其中出现很多的bug和知识漏洞也正好就补上了。10月份左右开始写博客了，当时是在简书上，用的富文本格式书写的，那时候还不懂markdown。</p><p>这个时候也开始刷leetcode的题了。</p></li><li><p>面试准备</p><p>2021年过完年后，就开始实习生面试了，面试的很多问题都是自己准备过的，第一次对自己自信了！4月份左右，考虑到简书博客的格式非常固定，开始基于github自己搭建博客，就是现在这个啦！</p></li></ul><p>准备完上述这些就差不多了，然后就每周固定复习博客的知识，按时刷题巩固leetcode题。</p><h3 id="面试经历和offer选择"><a href="#面试经历和offer选择" class="headerlink" title="面试经历和offer选择"></a>面试经历和offer选择</h3><ul><li><p>实习生</p><p>2021年2月份投递的阿里的icbu提前批，当时部门、地点啥的什么也不清楚，也没考虑，先投了再说，然后就开始面试了。面过之后在3月8号左右，阿里实习系统开放前，转投了cbu，很快面了3面就发了实习offer。</p><p>实习生面试主要是给自己增加面试经验、确定自己准备的方向正确。</p></li><li><p>秋招</p><p>投了很多公司，也做了很多笔试。最后成功通过的就是BAM了，当时还发了庆祝的朋友圈。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211215154735989.png" alt="image-20211215154735989" style="zoom:40%;" /></li><li><p>offer选择</p><p>自己的第一意向就是阿里了。</p><ol><li>Java系的殿堂</li><li>后续想往架构师发展，阿里这边技术比较扎实，想在这里打牢基础</li><li>实习生的时候各种原因没有去，这次不想辜负它了</li></ol></li></ul><h1 id="关于家庭教育和学校教育"><a href="#关于家庭教育和学校教育" class="headerlink" title="关于家庭教育和学校教育"></a>关于家庭教育和学校教育</h1><p>​    这个点单独拉出来，是因为对这个的思考结果，才使得我做出很多相关的人生规划。</p><p>​    不过此时，很多话和观点还无法用语言表达。此板块放在这里，已经具有它的意义了。</p><p>​    当读者看到此题时，当你开始思考此题时，想必你已经有你的答案了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算、云原生架构</title>
      <link href="/2021/12/09/yun-ji-suan-yun-yuan-sheng-jia-gou/"/>
      <url>/2021/12/09/yun-ji-suan-yun-yuan-sheng-jia-gou/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考：</p><ul><li><a href="https://www.jianshu.com/p/a37baa7c3eff">什么是云原生</a></li><li><a href="https://zhuanlan.zhihu.com/p/441747471">云原生特点</a></li></ul></blockquote><h1 id="云计算、云原生架构"><a href="#云计算、云原生架构" class="headerlink" title="云计算、云原生架构"></a>云计算、云原生架构</h1><h1 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h1><p>​    关于什么是云服务器，可以拿阿里云服务器ECS来具体说明。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​    云服务器ECS（Elastic Compute Service）是阿里云提供的性能卓越、稳定可靠、弹性扩展的IaaS（Infrastructure as a Service）级别云计算服务。云服务器ECS免去了您采购IT硬件的前期准备，让您像使用水、电、天然气等公共资源一样便捷、高效地使用服务器，实现计算资源的即开即用和弹性伸缩。</p><table><thead><tr><th align="left">概念</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25374.htm#concept-i1k-fv2-5db">ECS实例</a></td><td align="left">等同于一台虚拟服务器，内含CPU、内存、操作系统、网络配置、磁盘等基础的组件。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25378.htm#concept-sx4-lxv-tdb">ECS实例规格</a></td><td align="left">定义了ECS实例在计算性能、存储性能、网络性能等方面的基本属性，但需要同时配合镜像、块存储、网络等配置才能确定一台ECS实例的具体服务形态。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25389.htm#concept-qql-3zb-wdb">镜像</a></td><td align="left">提供了运行实例所需的信息，包括操作系统、初始化应用数据等。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/108393.htm#concept-x4k-22r-wgb">公共镜像</a></td><td align="left">阿里云官方提供的基础镜像，均已获得正版授权，涵盖Windows Server系统镜像和主流的Linux系统镜像。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/212631.htm#concept-2068992">Alibaba Cloud Linux 3</a><a href="https://help.aliyun.com/document_detail/111881.htm#concept-rgv-rvd-2hb">Alibaba Cloud Linux 2</a></td><td align="left">阿里云官方操作系统，为云上应用程序提供安全、稳定、高性能的定制化运行环境，并进行了针对性深度优化，更加适合阿里云基础设施。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/172789.htm#concept-2553000">自定义镜像</a></td><td align="left">您自行创建或导入的镜像，包含了初始系统环境、应用环境、软件配置等信息，可以节省重复配置的时间。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/63136.htm#concept-pl4-tzb-wdb">块存储</a></td><td align="left">高性能、低时延的块设备，像物理硬盘一样分区格式化并创建文件系统后使用，满足大部分通用业务场景下的数据存储需求。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25383.htm#concept-n1s-rzb-wdb">云盘</a></td><td align="left">数据块级别的块存储产品，采用分布式三副本机制，为ECS实例提供99.9999999%的数据可靠性保证。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/63138.htm#concept-g3w-qzv-tdb">本地盘</a></td><td align="left">ECS实例所在物理机上的本地硬盘设备，存储I/O性能、海量存储的性价比极高，但数据可靠性取决于物理机的可靠性，存在单点故障风险。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25391.htm#concept-qft-2zw-ydb">快照</a></td><td align="left">某一时间点云盘数据状态的备份文件，用于备份或者恢复整个云盘。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25387.htm#concept-o2y-mqw-ydb">安全组</a></td><td align="left">一种虚拟防火墙，您可以基于安全组控制实例的入流量和出流量。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/51792.htm#concept-j33-vqw-ydb">SSH密钥对</a></td><td align="left">一种安全便捷的登录认证方式，由公钥和私钥组成，仅支持Linux实例。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/54235.htm#concept-kbp-r1t-xdb">实例RAM角色</a></td><td align="left">ECS实例通过实例RAM角色获得该角色拥有的权限，可以基于临时安全令牌STS（Security Token Service）访问指定云服务的API和操作指定的云资源，安全性更高。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/34217.htm#concept-kbk-cpz-ndb">专有网络</a></td><td align="left">您基于阿里云创建的自定义私有网络，不同专有网络之间通过隧道在逻辑上彻底隔离。您可以完全掌控自己的专有网络，例如选择IP地址范围、配置路由表和网关等。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/58496.htm#concept-xzg-mgt-xdb">弹性网卡</a></td><td align="left">一种独立的虚拟网卡，可以绑定到ECS实例或从ECS实例解绑，实现业务的灵活扩展和迁移。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/73916.htm#concept-fbp-sy5-xdb">实例启动模板</a></td><td align="left">包含了ECS实例的配置信息，使用实例启动模板创建ECS实例可以免去重复配置的操作。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/91258.htm#concept-1846521">部署集</a></td><td align="left">部署集支持高可用策略，部署集内实例会严格分散在不同的物理服务器上，保证业务的高可用性和底层容灾能力。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/68563.htm#concept-yqx-czm-tdb">专有宿主机</a></td><td align="left">一台由单租户独享物理资源的云主机，具有满足严格的安全合规要求、允许自带许可证（BYOL）上云等优势。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/120020.htm#concept-287169">弹性供应组</a></td><td align="left">用于快速部署多可用区、多实例规格的ECS实例集群，通过多种供应策略组合使用抢占式实例和按量付费实例，满足对低成本和高稳定性的要求。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/25477.htm#concept-jzp-qtd-zdb">标签</a></td><td align="left">由一对键值（Key-Value）组成。使用标签标识具有相同特征的资源后，例如所属组织或用途相同的资源，您可以基于标签方便地检索和管理资源。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/100034.htm#concept-fdn-wtm-cgb">资源组</a></td><td align="left">供您从业务角度管理跨地域、跨产品的资源，并支持针对资源组的权限管理。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/64601.htm#concept-qg3-5dx-ydb">云助手</a></td><td align="left">阿里云提供的自动化运维工具，无需登录即可完成在ECS实例上执行命令、向ECS实例发送文件等操作。</td></tr><tr><td align="left"><a href="https://help.aliyun.com/document_detail/66574.htm#concept-gdc-tyz-xdb">系统事件</a></td><td align="left">影响ECS实例运行状态的计划底层运维事件或非预期维修事件，需要进行重启、停止或释放ECS实例等操作。系统事件会及时发送通知、应对措施和事件周期等信息，方便您提前完成备份数据等准备工作。</td></tr></tbody></table><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>云服务器ECS主要包含以下功能组件：</p><ul><li><a href="https://help.aliyun.com/document_detail/25374.htm#concept-i1k-fv2-5db">实例</a>：等同于一台虚拟服务器，内含CPU、内存、操作系统、网络配置、磁盘等基础的组件。实例的计算性能、内存性能和适用业务场景由实例规格决定，其具体性能指标包括实例vCPU核数、内存大小、网络性能等。</li><li><a href="https://help.aliyun.com/document_detail/25389.htm#concept-qql-3zb-wdb">镜像</a>：提供实例的操作系统、初始化应用数据及预装的软件。操作系统支持多种Linux发行版和多种Windows Server版本。</li><li><a href="https://help.aliyun.com/document_detail/63136.htm#concept-pl4-tzb-wdb">块存储</a>：块设备类型产品，具备高性能和低时延的特性。提供基于分布式存储架构的云盘以及基于物理机本地存储的本地盘。</li><li><a href="https://help.aliyun.com/document_detail/25391.htm#concept-qft-2zw-ydb">快照</a>：某一时间点一块云盘的数据状态文件。常用于数据备份、数据恢复和制作自定义镜像等。</li><li><a href="https://help.aliyun.com/document_detail/25387.htm#concept-o2y-mqw-ydb">安全组</a>：由同一地域内具有相同保护需求并相互信任的实例组成，是一种虚拟防火墙，用于设置实例的网络访问控制。</li><li><a href="https://help.aliyun.com/document_detail/61651.htm#concept-nfj-dz2-5db">网络</a><ul><li><a href="https://help.aliyun.com/document_detail/34217.htm#concept-kbk-cpz-ndb">专有网络（Virtual Private Cloud）</a>：逻辑上彻底隔离的云上私有网络。您可以自行分配私网IP地址范围、配置路由表和网关等。</li><li>经典网络：所有经典网络类型实例都建立在一个共用的基础网络上。由阿里云统一规划和管理网络配置</li></ul></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/p85840.png" alt="WhatIsEcs-Orange-Renminbi"></p><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><p>每个地域完全独立。每个可用区完全隔离，但同一个地域内的可用区之间使用低时延链路相连。</p><p>地域和可用区之间的关系如下图所示。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/p144045.png" alt="地域"></p><h2 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h2><p>​    这两天第一次接触云服务器，目前的理解有点像第三方（阿里等机构）提供和托管等虚拟机，购买时选择机器的一些参数。剩下的和在本地用WM等工具部署虚拟机比较类似。</p><h1 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li><p><strong>云计算</strong>：美国国家标准与技术研究院（NIST）的定义：云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络访问，进入可配置的计算资源共享池（包括网络、服务器、存储、应用软件以及服务），这些资源能够被快速提供。</p></li><li><p>从根本上来说，云计算是一种服务，是一种商业模式，而云计算技术只是实现云计算的手段。多年前，有一家软件公司试图采用这种模式，用户并非购买软件，而是以租用方式拥有对软件的使用权；如果在租用期间软件升级，用户使用新软件而不必增加费用；而等租期一到，用户也就不能再继续使用，这家公司叫SAS。</p></li><li><p>云计算的云端系统， 其实质上就是一个大型的分布式系统。</p></li></ul><h2 id="分层与模式"><a href="#分层与模式" class="headerlink" title="分层与模式"></a>分层与模式</h2><p>云计算的三个分层：<strong>基础设施(infrastructure)、平台(platform)和软件(software)</strong></p><p>基础设施在最下端，平台在中间，软件在顶端，分别是分别是Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软”的层可以在这些层上面添加。</p><p>简单点理解，比如几年前如果你想在办公室或者公司的网站上运行一些企业应用，你需要去买服务器，或者别的高昂的硬件来控制本地应用，让你的业务运行起来，这就叫本地部署。云服务供应商出现能够实现云服务。</p><p><strong>IaaS:</strong> Infrastructure-as-a-Service(基础设施即服务)：有了IaaS，你可以将硬件外包到别的地方去。IaaS公司会提供场外服务器，存储和网络硬件，你可以租用。节省了维护成本和办公场地，公司可以在任何时候利用这些硬件来运行其应用。一些大的IaaS公司包括Amazon, Microsoft, VMWare, Rackspace和Red Hat.不过这些公司又都有自己的专长，比如Amazon和微软给你提供的不只是IaaS，他们还会将其计算能力出租给你来host你的网站。</p><p><strong>PaaS:</strong> Platform-as-a-Service(平台即服务)：第二层就是所谓的PaaS，某些时候也叫做中间件。所有的开发都可以在这一层进行，节省了时间和资源。</p><p><strong>SaaS:</strong> Software-as-a-Service(软件即服务)：第三层也就是所谓SaaS。这一层是和你的生活每天接触的一层，大多是通过网页浏览器来接入。任何一个远程服务器上的应用都可以通过网络来运行，就是SaaS了。你消费的服务完全是从网页如Netflix,MOG,Google Apps,Box.net,Dropbox或者苹果的iCloud那里进入这些分类。尽管这些网页服务是用作商务和娱乐或者两者都有，但这也算是云技术的一部分。一些用作商务的SaaS应用包括Citrix的Go To Meeting，Cisco的WebEx，Salesforce的CRM，ADP，Workday和SuccessFactors。</p><h2 id="技术思维导图"><a href="#技术思维导图" class="headerlink" title="技术思维导图"></a>技术思维导图</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/ed4c7451792d20a99301847a46faeef1.png" alt="img"></p><h1 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>云原生从字面意思上来看可以分成<strong>云</strong>和<strong>原生</strong>两个部分。</p><p>云是和本地相对的，传统的应用必须跑在本地服务器上，现在流行的应用都跑在云端，云包含了IaaS,、PaaS和SaaS。</p><p>原生就是土生土长的意思，我们在开始设计应用的时候就考虑到应用将来是运行云环境里面的，要充分利用云资源的优点，比如️云服务的<strong>弹性</strong>和<strong>分布式</strong>优势。</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>目前CNCF给出了云原生应用的三大特征：</p><ul><li><a href="https://www.zhihu.com/search?q=%E5%AE%B9%E5%99%A8%E5%8C%96%E5%B0%81%E8%A3%85&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:441747471%7D">容器化封装</a>：以容器为基础，提高整体开发水平，形成代码和组件重用，简化云原生应用程序的维护。在容器中运行应用程序和进程，并作为应用程序部署的独立单元，实现高水平资源隔离</li><li>动态管理：通过集中式的编排调度系统来动态的管理和调度。</li><li>面向微服务：明确服务间的依赖，互相解耦。</li></ul><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><img src="https://upload-images.jianshu.io/upload_images/2220386-2c06a6c6d3ecdcf5.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/1200" alt="img" style="zoom:60%;" /><ul><li><p><strong>微服务</strong><br>微服务解决的是我们软件开发中一直追求的<strong>低耦合+高内聚</strong>，记得有一次我们系统的接口出了问题，结果影响了用户的前台操作，于是黎叔拍案而起，灵魂发问：“为啥这两个会互相影响？！”</p><p>微服务可以解决这个问题，微服务的本质是把一块大饼分成若干块低耦合的小饼，比如一块小饼专门负责接收外部的数据，一块小饼专门负责响应前台的操作，小饼可以进一步拆分，比如负责接收外部数据的小饼可以继续分成多块负责接收不同类型数据的小饼，这样每个小饼出问题了，其它小饼还能正常对外提供服务。</p></li><li><p><strong>DevOps</strong><br>DevOps的意思就是<strong>开发和运维</strong>不再是分开的两个团队，而是你中有我，我中有你的一个团队。我们现在开发和运维已经是一个团队了，但是运维方面的知识和经验还需要持续提高。</p></li><li><p><strong>持续交付</strong><br>持续交付的意思就是在不影响用户使用服务的前提下频繁把新功能发布给用户使用，要做到这点非常非常难。我们现在两周一个版本，每次上线之后都会给不同的用户造成不同程度的影响。</p></li><li><p><strong>容器化</strong><br>容器化的好处在于运维的时候不需要再关心每个服务所使用的技术栈了，每个服务都被无差别地封装在容器里，可以被无差别地管理和维护，现在比较流行的工具是docker和k8s。</p></li></ul><p>所以可以简单地把云原生理解为：<strong>云原生 = 微服务 + DevOps + 持续交付 + 容器化</strong></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装JDK和运行jar包</title>
      <link href="/2021/12/08/linux-an-zhuang-jdk-he-yun-xing-jar-bao/"/>
      <url>/2021/12/08/linux-an-zhuang-jdk-he-yun-xing-jar-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装JDK"><a href="#Linux安装JDK" class="headerlink" title="Linux安装JDK"></a>Linux安装JDK</h1><ol><li><p>查看有无系统自带jdk </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> -qa <span class="token operator">|</span><span class="token function">grep</span> java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有可以进行批量卸载</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">grep</span> java <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rpm</span> -e --nodeps <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询yum可用的jdk版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum list java*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装jkd1.8</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> java-1.8.0-openjdk* -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证是否安装成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前java版本和安装位置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alternatives --config java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">.</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="Linux后台运行Jar包"><a href="#Linux后台运行Jar包" class="headerlink" title="Linux后台运行Jar包"></a>Linux后台运行Jar包</h1><ol><li><p>查看防火墙是否开放了jar包运行端口</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">firewall-cmd --zone<span class="token operator">=</span>public --list-ports—查看开放端口firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8081</span>/tcp --permanent--开放firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">8081</span>/tcp --permanent--关闭firewall-cmd --reload --刷新配置systemctl stop firewalld.service  --关闭防火墙<span class="token punctuation">(</span>安全隐患<span class="token punctuation">)</span>firewall-cmd --state --查看防火墙状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>开放端口后，一定要使用<code>firewall-cmd --reload</code>命令刷新配置才能生效</strong></p></li><li><p>查看当前java进程，如果之前启动过可以先关闭进程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> java <span class="token comment">#查看java相关进程</span><span class="token function">kill</span> -9 PID <span class="token comment">#关闭Jar包进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>后台启动Jar包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nohup</span> java -jar jarName-0.0.1-SNAPSHOT.jar <span class="token operator">></span>msg.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云部署Web项目体验</title>
      <link href="/2021/12/08/a-li-yun-bu-shu-web-xiang-mu-ti-yan/"/>
      <url>/2021/12/08/a-li-yun-bu-shu-web-xiang-mu-ti-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云部署Web项目体验"><a href="#阿里云部署Web项目体验" class="headerlink" title="阿里云部署Web项目体验"></a>阿里云部署Web项目体验</h1><p>​    这里使用阿里云ECS进行项目部署实验，这里没有进行实例购买，用的是“阿里云试用中心-开发者试用场景-搭建Java Web开发环境“进行实验。最终通过例程的云环境下，通过docker部署nginx进行页面访问实验。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211208132329972.png" alt="image-20211208132329972"></p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211208132424743.png" alt="image-20211208132424743" style="zoom:50%;" /><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><ol><li><p>查询yum可用的jdk版本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum list java*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装jkd1.8</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> java-1.8.0-openjdk* -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证是否安装成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前java版本和安装位置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alternatives --config java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置环境变量</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">.</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><ol><li><p>执行以下命令，下载并安装MySQL官方的Yum Repository</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">wget</span> http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm yum -y <span class="token function">install</span> mysql57-community-release-el7-10.noarch.rpm yum -y <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行以下命令，启动 MySQL 数据库。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行以下命令，查看MySQL初始密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> <span class="token string">"password"</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行以下命令，输入上条命令中MySQL的初始密码，登录数据库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行以下命令，修改MySQL默认密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_policy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">#修改密码安全策略为低（只校验密码长度，至少8位）。</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'12345678'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>执行以下命令，授予root用户远程管理权限。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'12345678'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入exit退出数据库</p></li></ol><h1 id="安装Docker并部署Nginx"><a href="#安装Docker并部署Nginx" class="headerlink" title="安装Docker并部署Nginx"></a>安装Docker并部署Nginx</h1><p>参看博客<a href="https://jason-qianhao.github.io/_posts/2021-11-30-Dokcer%E9%87%8D%E7%82%B9%E6%A6%82%E5%BF%B5-%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2Nginx%E5%AE%9E%E8%B7%B5/">Dokcer重点概念-安装和部署Nginx实践</a></p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>​    Nginx的index.html页面内容为“text aliyun!”，创建的环境提供了服务器的公网ip，在其80端口测试即可。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211208122702913.png" alt="image-20211208122702913" style="zoom:75%;" /><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211208122745179.png" alt="image-20211208122745179"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 云服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S初探</title>
      <link href="/2021/12/03/k8s-chu-tan/"/>
      <url>/2021/12/03/k8s-chu-tan/</url>
      
        <content type="html"><![CDATA[<h1 id="K8S初探"><a href="#K8S初探" class="headerlink" title="K8S初探"></a>K8S初探</h1><blockquote><p>参考文献：</p><ul><li>官网<a href="https://kubernetes.io/zh/docs/concepts/overview/components/">https://kubernetes.io/zh/docs/concepts/overview/components/</a></li><li>概念<a href="http://www.dockone.io/article/932">http://www.dockone.io/article/932</a></li><li>入门<a href="https://www.infoq.cn/article/knmavdo3jxs3qpkqtzbw">https://www.infoq.cn/article/knmavdo3jxs3qpkqtzbw</a></li></ul></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Kubernetes（k8s）是自动化容器操作的开源平台，这些操作包括部署，调度和节点集群间扩展。如果你曾经用过Docker容器技术部署容器，那么可以将Docker看成Kubernetes内部使用的低级别组件。Kubernetes不仅仅支持Docker，还支持Rocket，这是另一种容器技术。<br>使用Kubernetes可以：</p><ul><li>自动化容器的部署和复制 </li><li>随时扩展或收缩容器规模 </li><li>将容器组织成组，并且提供容器间的负载均衡 </li><li>很容易地升级应用程序容器的新版本 </li><li>提供容器弹性，如果容器失效就替换它，等等</li></ul><p>总体架构如下：</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203141857718.png" alt="image-20211203141857718" style="zoom:50%;" /><h1 id="核心能力"><a href="#核心能力" class="headerlink" title="核心能力"></a>核心能力</h1><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>Kubernetes 可以把用户提交的容器放到 Kubernetes 管理的集群的某一台节点上去。Kubernetes 的调度器是执行这项能力的组件，它会观察正在被调度的这个容器的大小、规格。</p><p>比如说它所需要的 CPU 以及它所需要的 memory，然后在集群中找一台相对比较空闲的机器来进行一次 placement，也就是一次放置的操作。在这个例子中，它可能会把红颜色的这个容器放置到第二个空闲的机器上，来完成一次调度的工作。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203142056803.png" alt="image-20211203142056803" style="zoom:50%;" /><h2 id="自动修复"><a href="#自动修复" class="headerlink" title="自动修复"></a>自动修复</h2><p>Kubernetes 有一个节点健康检查的功能，它会监测这个集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。</p><p>下面 Kubernetes 会把运行在这些失败节点上的容器进行自动迁移，迁移到一个正在健康运行的宿主机上，来完成集群内容器的一个自动恢复。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203142158418.png" alt="image-20211203142158418" style="zoom:50%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203142227614.png" alt="image-20211203142227614" style="zoom:50%;" /><h2 id="水平伸缩"><a href="#水平伸缩" class="headerlink" title="水平伸缩"></a>水平伸缩</h2><p>Kubernetes 有业务负载检查的能力，它会监测业务上所承担的负载，如果这个业务本身的 CPU 利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容。</p><p>比如说在下面的例子中，黄颜色的过度忙碌，Kubernetes 就可以把黄颜色负载从一份变为三份。接下来，它就可以通过负载均衡把原来打到第一个黄颜色上的负载平均分到三个黄颜色的负载上去，以此来提高响应的时间。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203142329386.png" alt="image-20211203142329386" style="zoom:50%;" /><img src="/Users/qianhao/Library/Application Support/typora-user-images/image-20211203142347507.png" alt="image-20211203142347507" style="zoom:50%;" /><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。</p><p>所有 UI 的、clients、这些 user 侧的组件，只会和 Master 进行连接，把希望的状态或者想执行的命令下发给 Master，Master 会把这些命令或者状态下发给相应的节点，进行最终的执行。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203142604463.png" alt="image-20211203142604463" style="zoom:50%;" /><h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203142630681.png" alt="image-20211203142630681" style="zoom:50%;" /><ul><li><p><strong>API Server：</strong>顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；</p><ul><li><p>Kubernetes 的 kubectl 也就是 command tool，Kubernetes UI，或者有时候用 curl，直接与 Kubernetes 进行沟通，都是使用 HTTP + JSON 这种形式。</p></li><li><p>比如说，对于这个 Pod 类型的资源，它的 HTTP 访问的路径，就是 API，然后是 apiVesion: V1, 之后是相应的 Namespaces，以及 Pods 资源，最终是 Podname，也就是 Pod 的名字。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203145115890.png" alt="image-20211203145115890" style="zoom:50%;" /></li></ul></li><li><p><strong>Controller：</strong>是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的；</p></li><li><p><strong>Scheduler：</strong>是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置；</p></li><li><p><strong>etcd：</strong>是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。</p></li></ul><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Kubernetes 的 Node 是真正运行业务负载的，每个业务负载会以 Pod 的形式运行。等一下我会介绍一下 Pod 的概念。一个 Pod 中运行的一个或者多个容器，真正去运行这些 Pod 的组件的是叫做 <strong>kubelet</strong>，也就是 Node 上最为关键的组件，它通过 API Server 接收到所需要 Pod 运行的状态，然后提交到我们下面画的这个 Container Runtime 组件中。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203143016529.png" alt="image-20211203143016529" style="zoom:50%;" /><p>在 OS 上去创建容器所需要运行的环境，最终把容器或者 Pod 运行起来，也需要对存储跟网络进行管理。Kubernetes 并不会直接进行网络存储的操作，他们会靠 Storage Plugin 或者是网络的 Plugin 来进行操作。用户自己或者云厂商都会去写相应的 <strong>Storage Plugin</strong> 或者 <strong>Network Plugin</strong>，去完成存储操作或网络操作。</p><p>在 Kubernetes 自己的环境中，也会有 Kubernetes 的 Network，它是为了提供 Service network 来进行搭网组网的。（等一下我们也会去介绍“service”这个概念。）真正完成 service 组网的组件的是 <strong>Kube-proxy</strong>，它是利用了 iptable 的能力来进行组建 Kubernetes 的 Network，就是 cluster network.</p><p>Kubernetes 的 Node 并不会直接和 user 进行 interaction，它的 interaction 只会通过 Master。而 User 是通过 Master 向节点下发这些信息的。Kubernetes 每个 Node 上，都会运行我们刚才提到的这几个组件。</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 是 Kubernetes 的一个最小调度以及资源单元。用户可以通过 Kubernetes 的 Pod API 生产一个 Pod，让 Kubernetes 对这个 Pod 进行调度，也就是把它放在某一个 Kubernetes 管理的节点上运行起来。<strong>一个 Pod 简单来说是对一组容器的抽象，它里面会包含一个或多个容器。</strong></p><p>比如像下面的这幅图里面，它包含了两个容器，每个容器可以指定它所需要资源大小。比如说，一个核一个 G，或者说 0.5 个核，0.5 个 G。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203143841442.png" alt="image-20211203143841442" style="zoom:50%;" /><p>当然在这个 Pod 中也可以包含一些其他所需要的资源：比如说我们所看到的 Volume 卷这个存储资源；比如说我们需要 100 个 GB 的存储或者 20GB 的另外一个存储。</p><p>在 Pod 里面，我们也可以去定义容器所需要运行的方式。比如说运行容器的 Command，以及运行容器的环境变量等等。Pod 这个抽象也给这些容器提供了一个<strong>共享的运行环境（ex：进程空间），它们会共享同一个网络环境</strong>，这些容器可以用 localhost 来进行直接的连接。而 Pod 与 Pod 之间，是互相有 isolation 隔离的。</p><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><p>一些Pod有Label。一个Label是attach到Pod的一对键/值对，用来传递用户定义的属性。比如，你可能创建了一个”tier”和“app”标签，通过Label（<strong>tier=frontend, app=myapp</strong>）来标记前端Pod容器，使用Label（<strong>tier=backend, app=myapp</strong>）标记后台Pod。然后可以使用<a href="http://kubernetes.io/v1.1/docs/user-guide/labels.html#label-selectors">Selectors</a>选择带有特定Label的Pod，并且将Service或者Controller应用到上面。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Deployment 是在 Pod 这个抽象上更为上层的一个抽象，它可以定义一组 Pod 的副本数目、以及这个 Pod 的版本。<strong>一般大家用 Deployment 这个抽象来做应用的真正的管理</strong>，而 Pod 是组成 Deployment 最小的单元。</p><p>Kubernetes 是通过 Controller，也就是我们刚才提到的控制器去维护 Deployment 中 Pod 的数目，它也会去帮助 Deployment 自动恢复失败的 Pod。</p><p>比如说我可以定义一个 Deployment，这个 Deployment 里面需要两个 Pod，当一个 Pod 失败的时候，控制器就会监测到，它重新把 Deployment 中的 Pod 数目从一个恢复到两个，通过再去新生成一个 Pod。通过控制器，我们也会帮助完成发布的策略。比如说进行滚动升级，进行重新生成的升级，或者进行版本的回滚。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203144313925.png" alt="image-20211203144313925" style="zoom:50%;" /><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>Service 提供了一个或者多个 Pod 实例的稳定访问地址。</p><p>比如在上面的例子中，我们看到：一个 Deployment 可能有两个甚至更多个完全相同的 Pod。对于一个外部的用户来讲，访问哪个 Pod 其实都是一样的，所以它希望做一次负载均衡，在做负载均衡的同时，我只想访问某一个固定的 VIP，也就是 Virtual IP 地址，而不希望得知每一个具体的 Pod 的 IP 地址。</p><p>我们刚才提到，这个 pod 本身可能 terminal go（终止），如果一个 Pod 失败了，可能会换成另外一个新的。对一个外部用户来讲，提供了多个具体的 Pod 地址，这个用户要不停地去更新 Pod 地址，当这个 Pod 再失败重启之后，我们希望有一个抽象，把所有 Pod 的访问能力抽象成一个第三方的一个 IP 地址，实现这个的 Kubernetes 的抽象就叫 Service。</p><p>实现 Service 有多种方式，Kubernetes 支持 <strong>Cluster IP</strong>，上面我们讲过的**kuber-proxy 的组网，它也支持 nodePort、 LoadBalancer **等其他的一些访问的能力。</p><p>假定有2个后台Pod，并且定义后台Service的名称为‘backend-service’，lable选择器为（<strong>tier=backend, app=myapp</strong>）。<em>backend-service</em> 的Service会完成如下两件重要的事情：</p><ul><li>会为Service创建一个本地集群的DNS入口，因此前端Pod只需要DNS查找主机名为 ‘backend-service’，就能够解析出前端应用程序可用的IP地址。</li><li>现在前端已经得到了后台服务的IP地址，但是它应该访问2个后台Pod的哪一个呢？Service在这2个后台Pod之间提供透明的负载均衡，会将请求分发给其中的任意一个（如下面的动画所示）。通过每个Node上运行的代理（kube-proxy）完成.</li></ul><p><img src="http://dockone.io/uploads/article/20190625/e7a273fcdc03d2417b354b60c253552f.gif" alt="3.gif"></p><h1 id="通信流程示例"><a href="#通信流程示例" class="headerlink" title="通信流程示例"></a>通信流程示例</h1><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211203143614305.png" alt="image-20211203143614305" style="zoom:50%;" /><p>用户可以通过 UI 或者 CLI 提交一个 Pod 给 Kubernetes 进行部署，这个 Pod 请求首先会通过 CLI 或者 UI 提交给 Kubernetes API Server，下一步 API Server 会把这个信息写入到它的存储系统 etcd，之后 Scheduler 会通过 API Server 的 watch 或者叫做 notification 机制得到这个信息：有一个 Pod 需要被调度。</p><p>这个时候 Scheduler 会根据它的内存状态进行一次调度决策，在完成这次调度之后，它会向 API Server report 说：“OK！这个 Pod 需要被调度到某一个节点上。”</p><p>这个时候 API Server 接收到这次操作之后，会把这次的结果再次写到 etcd 中，然后 API Server 会通知相应的节点进行这次 Pod 真正的执行启动。相应节点的 kubelet 会得到这个通知，kubelet 就会去调 Container runtime 来真正去启动配置这个容器和这个容器的运行环境，去调度 Storage Plugin 来去配置存储，network Plugin 去配置网络。</p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些小思考合集</title>
      <link href="/2021/12/01/yi-xie-xiao-si-kao-he-ji/"/>
      <url>/2021/12/01/yi-xie-xiao-si-kao-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="怎样学习一个新知识"><a href="#怎样学习一个新知识" class="headerlink" title="怎样学习一个新知识"></a>怎样学习一个新知识</h1><p>​    今天在看阮一峰博客周刊的时候，看见了对学习时”是看视频还是读书“学习的方式好“的讨论。想起我在学习整个后端知识栈的时候，都是<strong>先看视频进行入门，过程中查阅博客和资料，最后看专业书籍进行深度了解</strong>。</p><p>​    一上来就看书，太多专业的词汇，专业的知识点，一头雾水，而且很快就会让人觉得无聊、烦躁而放弃学习。视频就通过讲解的方式，让你更好的感受和明白。就像阮一峰在周刊中提到的：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211201164036884.png" alt="image-20211201164036884"></p><h1 id="备份的重要性"><a href="#备份的重要性" class="headerlink" title="备份的重要性"></a>备份的重要性</h1><p>​    现在无论是网盘、手机备忘录、电脑硬盘还是移动硬盘，都可以进行信息的存储，但安全性和稳定性都需要关注。还有就是记录的地方太多，会显得很凌乱，平时就也不会再去看它。</p><p>​    这两天我也是很纠结这个问题，后来综合考虑，我这么处理：</p><blockquote><ul><li>Github blog上进行抒写和发布：</li><li>技术博客和学习经验等分享</li><li>flomo</li><li>笔记功能，日常的会议记录、思考记录等（ 比备忘录正式一点）</li><li>多端复制消息</li><li>一些笔记 ，可以后期整理到博客或者mac本地存储/云盘。</li><li>ios备忘录进行存储:</li><li>个人私密信息等</li><li>check table、个人计划、待完成事项</li><li>临时手写和演示草稿</li><li>关于存储和备份</li><li>github blog、flomo、ios备忘录，定期进行mac本地存储和云端备份。</li><li>一些非重要备份，可以存放到移动硬盘中</li></ul></blockquote><p>​    目前已经把一些视频教程、学术时代的一些东西全部放在硬盘，平时会多端用到的就放阿里云盘，百度云盘暂时清空用来下载一些连接。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dokcer重点概念、安装和部署Nginx实践</title>
      <link href="/2021/11/30/dokcer-chong-dian-gai-nian-an-zhuang-he-bu-shu-nginx-shi-jian/"/>
      <url>/2021/11/30/dokcer-chong-dian-gai-nian-an-zhuang-he-bu-shu-nginx-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Dokcer重点概念、安装和部署Nginx实践"><a href="#Dokcer重点概念、安装和部署Nginx实践" class="headerlink" title="Dokcer重点概念、安装和部署Nginx实践"></a>Dokcer重点概念、安装和部署Nginx实践</h1><h1 id="Docker重点概念"><a href="#Docker重点概念" class="headerlink" title="Docker重点概念"></a>Docker重点概念</h1><p>Docker 包括三个基本概念:</p><ul><li><p><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p></li><li><p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是<strong>面向对象程序设计中的类和实例</strong>一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li><li><p><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</p></li></ul><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><pre class="line-numbers language-none"><code class="language-none">Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变镜像的构建是分层的，不同于ios那样的打包系统，docker的镜像只是一个虚拟的概念，实际上它并不是由一个文件组成的而是由一组文件组成的。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>镜像常见操作：</p><ul><li><p>docker search [镜像名称]：搜索Docker Hub(镜像仓库)上的镜像；</p></li><li><p>docker pull [镜像名称]：从仓库中获取镜像；</p></li><li><p>docker images：列出本地所有的镜像（非隐藏，可以加入-a参数显示所有)；</p></li><li><p>docker build：通过 Dockerfile build 出镜像；</p></li><li><p>docker commit：将容器中的所有改动生成新的镜像；</p></li><li><p>docker history：查看镜像的历史；</p></li><li><p>docker save：将镜像保存成 tar 包；</p></li><li><p>docker import：通过 tar 包导入新的镜像；</p></li><li><p>docker load：通过 tar 包或者标志输入导入镜像；</p></li><li><p>docker rmi：删除本地镜像；</p></li><li><p>docker tag：给镜像打 tag</p></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><pre class="line-numbers language-none"><code class="language-none">Docker 利用容器来运行应用。容器是从镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。镜像（ Image ）和容器（ Container ）的关系，就像是面向对象程序设计中的 类 和 实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为&quot;容器存储层&quot;。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器常见操作：</p><ul><li><p>docker run [OPTIONS] IMAGE [COMMAND] [ARG…]：利用镜像创建并启动一个容器</p><ul><li><p>常用参数：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--interactive 等同于 -i ，接受 stdin 的输入，（即使没有连接，也要保持STDIN打开）--tty 等同于 -t，分配一个 tty,也就是分配虚拟终端，一般和 i 一起使用；--name 给容器设置一个名字，如果没有指定将会随机产生一个名称-d, --detach       在后台运行容器并打印出容器ID <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>demo</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run --name nginx-test -p 8080:80 -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>docker exec -it containerID /bin/bash：以bash方式进入容器</p></li><li><p>docker container start/stop/restart：启动/停止/重启停止状态下的容器</p></li><li><p>docker rm [容器名称]/[容器ID] ：删除已关闭的容器</p></li><li><p>docker inspect [容器id]：查看容器全部信息</p></li><li><p>docker container ls -a / docker ps -a：查看所有已经创建的包括终止状态的容器</p></li></ul><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><pre class="line-numbers language-none"><code class="language-none">镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库（ Repository ）；每个仓库可以包含多个标签（ Tag ）仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。docker官方镜像仓库：https:&#x2F;&#x2F;hub.docker.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仓库常见操作：</p><ul><li>docker login: 登录镜像仓库；</li><li>docker logout: 登出镜像仓库；</li><li>docker pull: 从镜像仓库拉取镜像 ；</li><li>docker push: 向镜像仓库 push 镜像，需要先 login。</li></ul><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>Docker 底层的核心技术包括 Linux 上的命名空间（Namespaces）、控制组（Control groups）、Union 文件系统（Union file systems）和容器格式（Container format）。</p><p>我们知道，传统的虚拟机通过在宿主主机中运行 hypervisor 来模拟一整套完整的硬件环境提供给虚拟机的操作系统。虚拟机系统看到的环境是可限制的，也是彼此隔离的。 这种直接的做法实现了对资源最完整的封装，但很多时候往往意味着系统资源的浪费。 例如，以宿主机和虚拟机系统都为 Linux 系统为例，虚拟机中运行的应用其实可以利用宿主机系统中的运行环境。</p><p>我们知道，在操作系统中，包括内核、文件系统、网络、PID、UID、IPC、内存、硬盘、CPU 等等，所有的资源都是应用进程直接共享的。 要想实现虚拟化，除了要实现对内存、CPU、网络IO、硬盘IO、存储空间等的限制外，还要实现文件系统、网络、PID、UID、IPC等等的相互隔离。 前者相对容易实现一些，后者则需要宿主机系统的深入支持。</p><p>随着 Linux 系统对于命名空间功能的完善实现，程序员已经可以实现上面的所有需求，让某些进程在彼此隔离的命名空间中运行。大家虽然都共用一个内核和某些运行时环境（例如一些系统命令和系统库），但是彼此却看不到，都以为系统中只有自己的存在。这种机制就是容器（Container），利用命名空间来做权限的隔离控制，利用 cgroups 来做资源分配。</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>Linux 内核中提供了 6 中隔离支持，分别是：IPC 隔离、网络隔离、挂载点隔离、进程编号隔离、用户和用户组隔离、主机名和域名隔离。</p><table><thead><tr><th align="left">Namespace</th><th align="left">flag</th><th align="left">隔离内容</th></tr></thead><tbody><tr><td align="left">IPC</td><td align="left">CLONE_NEWIPC</td><td align="left">IPC（信号量、消息队列和共享内存等）隔离</td></tr><tr><td align="left">Network</td><td align="left">CLONE_NEWNET</td><td align="left">网络隔离（网络栈、端口等）</td></tr><tr><td align="left">Mount</td><td align="left">CLONE_NEWNS</td><td align="left">挂载点（文件系统）</td></tr><tr><td align="left">PID</td><td align="left">CLONE_NEWPID</td><td align="left">进程编号</td></tr><tr><td align="left">User</td><td align="left">CLONE_NEWUSER</td><td align="left">用户和用户组</td></tr><tr><td align="left">UTS</td><td align="left">CLONE_NEWUTS</td><td align="left">主机名和域名</td></tr></tbody></table><h3 id="控制组"><a href="#控制组" class="headerlink" title="控制组"></a>控制组</h3><p>控制组是 Linux 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。</p><p>CGroups 中有几个重要概念：</p><ul><li><strong>cgroup</strong>：通过 CGroups 系统进行限制的一组进程。CGroups 中的资源限制都是以进程组为单位实现的，一个进程可以加入到某个进程组，从而受到相同的资源限制。</li><li><strong>task</strong>：在 CGroups 中，task 可以理解为一个进程。</li><li><strong>hierarchy</strong>：可以理解成层级关系，CGroups 的组织关系就是层级的形式，每个节点都是一个 cgroup。cgroup 可以有多个子节点，子节点默认继承父节点的属性。</li><li><strong>subsystem</strong>：更准确的表述应该是 ***resource controllers***，也就是资源控制器，比如 cpu 子系统负责控制 cpu 时间的分配。子系统必须应用（attach）到一个 hierarchy 上才能起作用。</li></ul><p>其中最核心的是 ***subsystem***，CGroups 目前支持的 *<strong>subsystem*</strong> 包括：</p><ul><li><strong>cpu</strong>：限制进程的 cpu 使用率；</li><li><strong>cpuacct</strong>：统计 CGroups 中的进程的 cpu 使用情况；</li><li><strong>cpuset</strong>：为 CGroups 中的进程分配单独的 cpu 节点或者内存节点；</li><li><strong>memory</strong>：限制进程的内存使用；</li><li><strong>devices</strong>：可以控制进程能够访问哪些设备；</li><li><strong>blkio</strong>：限制进程的块设备 IO；</li><li><strong>freezer</strong>：挂起或者恢复 CGroups 中的进程；</li><li><strong>net_cls</strong>：标记进程的网络数据包，然后可以使用防火墙或者 tc 模块（traffic controller）控制该数据包。这个控制器只适用从该 cgroup 离开的网络包，不适用到达该 cgroup 的网络包；</li><li><strong>ns</strong>：将不同 CGroups 下面的进程应用不同的 namespace；</li><li><strong>perf_event</strong>：监控 CGroups 中的进程的 perf 事件（注：perf 是 Linux 系统中的性能调优工具）；</li><li><strong>pids</strong>：限制一个 cgroup 以及它的子节点中可以创建的进程数目；</li><li><strong>rdma</strong>：限制 cgroup 中可以使用的 RDMA 资源。</li></ul><h3 id="联合文件系统"><a href="#联合文件系统" class="headerlink" title="联合文件系统"></a>联合文件系统</h3><ul><li><p>联合文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。</p></li><li><p>联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p></li><li><p>Docker 目前支持的联合文件系统包括 <code>OverlayFS</code>, <code>AUFS</code>, <code>Btrfs</code>, <code>VFS</code>, <code>ZFS</code> 和 <code>Device Mapper</code>。</p></li><li><p><code>overlay2</code> 是目前 Docker 默认的存储驱动，以前则是 <code>aufs</code></p></li></ul><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>想要在 Docker 容器停止之后创建的文件依旧存在，也就是将文件在宿主机上保存。那么有两种方式：<strong>volumes</strong>、<strong>bind mounts</strong>。</p><h4 id="数据卷volumes"><a href="#数据卷volumes" class="headerlink" title="数据卷volumes"></a>数据卷volumes</h4><pre class="line-numbers language-none"><code class="language-none">数据卷 可以在容器之间共享和重用对 数据卷 的修改会立马生效对 数据卷 的更新，不会影响镜像数据卷 默认会一直存在，即使容器被删除Volumes 会把文件存储到宿主机的指定位置，在 Linux 系统上这个位置为 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;。这些文件只能由 Docker 进程进行修改，是 docker 文件持久化的最好的方式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动挂载数据卷的容器</li></ul><p>在用 <code>docker run</code> 命令的时候，使用 <code>--mount</code> 标记来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p><p>例如创建一个名为 <code>web</code> 的容器，并加载一个名为<code>my-vol</code>的 <code>数据卷</code> 到容器的 <code>/usr/share/nginx/html</code> 目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>    --name web <span class="token punctuation">\</span>    <span class="token comment"># -v my-vol:/usr/share/nginx/html \</span>    --mount <span class="token assign-left variable">source</span><span class="token operator">=</span>my-vol,target<span class="token operator">=</span>/usr/share/nginx/html <span class="token punctuation">\</span>    nginx:alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>数据卷</code> 信息在 “Mounts” Key 下面</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Mounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"Type"</span><span class="token operator">:</span> <span class="token string">"volume"</span><span class="token punctuation">,</span>        <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"my-vol"</span><span class="token punctuation">,</span>        <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/volumes/my-vol/_data"</span><span class="token punctuation">,</span>        <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/usr/share/nginx/html"</span><span class="token punctuation">,</span>        <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>        <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Propagation"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="挂载主机目录-bind-mounts"><a href="#挂载主机目录-bind-mounts" class="headerlink" title="挂载主机目录 bind mounts"></a>挂载主机目录 bind mounts</h4><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去。</p><p>Docker 挂载主机目录的默认权限是 <code>读写</code>，用户也可以通过增加 <code>readonly</code> 指定为 <code>只读</code>。</p><p><strong>bind mounts</strong> 可以将文件存储到宿主机上面任意位置，而且别的应用程序也可以修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>    --name web <span class="token punctuation">\</span>    <span class="token comment"># -v /src/webapp:/usr/share/nginx/html \</span>    --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/src/webapp,target<span class="token operator">=</span>/usr/share/nginx/html <span class="token punctuation">\</span>    nginx:alpine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Mounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"Type"</span><span class="token operator">:</span> <span class="token string">"bind"</span><span class="token punctuation">,</span>        <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/src/webapp"</span><span class="token punctuation">,</span>        <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/usr/share/nginx/html"</span><span class="token punctuation">,</span>        <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Propagation"</span><span class="token operator">:</span> <span class="token string">"rprivate"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h2><p><a href="https://www.runoob.com/docker/docker-command-manual.html">docker命令大全</a></p><h1 id="Docker的Linux安装"><a href="#Docker的Linux安装" class="headerlink" title="Docker的Linux安装"></a>Docker的Linux安装</h1><ol><li><strong>查看当前的内核版本</strong></li></ol><p>Linux 内核：官方建议 3.10 以上，3.8以上貌似也可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">uname <span class="token operator">-</span>r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>使用 root 权限更新 yum 包</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yum <span class="token operator">-</span>y update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令不是必须执行的，看个人情况，后面出现不兼容的情况的话就必须update了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">注意 yum <span class="token operator">-</span>y update：升级所有包同时也升级软件和系统内核； yum <span class="token operator">-</span>y upgrade：只升级所有包，不升级软件和系统内核<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>卸载旧版本（如果之前安装过的话）</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yum remove docker  docker<span class="token operator">-</span>common docker<span class="token operator">-</span>selinux docker<span class="token operator">-</span>engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p><strong>安装需要的软件包， yum-util 提供yum-config-manager功能，另两个是devicemapper驱动依赖</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils device<span class="token operator">-</span>mapper<span class="token operator">-</span>persistent<span class="token operator">-</span>data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看可用版本有哪些</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yum list docker<span class="token operator">-</span>ce <span class="token operator">--</span>showduplicates <span class="token operator">|</span> sort <span class="token operator">-</span>r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li><p>选择一个版本并安装：<code>yum install docker-ce-版本号</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yum <span class="token operator">-</span>y install docker<span class="token operator">-</span>ce<span class="token operator">-</span><span class="token number">18.03</span><span class="token number">.1</span><span class="token punctuation">.</span>ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 Docker 并设置开机自启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start <span class="token function">docker</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="部署Nginx实践"><a href="#部署Nginx实践" class="headerlink" title="部署Nginx实践"></a>部署Nginx实践</h1><ol><li>拉取nginx镜像</li></ol><p>默认最新版本latest</p><pre class="line-numbers language-none"><code class="language-none">docker pull nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在宿主机中设置挂在目录</li></ol><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;data&#x2F;nginx&#x2F;&#123;conf,conf.d,html,log&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211130162322421.png" alt="image-20211130162322421"></p><ol start="3"><li>配置文件放置挂在目录</li></ol><pre class="line-numbers language-none"><code class="language-none">#user www-data;worker_processes auto;#pid &#x2F;run&#x2F;nginx.pid;events &#123;        worker_connections 768;        # multi_accept on;&#125;http &#123;        ##        # Basic Settings        ##        sendfile on;        tcp_nopush on;        tcp_nodelay on;        keepalive_timeout 65;        types_hash_max_size 2048;        # server_tokens off;        # server_names_hash_bucket_size 64;        # server_name_in_redirect off;        include &#x2F;etc&#x2F;nginx&#x2F;mime.types;        default_type application&#x2F;octet-stream;        ##        # SSL Settings        ##        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE        ssl_prefer_server_ciphers on;        ##        # Logging Settings        ##        access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;        error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;        ##        # Gzip Settings        ##        gzip on;        gzip_disable &quot;msie6&quot;;        # gzip_vary on;        # gzip_proxied any;        # gzip_comp_level 6;        # gzip_buffers 16 8k;        # gzip_http_version 1.1;        # gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json application&#x2F;javascript text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;        ##        # Virtual Host Configs        ##        include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;        include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;        server&#123;                listen 80;                server_name your_server_name;   #你的serverName                root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;                index index.html;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>启动nginx容器</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">docker</span> run --name my_nginx-d -p <span class="token number">80</span>:80  -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/log:/var/log/nginx -v /data/nginx/html:/usr/share/nginx/htmlnginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个-v：挂载nginx的主配置文件，以方便在宿主机上直接修改容器的配置文件</p><p>第二个-v：挂载容器内nginx的日志，容器运行起来之后，可以直接在宿主机的这个目录中查看nginx日志</p><p>第三个-v：挂载静态页面目录</p><ol start="5"><li>效果如下：</li></ol><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20211130163158525.png" alt="image-20211130163158525"></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Mysql</title>
      <link href="/2021/09/27/linux-an-zhuang-mysql/"/>
      <url>/2021/09/27/linux-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装Mysql"><a href="#Linux安装Mysql" class="headerlink" title="Linux安装Mysql"></a>Linux安装Mysql</h1><h1 id="下载MySQL安装包"><a href="#下载MySQL安装包" class="headerlink" title="下载MySQL安装包"></a>下载MySQL安装包</h1><ol><li><p>首先需要查询本机centos或其他Linux版本信息</p><p>输入<code>lsb_release -a</code></p></li><li><p>在官网<a href="https://dev.mysql.com/downloads/mysql%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%89%88%E6%9C%AC">https://dev.mysql.com/downloads/mysql下载对应版本</a></p><ul><li>可以现在bundle版本的，如mysql-8.0.15-1.el7.x86_64.rpm-bundle.tar。</li><li>也可以单独下载各个模块：common –&gt;client-plugs –&gt; libs –&gt; client –&gt; server。</li></ul></li></ol><h1 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h1><p>按照common –&gt;client-plugs –&gt; libs –&gt; client –&gt; server顺序进行安装。</p><p>使用命令<code>rpm -ivh ***.rpm</code>进行模块的安装。</p><blockquote><p>注意：</p><p>当提示“mariadb-libs 被 mysql-community-libs-8.0.15-1.el7.x86_64 取代”，是lib和系统自带的冲突。使用命令<code>yum remove mysql-libs -y</code>后再使用<code>rpm -ivh ***</code> 命令继续安装。</p></blockquote><h1 id="MySQL的root密码和相关权限设置"><a href="#MySQL的root密码和相关权限设置" class="headerlink" title="MySQL的root密码和相关权限设置"></a>MySQL的root密码和相关权限设置</h1><ol><li><p>首先执行<code>service mysqld restart</code>指令重启mysql服务，为了后面查看日志里面的默认root密码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># service mysqld restart</span>Redirecting to /bin/systemctl restart mysqld.service<span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># /bin/systemctl restart mysqld.service</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看日志默认密码，mysql的日志在<code>/var/log/mysqld.log</code>里面</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost log<span class="token punctuation">]</span><span class="token comment"># cat mysqld.log </span> <span class="token punctuation">..</span><span class="token punctuation">..</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: <span class="token comment">#+Tp!)#Fv6e;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改登陆密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost /<span class="token punctuation">]</span><span class="token comment"># mysql -u root -p</span>Enter password: Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">13</span>Server version: <span class="token number">8.0</span>.15Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2019</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span>  ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'...@...123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里密码有复杂度的要求，尽量设置复杂一点并好记忆的密码～</p></li><li><p>开放所有ip地址都能访问：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CREATE <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'root123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>root123是你自己设置的密码，若执行开放指定ip能访问，把%换成ip地址。</p></li><li><p>修改加密方式：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'root123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MySQL8默认是caching_sha2_password</p></li><li><p>开放防火墙端口<br>查看防火墙开放的端口。<code>firewall-cmd --zone=public --list-ports</code><br>开启防火墙端口3306：<code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></p></li></ol><h1 id="远程连接数据库授权"><a href="#远程连接数据库授权" class="headerlink" title="远程连接数据库授权"></a>远程连接数据库授权</h1><ol><li><p>创建时间数据库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">CREATE SCHEMA <span class="token variable"><span class="token variable">`</span>testd_atabase<span class="token variable">`</span></span> DEFAULT CHARACTER SET utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授权</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grant all on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>grant权限修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update mysql.user <span class="token builtin class-name">set</span> <span class="token assign-left variable">Grant_priv</span><span class="token operator">=</span><span class="token string">'Y'</span>,Super_priv<span class="token operator">=</span><span class="token string">'Y'</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java场景问题汇总</title>
      <link href="/2020/10/28/java-chang-jian-wen-ti-hui-zong/"/>
      <url>/2020/10/28/java-chang-jian-wen-ti-hui-zong/</url>
      
        <content type="html"><![CDATA[<p><em>由简书搬迁而来<a href="https://www.jianshu.com/p/0818149b58f5"><strong>原文链接</strong></a></em></p><blockquote><p>目录<br><strong>常见问题汇总</strong>  </p><p>参考资料<br>·《Java编程思想》<br>·《Java Web 技术内幕》<br>·《Java 并发编程实战》  </p></blockquote><h1 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h1><h2 id="项目打成jar包后，读取资源文件"><a href="#项目打成jar包后，读取资源文件" class="headerlink" title="项目打成jar包后，读取资源文件"></a>项目打成jar包后，读取资源文件</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//源代码1： </span> <span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>hxraid</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>     <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"bin/resource/res.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>打成jar包运行时爆错！</strong></p><p>  因为jar包是一个单独的文件而非文件夹，绝对不可能通过”file:/e:/…/ResourceJar.jar/resource /res.txt”这种形式的文件URL来定位res.txt。所以即使是相对路径，也无法定位到jar文件内的txt文件(读者也许对这段原因解释有些费解，在下面我们会用一段代码运行的结果来进一步阐述)。</p><p>我们可以用类装载器(ClassLoader)来做到这一点：</p><p><strong>(1) ClassLoader 是类加载器的抽象类。它可以在运行时动态的获取加载类的运行信息。</strong> 可以这样说，当我们调用ResourceJar.jar中的Resource类时，JVM加载进Resource类，并记录下Resource运行时信息(包括Resource所在jar包的路径信息)。而ClassLoader类中的方法可以帮助我们动态的获取这些信息:</p><p>● public URL getResource(String name)</p><p>查找具有给定名称的资源。资源是可以通过类代码以与代码基无关的方式访问的一些数据(图像、声音、文本等)。并返回资源的URL对象。</p><p>● public InputStream getResourceAsStream(String name);</p><p>返回读取指定资源的输入流。这个方法很重要，可以直接获得jar包中文件的内容。</p><p><strong>(2)</strong> ClassLoader是abstract的，不可能实例化对象，更加不可能通过ClassLoader调用上面两个方法。<strong>所以我们真正写代码的时候，是通过Class类中的getResource()和getResourceAsStream()方法，这两个方法会委托ClassLoader中的getResource()和getResourceAsStream()方法</strong> 。好了，现在我们重新写一段Resource代码,来看看上面那段费解的话是什么意思了：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//源代码2： </span><span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>hxraid</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>      <span class="token comment">//查找指定资源的URL，其中res.txt仍然开始的bin目录下  </span>       <span class="token class-name">URL</span> fileURL<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/resource/res.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileURL<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Resource</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这段源代码结果：/E:/Code_Factory/WANWAN/bin/resource/res.txt (../ Code_Factory/WANWAN/.. 是java project所在的路径)</p><p> 我们将这段代码打包成ResourceJar.jar ,并将ResourceJar.jar放在其他路径下(比如 c:\ResourceJar.jar)。然后另外创建一个java project并导入ResourceJar.jar，写一段调用jar包中Resource类的测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">edu<span class="token punctuation">.</span>hxraid<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> TEST <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Resource</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这时的运行结果是：file:/C:/ResourceJar.jar!/resource/res.txt</p><p> 我们成功的在运行时动态获得了res.txt的位置。然而，问题来了，你是否可以通过下面这样的代码来得到res.txt文件？</p><p>File f=new File(“C:/ResourceJar.jar!/resource/res.txt”);</p><p>当然不可能，因为”…/ResourceJar.jar!resource/….”并不是文件资源定位符的格式 (jar中资源有其专门的URL形式：</p><p><strong>jar:<url>!/{entry}</strong>)。所以，如果jar包中的类源代码用File f=new File(相对路径);的形式，是不可能定位到文件资源的。这也是为什么源代码打包成jar文件后，调用jar包时会报出FileNotFoundException的症结所在了。</p><p><strong>(3)</strong> 我们不能用常规操作文件的方法来读取ResourceJar.jar中的资源文件res.txt，<strong>但可以通过Class类的getResourceAsStream()方法来获取</strong> ，这种方法是如何读取jar中的资源文件的，这一点对于我们来说是透明的。我们将Resource.java改写成：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//源代码3： </span><span class="token keyword">package</span> <span class="token namespace">edu<span class="token punctuation">.</span>hxraid</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resource</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>         <span class="token comment">//返回读取指定资源的输入流 </span>        <span class="token class-name">InputStream</span> is<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/resource/res.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BufferedReader</span> br<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  我们将java工程下/bin目录中的edu/hxraid/Resource.class和资源文件resource/res.txt一并打包进ResourceJar.jar中，不管jar包在系统的任何目录下，调用jar包中的Resource类都可以获得jar包中的res.txt资源，再也不会找不到res.txt文件了。</p><h2 id="java运行jar命令提示没有主清单属性"><a href="#java运行jar命令提示没有主清单属性" class="headerlink" title="java运行jar命令提示没有主清单属性"></a>java运行jar命令提示没有主清单属性</h2><p>（1）在java中编译JAR文件的时候我们都会用到，jar这个命令。</p><p>（2）这样的问题是因为，jar包中的<strong>META-INF</strong>文件夹下的<strong>MANIFEST.MF</strong>文件缺少定义jar接口类。<strong>说白了就是没有指定class类</strong>。这里说明一下MANIFEST.MF就是一个清单文件，</p><p>通俗点将就相当于WINDOWS中ini配置文件。用来配置程序的一些信息。</p><p>（3）解决这个问题的方法就是要在<strong>MANIFEST.MF</strong>文件中添加一个入口类。</p><p>即需要一个Main-Class定义行。更详细的MANIFEST.MF文件定义说明，请参考官方MANIFEST.MF文件定义手册。</p><p>详见：<a href="https://www.cnblogs.com/shaosks/p/9984350.html">java运行jar命令提示没有主清单属性 - shaomine - 博客园</a></p><h2 id="java中获取各种上下文路径的方法小结"><a href="#java中获取各种上下文路径的方法小结" class="headerlink" title="java中获取各种上下文路径的方法小结"></a>java中获取各种上下文路径的方法小结</h2><p>详见：<a href="https://www.cnblogs.com/shawWey/p/6897377.html">java中获取各种上下文路径的方法小结 - shawWey - 博客园</a></p><h2 id="Swtich和Map的性能对比"><a href="#Swtich和Map的性能对比" class="headerlink" title="Swtich和Map的性能对比"></a>Swtich和Map的性能对比</h2><p>  JVM对使用switch实现的方法并没有被优化，优化全部是针对Map,Integer等进行的，也就是说在使用map的实现中，大量地利用了JIT的本地优化代码；而switch的实现以jvm指令的形式执行，这样解释了为什么在这个测试中map在启用JIT的情况下，会比switch快一倍左右;而禁用JIT以后，会慢10倍左右。</p><h2 id="java-io几种读写文件的方式"><a href="#java-io几种读写文件的方式" class="headerlink" title="java.io几种读写文件的方式"></a>java.io几种读写文件的方式</h2><p>详见：<a href="https://www.cnblogs.com/ll409546297/p/7197911.html">java.io几种读写文件的方式 - 小不点丶 - 博客园</a></p><h2 id="Java集成matlab"><a href="#Java集成matlab" class="headerlink" title="Java集成matlab"></a>Java集成matlab</h2><p>详见：<a href="https://www.cnblogs.com/winv758241/p/7744383.html">JAVA调用matlab代码 - winvv - 博客园</a></p><p>常见错误：<a href="https://blog.csdn.net/weixin_30247307/article/details/99599788">java matlab 混合编程 Failed to find the required library mclmcrrt9_2.dll on java.library.path._weixin_30247307的博客-CSDN博客</a></p><h2 id="Java-中初始化-List-集合的-6-种方式"><a href="#Java-中初始化-List-集合的-6-种方式" class="headerlink" title="Java 中初始化 List 集合的 6 种方式"></a>Java 中初始化 List 集合的 6 种方式</h2><p>详见：<a href="https://zhuanlan.zhihu.com/p/51742171">Java 中初始化 List 集合的 6 种方式! - 知乎</a></p><p><a href="https://blog.csdn.net/u012448083/article/details/75026310">https://blog.csdn.net/u012448083/article/details/75026310</a>)</p><h2 id="遍历Map集合"><a href="#遍历Map集合" class="headerlink" title="遍历Map集合"></a>遍历Map集合</h2><p>普遍使用，二次取值</p><p>System.out.println(“通过Map.keySet遍历key和value：”);</p><p>for (String key : map.keySet()) {</p><p>System.out.println(“key= “+ key + “ and value= “ + map.get(key));</p><p>}</p><p>详见：<a href="https://zhuanlan.zhihu.com/p/76642935">遍历Map - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程+JVM</title>
      <link href="/2020/10/27/java-duo-xian-cheng-jvm/"/>
      <url>/2020/10/27/java-duo-xian-cheng-jvm/</url>
      
        <content type="html"><![CDATA[<p><em>由简书搬迁而来<a href="https://www.jianshu.com/p/0b9fc57dcabf"><strong>原文链接</strong></a></em></p><blockquote><p>目录<br>  <strong>3 Java多线程<br>  4 JVM</strong>  </p><p>  参考资料<br>  ·《Java编程思想》<br>·《Java Web 技术内幕》<br>·《Java 并发编程实战》  </p></blockquote><h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="基本线程机制"><a href="#基本线程机制" class="headerlink" title="基本线程机制"></a>基本线程机制</h2><p>  使用线程可以把占据时间长的程序中的任务放到后台去处理，程序的运行速度可能加快。进程是所有线程的集合，每一个线程是进程中的一条执行路径。</p><p>  底层机制是切分CPU时间。</p><h3 id="定义线程的方式"><a href="#定义线程的方式" class="headerlink" title="定义线程的方式"></a>定义线程的方式</h3><p>（1）实现Runable接口，实现run()方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CreateRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>inti <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>publicclass <span class="token class-name">ThreadDemo2</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----多线程创建开始-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 1.创建一个线程</span>       <span class="token class-name">CreateRunnable</span> createThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.开始执行线程 注意 **开启线程不是调用run方法，而是start方法**</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----多线程创建启动-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>createThread<span class="token punctuation">)</span><span class="token punctuation">;</span>       thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----多线程创建结束-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）继承Thread类，重写run()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo01</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">ThreadDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//编写子类的构造方法，可缺省</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//编写自己的线程代码</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">ThreadDemo01</span> threadDemo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadDemo01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   threadDemo01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"我是自定义的线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   threadDemo01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）通过Callable和FutureTask创建线程</p><ol><li><p>创建Callable接口的实现类 ，并实现Call方法</p></li><li><p>创建Callable实现类的实现，使用FutureTask类包装Callable对象，该FutureTask对象封装了Callable对象的Call方法的返回值</p></li><li><p>使用FutureTask对象作为Thread对象的target创建并启动线程</p></li><li><p>调用FutureTask对象的get()来获取子线程执行结束的返回值</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo03</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO Auto-generated method stub</span>   <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> oneCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tickets</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> oneTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>oneCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>oneTask<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Tickets</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token comment">//重写call方法</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO Auto-generated method stub</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-->我是通过实现Callable接口通过FutureTask包装器来实现的线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）通过线程池创建线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo05</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> POOL_NUM <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//线程池数量</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO Auto-generated method stub</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>POOL_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token class-name">RunnableThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//Thread.sleep(1000);</span>     executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//关闭线程池</span>   executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">RunnableThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过线程池方式创建的线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>·总结：</strong></p><p>  前面两种可以归结为一类：无返回值，原因很简单，通过重写run方法，run方式的返回值是void，所以没有办法返回结果</p><p>  后面两种可以归结成一类：有返回值，通过Callable接口，就要实现call方法，这个方法的返回值是Object，所以返回的结果可以放在Object对象中</p><p><strong>· 注意事项</strong></p><p>  · 创建线程，优先选择Runable，接口可实现扩展。</p><p>  · 开启线程需要调用start()方法，若直接调用run()，则为普通方法，在main函数中执行。</p><h3 id="Thread类常用API"><a href="#Thread类常用API" class="headerlink" title="Thread类常用API"></a>Thread类常用API</h3><p><strong>常用线程</strong>api方法</p><pre class="line-numbers language-none"><code class="language-none">· start() 启动线程· currentThread() 获取当前线程对象· getID() 获取当前线程IDThread-编号 该编号从0开始· getName() 获取当前线程名称· sleep(long mill) 休眠线程static方法· stop（） 停止线程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用线程构造</strong>函数</p><pre class="line-numbers language-none"><code class="language-none">· Thread（）分配一个新的Thread 对象· Thread（String name）分配一个新的Thread对象，具有指定的name正如其名。· Thread（Runable r）分配一个新的Thread对象· Thread（Runable r, String name）分配一个新的Thread对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>线程从创建、运行到结束总是处于下面五个状态之一：<strong>新建状态、就绪状态、运行状态、阻塞状态及死亡状态</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739865.png" alt="img"></p><p>（1）新建状态</p><p>​    当用new操作符创建一个线程时。</p><p>（2）就绪状态</p><p>​    当start()方法返回后，线程就处于就绪状态，等待CPU的线程调度。</p><p>（3）运行状态</p><p>当线程获得CPU时间后，它才进入运行状态<strong>，真正开始执行run()方法.</strong></p><p>（4）阻塞状态</p><p>​    线程运行过程中，可能由于各种原因进入阻塞状态:</p><p>​      · 线程通过调用sleep方法进入睡眠状态；</p><p>​      · 线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者；</p><p>​      · 线程试图得到一个锁，而该锁正被其他线程持有；</p><p>​      · 线程在等待某个触发条件；</p><p>（5）死亡状态</p><p>​    · run方法正常退出而自然死亡</p><p>​    · 一个未捕获的异常终止了run方法而使线程猝死。</p><p>​    isAlive方法。如果是可运行或被阻塞，这个方法返回true； 如果线程仍旧是new状态且不是可运行的， 或者线程死亡了，则返回false.</p><h2 id="线程无处不在"><a href="#线程无处不在" class="headerlink" title="线程无处不在"></a>线程无处不在</h2><p>（1）每个Java应用程序都使用线程</p><p>​    · JVM（GC、终结操作）创建后台线程。</p><p>​    · 创建主线程执行main方法。</p><p>（2）需要注意线程安全的框架</p><p>​    · Timer类，需要确保TimerTask访问的对象本身是线程安全的。</p><p>​    · Servlet和JSP，需要保证ServletContext、HttpSession等容器中保存的对象线程安全。</p><p>​    · RMI 远程方法调用，确保被调用的对象线程安全</p><p>​    · Swing和AWT</p><h2 id="多线程同步"><a href="#多线程同步" class="headerlink" title="多线程同步"></a>多线程同步</h2><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h3><h4 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h4><p>  <strong>synchronized同步代码块</strong>  </p><p>  · 每个Java对象都可以用做一个实现同步的锁，与对象头的Mark Word有关。</p><p>  · 由于每次只能有一个线程执行内置锁保护的代码块，因此同步代码块会以原子的方式执行。</p><p><strong>参考：<a href="https://zhuanlan.zhihu.com/p/75880892">深入理解synchronized底层原理，一篇文章就够了！ - 知乎</a></strong></p><p>​            <a href="https://www.jianshu.com/p/312f6d176fb3?utm_campaign=hugo&utm_medium=reader_share&utm_content=note&utm_source=weixin-friends">动态高并发时为什么推荐重入锁而不是Synchronized？ - 简书</a></p><p><strong>共有三种使用方式：</strong></p><p>（1）同步代码块</p><p>​    使用一个Java对象作为锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">private</span> <span class="token class-name">Object</span> mutex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义多线程同步锁</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>trainCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",出售 第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> trainCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      trainCount<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字节码底层机制：同步块是由monitorenter指令进入，然后monitorexit释放锁，在执行monitorenter之前需要尝试获取锁，如果这个对象没有被锁定，或者当前线程已经拥有了这个对象的锁，那么就把锁的计数器加1。当执行monitorexit指令时，锁的计数器也会减1。当获取锁失败时会被阻塞，一直等待锁被释放。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/v2-da522fd0c4ed856125b7f6d0c154461f_1440w.jpg" alt="img" style="zoom:50%;" /><p>（2）同步方法</p><p>  使用this对象作为锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>trainCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",出售 第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> trainCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trainCount<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字节码底层机制：在方法的flags里面多了一个<code>ACC_SYNCHRONIZED</code>标志，这标志用来告诉JVM这是一个同步方法，在进入该方法之前先获取相应的锁，锁的计数器加1，方法结束后计数器-1，如果获取失败就阻塞住，知道该锁被释放。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/v2-7ee20b20506f94c4421b45229e1ae877_1440w.jpg" alt="img" style="zoom:50%;" /><p>（3）静态同步方法</p><p>  当方法被static关键字修饰，锁使用class对象，即当前类的字节码文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">ThreadTrain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",出售 第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> trainCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   trainCount<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>（1）概念：某个线程试图获得一个已经由它自己持有的锁。重入锁的锁粒度是“线程”。</p><p>（2）重入锁为每个锁关联一个获取计数值和一个所有者线程。同一个线程每次获取锁，计数值加1，退出同步代码块时，计数值减1.当计数值为0时，这个锁被释放。</p><p>（3）synchronized是可重入锁。</p><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><h4 id="Lock与ReentrantLock"><a href="#Lock与ReentrantLock" class="headerlink" title="Lock与ReentrantLock"></a>Lock与ReentrantLock</h4><p>（1）Lock接口</p><p>提供了一种<strong>无条件的</strong>、<strong>可轮询的</strong>、<strong>定时的</strong>以及<strong>可以中断</strong>的锁获取操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span><span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）ReetrantLock 实现了Lock接口</p><p>  · 提供了可重入锁</p><p>  · 配合try/finally使用，必须在finally块中，使用unlock()方法释放锁。</p><p>（3）Lock接口的其他特性</p><p>  · 轮询锁与定时锁</p><p>​    由tryLock()方法实现，可以避免死锁的问题。它会释放已经获得的锁，然后重新尝试获取所有锁</p><p>  · 可中断锁</p><p>​    实现可取消的任务</p><p>  · 非块结构的加锁</p><p>​    锁粒度会比synchronized细，可以是代码中的某几行。</p><h4 id="公平性"><a href="#公平性" class="headerlink" title="公平性"></a>公平性</h4><p>（1）分类</p><ul><li>公平锁</li></ul><p>​    按照发出请求顺序获得锁。如果没有获取到锁，则直接加入队列<strong>尾部</strong>。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739845-5039859.png" alt="img" style="zoom:50%;" /><ul><li>非公平锁（默认）</li></ul><p>​    如果线程在发出请求的同时该锁的状态变为可用，那么这个线程将跳过队列中所有的等待线程并获得这个锁。尝试获取锁会进行两次，两次都失败则直接加入CLH队列尾部，后面流程和公平锁一致。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739976.png" alt="img" style="zoom:50%;" /><p>（2）特性</p><p>​    在激烈竞争时，非公平锁性能高于公平锁的性能。</p><p>（3）对比</p><p>​    · synchronized 只能是非公平锁</p><p>​    · ReetrantLock 两者都可</p><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><p>（1）作用</p><p>​    是一种稍弱的同步机制，用来确保将变量的更新操作通知到其他线程。</p><p>（2）禁止“重排序”</p><p>​    · 重排序：编译器和处理器以及运行时等可能对操作的执行顺序进行一些意想不到的调整。</p><p>​    · volatile声明的变量，不会将该变量上的操作与其他内存操作一起重排序。</p><p>（3）典型应用</p><p>​    用作状态标记或者条件判断。</p><p>（4）使用条件</p><p>​    · 只有单个线程更新变量值或者不依赖当前值。</p><p>​    · 访问时不需要加锁</p><p>（5）对比synchronized</p><p>​    · volatile不会造成阻塞</p><p>​    · synchronized可以保证原子性和可见性，Volatile只能保证可见性。</p><p>​    · volatile用来保证可见，synchronized用来同步</p><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>（1）java.util.concurrent.atomic包中的原子类</p><p>  AtomicInteger、AtomicLong等。</p><p>private final AtomicLong count = new AtomicLong(0);</p><p>（2）注意事项</p><p>​    当有多个原子变量时，若涉及到相互依赖，需要保证在单个原子操作中更新所有相关的状态变量。</p><p>（3）原理分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// setup to use Unsafe.compareAndSwapInt for updates（更新操作时提供“⽐较并替换”的作⽤）</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>   valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  AtomicInteger类主要利用CAS（compare and swap）+ volatile和native方法（objectFieldOffset）来保证原子操作。</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><h4 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h4><p>如果仅在单线程内访问数据，就不需同步共享的可变数据，称之为<strong>线程封闭</strong>。</p><h4 id="ThreadLocal-1"><a href="#ThreadLocal-1" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><p>（1）作用：根除对可变的单实例变量或全局变量共享。</p><p>（2）方式：</p><p>​    ThreadLocal提供了get与set等访问接口或方法，这些方法为每个使用该变量的线程都存有一份独立的副本，因此get总是返回由当前执行线程在调用set时设置的最新值。</p><p>（3）相关方法：</p><p>  · void set(Object value)设置当前线程的线程局部变量的值。</p><p>  · public Object get()该方法返回当前线程所对应的线程局部变量。</p><p>  · public void remove()将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。</p><p>  · protected Object initialValue()返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）底层原理</p><p>​    利用ThreadLocal.ThreadLocalMap&lt;Thread, T&gt;保存变量</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155740065.png" alt="img"/><h3 id="活跃性与性能"><a href="#活跃性与性能" class="headerlink" title="活跃性与性能"></a>活跃性与性能</h3><p>（1）不良并发</p><p>​    可同时调用的用户请求数量，不仅受到可用处理资源的限制，还受到应用程序本身结构的限制。</p><p>（2）解决方案</p><p>​    · 缩小同步代码块的作用范围。 尽量将不影响共享状态且执行时间较长的操作从同步代码块中分离出去。</p><p>​    · 尽量避免不同的同步机制一起使用</p><p>​    · 当执行时间较长的计算或者可能无法快速完成的操作时（例如，网络I/O或控制台IO），一定不要持有锁。</p><h2 id="线程三大特性"><a href="#线程三大特性" class="headerlink" title="线程三大特性"></a>线程三大特性</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>  即一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>  当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>  程序执行的顺序按照代码的先后顺序执行。 程序在运行时，为了优化可能对执行顺序重排序。</p><h2 id="Java内存模型（JMM）"><a href="#Java内存模型（JMM）" class="headerlink" title="Java内存模型（JMM）"></a>Java内存模型（JMM）</h2><p>（1）概念</p><p>  · JMM决定一个线程对共享变量的写入时,能对另一个线程可见。</p><p>· JMM定义了线程和主内存之间的抽象关系：线程之间的<strong>共享变量存储在主内存</strong>（main memory）中，每个线程都有一个私有的<strong>本地内存</strong>（local memory），本地内存中存储了该线程以读/写共享变量的副本。</p><p>· 本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了<strong>缓存，写缓冲区，寄存器</strong>以及其他的硬件和编译器优化。</p><p>（2）模型图</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630162553671.png" alt="img"></p><p>​    当线程A和线程B需要通信时，线程A首先会把自己本地内存中修改后的值刷新到主内存中，随后，线程B到主内存中去读取线程A更新后的值。</p><p>​    如果线程本地内存没有及时刷新到主内存中，则可能发生线程安全问题。</p><p>（3）意义</p><p>为Java程序员提供内存<strong>可见性</strong>保证。</p><h2 id="多线程通讯"><a href="#多线程通讯" class="headerlink" title="多线程通讯"></a>多线程通讯</h2><h3 id="Object类中的相关方法"><a href="#Object类中的相关方法" class="headerlink" title="Object类中的相关方法"></a>Object类中的相关方法</h3><p>（1）相关方法</p><p>wait()、notify()、notifyAll()是三个定义在Object类里的方法，可以用来控制线程的状态。这三个方法最终调用的都是<strong>JVM级的native方法</strong>。随着jvm运行平台的不同可能有些许差异。</p><p>  这些方法可以配合synchronized关键字一起使用。</p><p>· 如果对象调用了<strong>wait方法</strong>就会使持有该对象的线程把该对象的控制权交出去，然后处于等待状态。</p><p>· 如果对象调用了<strong>notify方法</strong>就会通知某个正在等待这个对象的控制权的线程可以继续运行。</p><p>· 如果对象调用了<strong>notifyAll方法</strong>就会通知所有等待这个对象控制权的线程继续运行。</p><p>（2）注意事项</p><p>  ·notify和notifyAll的区别</p><p>·如果线程调用了对象的 wait()方法，那么线程便会处于该对象的<strong>等待池</strong>中，等待池中的线程<strong>不会去竞争该对象的锁</strong>。</p><p>·当有线程调用了对象的<strong>notifyAll</strong>()方法（唤醒所有 wait 线程）或<strong>notify</strong>()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争</p><p>·优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它<strong>还会留在锁池中</strong>，唯有线程再次调用 wait()方法，它才会重新回到<strong>等待池</strong>中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</p><p>  · Thead.sleep()方法与wait()方法区别</p><p>​    sleep()不会释放锁，wait()方法会释放锁。</p><h3 id="Condition对象"><a href="#Condition对象" class="headerlink" title="Condition对象"></a>Condition对象</h3><h4 id="条件队列"><a href="#条件队列" class="headerlink" title="条件队列"></a>条件队列</h4><p>​    它使得一组线程（等待线程集合）能够通过某种方式等待特定的条件变为真。</p><h4 id="Conditon是Lock的广义条件队列"><a href="#Conditon是Lock的广义条件队列" class="headerlink" title="Conditon是Lock的广义条件队列"></a>Conditon是Lock的广义条件队列</h4><p>（1）常用方法</p><p>void await() throws InterruptedException</p><p>void signal()</p><p>void signalAll()</p><p>（2）对比synchronized</p><p>  · synchronized只能有一个关联的条件队列。</p><p>  · Lock可以由任意数量的Condition对象</p><h3 id="线程中的异常"><a href="#线程中的异常" class="headerlink" title="线程中的异常"></a>线程中的异常</h3><p>  异常不能跨线程捕捉，必须在线程内部处理。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>（1）当进程不存在或主线程停止，守护线程也会被停止。</p><p>（2）意义及应用场景</p><p>​    当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。</p><p>​    如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以</p><p>通过<strong>thread.setDaemon(true)<strong>设置线程为守护线程（后台线程）</strong>。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonThread</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子线程..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程执行完毕!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h3><p>​    join作用是让其他线程变为等待。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">JoinThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---i:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinThreadDemo</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">JoinThread</span> joinThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JoinThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>joinThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>joinThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//其他线程变为等待状态，等t1线程执行完成之后才能执行。</span>      t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main ---i:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>  现代操作系统基本采用时分的形式调度运行的线程，线程分配得到的时间片的多少决定了线程使用处理器资源的多少，也对应了线程优先级这个概念。</p><p>在JAVA线程中，通过一个<strong>int priority变量</strong>来控制优先级，范围为1-10，其中10最高，默认值为5。下面是源码（基于1.8）中关于priority的一些量和方法，如getPriority()，setPriority(int)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo4</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">PrioritytThread</span> prioritytThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrioritytThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>prioritytThread<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>prioritytThread<span class="token punctuation">)</span><span class="token punctuation">;</span>   t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 注意设置了优先级， 不代表每次都一定会被执行。 只是CPU调度会有限分配</span> t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="yield-方法"><a href="#yield-方法" class="headerlink" title="yield()方法"></a>yield()方法</h3><p>（1）Thread.yield()方法的作用：暂停当前正在执行的线程，并执行其他线程。（可能没有效果）</p><p>（2）<strong>yield()让当前正在运行的线程回到可运行状态</strong>，以允许具有相同优先级的其他线程获得运行的机会。因此，使用yield()的目的是<strong>让具有相同优先级的线程之间能够适当的轮换执行</strong>。</p><p>（3）实际中无法保证yield()达到让步的目的，因为，让步的线程可能被线程调度程序再次选中。大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>（1）概念</p><p>​    多个线程同时被阻塞，他们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p><p>​    同步中嵌套同步,导致锁无法释放。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155741003.png" alt="img"/><p>（2）死锁条件</p><p>​    · 互斥：任意时刻资源只能由一个线程占用</p><p>​    · 请求与保持：对已获得的资源保持不放</p><p>​    · 不剥夺：获得资源后不能被其他线程抢占</p><p>​    · 循环等待： 若干进程之间形成一种头尾相接的循环等待资源关系。</p><p>  破坏其中的任意一个条件即可：</p><p>​    · 一次申请完所有资源</p><p>​    · 主动释放资源</p><p>​    · 按序申请资源</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>  线程池是指在初始化一个多线程应用程序过程中创建一个线程集合，然后在需要执行新的任务时重用这些线程而不是新建一个线程。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>  （1）降低资源消耗</p><p>  （2）提高响应速度</p><p>  （3）提高线程的可管理性</p><h3 id="Executors工具类"><a href="#Executors工具类" class="headerlink" title="Executors工具类"></a>Executors工具类</h3><p>  （1）通过Executors.callable(Runable task)实现Runable对象和Callable对象的相互转换。</p><p>  （2）ExecutorService的两个方法</p><p>​        通过Executors工具类创建ExecutorService对象。</p><p>​        · execute()方法用于提交不需要返回值的任务，无法判断任务是否被线程池执行成功</p><p>​        · submit()方法用于提交需要返回值的任务，线程池返回Future对象。</p><h3 id="创建线程池的方式"><a href="#创建线程池的方式" class="headerlink" title="创建线程池的方式"></a>创建线程池的方式</h3><h4 id="Executors工具类-1"><a href="#Executors工具类-1" class="headerlink" title="Executors工具类"></a>Executors工具类</h4><p> <strong>下列四种方式的方法内部，实际上都是调用了ThreadPoolExecutor的构造方法。</strong></p><p>（1）newCachedThreadPool</p><p>​    创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p><p>​    线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> cachedThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>cachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）newFixedThreadPool</p><p>​    创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><p><strong>因为线程池大小为3，每个任务输出index后sleep 1秒，所以每两秒打印3个数字。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</span><span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> newCachedThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>  newCachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i:"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）newScheduledThreadPool</p><p>​    创建一个定长线程池，支持定时及周期性任务执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ScheduledExecutorService</span> newScheduledThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newScheduledThreadPool<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delay 3 seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）newSingleThreadExecutor</p><p>​    创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> newSingleThreadExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>  newSingleThreadExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index:"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TheadPoolExecutor"><a href="#TheadPoolExecutor" class="headerlink" title="TheadPoolExecutor"></a>TheadPoolExecutor</h4><p>（1）Executors框架的弊端</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739852.png" alt="img"></p><p>（2）TheadPoolExecutor构造方法</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739855.png" alt="img"></p><p>（3）构造参数分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** \* ⽤给定的初始参数创建⼀个新的ThreadPoolExecutor。 */</span> <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span> <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment">//核心线程数，最小可以同时运行的线程数量</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment">// 队列满容时，可以同时运行的最大线程数</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment">// 核心线程外的线程，等待销毁的时间</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token comment">// keepAliveTime的单位</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span> <span class="token comment">//超出核心线程数后，存放任务的队列</span> <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span> <span class="token comment">// executor创建新线程使用</span> <span class="token class-name">RejectedExecutionHandler</span> handler <span class="token comment">// 饱和策略</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//... ....</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>饱和策略</strong>：当前同时运行线程数量达到最大线程数量maximumPoolSize，并且队列满容时，对线程的淘汰策略。</p><ul><li><p>ThreadPoolExecutor.AbortPolicy （默认饱和策略）</p><p>抛出RejectedExecutionException异常拒绝新任务</p></li><li><p>ThreadPoolExecutor.CallerRunsPolicy</p><p>调用执行自己的线程运行任务。不丢弃任何一个任务请求。</p></li><li><p>ThreadPoolExecutor.DiscardPolicy<br>不处理新任务，直接丢弃</p></li><li><p>ThreadPoolExecutor.DiscardOldestPolicy</p><p>丢弃最早的未处理的任务请求</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolExecutorDemo</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CORE_POOL_SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_POOL_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> QUEUE_CAPACITY <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> KEEP_ALIVE_TIME <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使⽤阿⾥巴巴推荐的创建线程池的⽅式</span>    <span class="token comment">//通过ThreadPoolExecutor构造函数⾃定义参数创建</span>   <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>      CORE_POOL_SIZE<span class="token punctuation">,</span>      MAX_POOL_SIZE<span class="token punctuation">,</span>      KEEP_ALIVE_TIME<span class="token punctuation">,</span>      <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>QUEUE_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建WorkerThread对象（WorkerThread类实现了Runnable 接⼝）</span>        <span class="token class-name">Runnable</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执⾏Runnable</span>  executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token comment">//终⽌线程池</span>      executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finished all threads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）原理分析</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739887.png" alt="img"/><h2 id="悲观锁与乐观锁"><a href="#悲观锁与乐观锁" class="headerlink" title="悲观锁与乐观锁"></a>悲观锁与乐观锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>（1）概念</p><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次<strong>在拿数据的时候都会上锁</strong>，这样别人想拿这个数据就会阻塞直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>）</p><p>（2）常见悲观锁</p><p>​    synchronized和ReentrantLock等独占锁是悲观锁思想的典型实现。</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>  总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和CAS算法实现。</p><h4 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><p>（1）乐观锁适用于<strong>多读</strong>的应用类型，这样可提高吞吐量。</p><p>（2）java.util.concurrent.atomic中的原子变量类是乐观锁的<strong>CAS</strong>实现的。</p><h4 id="版本号机制"><a href="#版本号机制" class="headerlink" title="版本号机制"></a>版本号机制</h4><p>  一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。</p><p>  当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值为当前数据库中的version值相等时才更新，否则重试更新操作，直到更新成功。</p><h4 id="CAS算法"><a href="#CAS算法" class="headerlink" title="CAS算法"></a>CAS算法</h4><p>（1）概念</p><p>即<strong>compare and swap（比较与交换）</strong>，是一种有名的<strong>无锁算法</strong>。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫<strong>非阻塞同步</strong>（Non-blocking Synchronization）</p><p>（2）原理</p><p>  · 三个操作数：需要读写的内存值 V，进行比较的值 A，拟写入的新值 B。</p><p>· 当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个<strong>自旋操作</strong>，即<strong>不断的重试</strong>。（结合JMM内存模型理解）</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739918.png" alt="img"/><p>（3）CAS算法缺点</p><p>  <strong>· ABA问题</strong></p><p>如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然是A值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回A，那CAS操作就会误认为它从来没有被修改过。这个问题被称为CAS操作的**”ABA”问题。**</p><p>解决方法：在变量前面添加版本号，每次变量更新的时候都将版本号加1，比如juc的原子包中的AtomicStampedReference类。</p><p> <strong>· 循环时间长开销大</strong></p><p>自旋CAS（也就是不成功就一直循环执行直到成功）如果长时间不成功，会给CPU带来非常大的执行开销。</p><p> <strong>· 只能保证一个共享变量的原子操作</strong></p><p>CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。</p><p>从 JDK 1.5开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并成一个共享变量来操作。</p><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>  AQS 的全称为（AbstractQueuedSynchronizer），这个类在 java.util.concurrent.locks 包下面。</p><p>AQS 是一个用来<strong>构建锁和同步器的框架</strong>，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue，FutureTask(jdk1.7) 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</p><p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只<strong>需要实现共享资源 state 的获取与释放方式即可</strong>，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS 已经在上层已经帮我们实现好了。</p><h3 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h3><p>（1）AQS 核心思想</p><p>如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就<strong>需要一套线程阻塞等待以及被唤醒时锁分配的机制</strong>，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><p>  CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739897.png" alt="img"/><p>（2）源码分析</p><p>  AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token comment">//共享变量，使用volatile修饰保证线程可见性</span>状态信息通过 <span class="token keyword">protected</span> 类型的getState，setState，compareAndSetState方法进行操作。<span class="token comment">//返回同步状态的当前值</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置同步状态的值</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">int</span> newState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>state <span class="token operator">=</span> newState<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span>intexpect<span class="token punctuation">,</span>intupdate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>stateOffset<span class="token punctuation">,</span>expect<span class="token punctuation">,</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）资源的共享方式</p><p>·<strong>Exclusive</strong>（独占）</p><p>只有一个线程能执行，如 ReentrantLock。又可分为公平锁和非公平锁,ReentrantLock 同时支持两种锁。</p><p>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁。</p><p>非公平锁：当线程要获取锁时，先通过两次 CAS 操作去抢锁，如果没抢到，当前线程再加入到队列中等待唤醒。</p><p>·<strong>Share</strong>（共享）</p><p>多个线程可同时执行，如 Semaphore/CountDownLatch。Semaphore、CountDownLatCh、 CyclicBarrier、ReadWriteLock 我们都会在后面讲到。</p><p>ReentrantReadWriteLock 可以看成是组合式，因为 ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。</p><p>（4）公平锁和非公平锁</p><p>概念介绍：见3.3.1节</p><p>源码分析：<a href="https://blog.csdn.net/qq_40843639/article/details/102175306">深入锁和并发集合的核心——AQS（1）_只会写Bug的Java程序员的博客-CSDN博客</a></p><h3 id="Semaphore（信号量）"><a href="#Semaphore（信号量）" class="headerlink" title="Semaphore（信号量）"></a>Semaphore（信号量）</h3><p>  Semaphore 只是维持了一个可获得许可证的数量。 Semaphore 经常用于限制获取某种资源的线程数量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  它默认构造AQS的state为permits。当执行任务的线程数量超出permits,那么多余的线程将会被放入阻塞队列Park,并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行,此时先前执行任务的线程继续执行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。 如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。</p><p>  执行 acquire 方法阻塞，直到有一个许可证可以获得然后拿走一个许可证；每个 release 方法增加一个许可证，这可能会释放一个阻塞的 acquire 方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreExample1</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 请求的数量 </span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadCount <span class="token operator">=</span> <span class="token number">550</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢） </span><span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一次只能允许执行的线程数量。 </span><span class="token keyword">final</span> <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadnum <span class="token operator">=</span> i<span class="token punctuation">;</span> threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">// Lambda 表达式的运用 </span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取一个许可，所以可运行线程数量为20/1=20               test(threadnum); </span>semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放一个许可 </span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CountDownLatch（倒计时器）"><a href="#CountDownLatch（倒计时器）" class="headerlink" title="CountDownLatch（倒计时器）"></a>CountDownLatch（倒计时器）</h3><p>（1）概念</p><p>  CountDownLatch允许 count 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。</p><p>CountDownLatch是共享锁的一种实现,它默认构造 AQS 的 state 值为 count。</p><p>当线程使用countDown方法时,其实使用了tryReleaseShared方法以CAS的操作来减少state,直至state为0就代表所有的线程都调用了countDown方法。</p><p>当调用await方法的时候，如果state不为0，就代表仍然有线程没有调用countDown方法，那么就把已经调用过countDown的线程都放入阻塞队列Park,并自旋CAS判断state == 0，直至最后一个线程调用了countDown，使得state == 0，于是阻塞的线程便判断成功，全部往下执行。</p><p>（2）Demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchExample1</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 请求的数量 </span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadCount <span class="token operator">=</span> <span class="token number">550</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建一个具有固定线程数量的线程池对象（如果这里线程池的线程数量给太少的话你会发现执行的很慢） </span><span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadnum <span class="token operator">=</span> i<span class="token punctuation">;</span> threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">// Lambda 表达式的运用 </span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> <span class="token function">test</span><span class="token punctuation">(</span>threadnum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span> countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 表示一个请求已经被完成 </span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CyclicBarrier（循环栅栏）"><a href="#CyclicBarrier（循环栅栏）" class="headerlink" title="CyclicBarrier（循环栅栏）"></a>CyclicBarrier（循环栅栏）</h3><p>（1）概念</p><p>  CyclicBarrier 的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。</p><p>  CycliBarrier是基于 ReentrantLock(ReentrantLock也属于AQS同步器)和 Condition 的.</p><p>CyclicBarrier 默认的构造方法是 CyclicBarrier(int parties)，其参数表示屏障拦截的线程数量，每个线程调用<strong>await</strong>方法告诉 CyclicBarrier 我已经到达了屏障，然后当前线程被阻塞。其中，parties 就代表了有拦截的线程的数量，当拦截的线程数量达到这个值的时候就打开栅栏，让所有线程通过。</p><p>（2）Demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierExample2</span> <span class="token punctuation">&#123;</span><span class="token comment">// 请求的数量</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadCount <span class="token operator">=</span> <span class="token number">550</span><span class="token punctuation">;</span><span class="token comment">// 需要同步的线程数量</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CyclicBarrier</span> cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 创建线程池</span><span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token keyword">int</span> threadNum <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token function">test</span><span class="token punctuation">(</span>threadNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> threadnum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">BrokenBarrierException</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadnum:"</span> <span class="token operator">+</span> threadnum <span class="token operator">+</span> <span class="token string">"is ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">/**等待60秒，保证子线程完全执行结束*/</span> cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----CyclicBarrierException------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadnum:"</span> <span class="token operator">+</span> threadnum <span class="token operator">+</span> <span class="token string">"is finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）对比CountDownLatch</p><p>  · CountDownLatch 是计数器，只能使用一次，而 CyclicBarrier 的计数器提供 reset 功能，可以多次使用。</p><p>  · CountDownLatch 是计数器，线程完成一个记录一个，只不过计数不是递增而是递减，而 CyclicBarrier 更像是一个阀门，需要所有线程都到达，阀门才能打开，然后继续执行。对于 CountDownLatch 来说，重点是“一个线程（多个线程）等待”，而其他的 N 个线程在完成“某件事情”之后，可以终止，也可以等待。而对于 CyclicBarrier，重点是多个线程，在任意一个线程没有完成，所有的线程都必须等待。</p><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="Javac编译原理"><a href="#Javac编译原理" class="headerlink" title="Javac编译原理"></a>Javac编译原理</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>（1）作用：将Java的源代码转化为class字节码的。（编译器）</p><p>（2）将Java语言规范转化为Java虚拟机规范。</p><h3 id="解析步骤"><a href="#解析步骤" class="headerlink" title="解析步骤"></a>解析步骤</h3><p>（1）读取源代码</p><p>​    按字节读取，一个字节一个字节读进来。</p><p>（2）词法分析</p><p>​    找出Java中定义的语法关键词，如if、else等，找出这些Token流。</p><p>（3）语法分析</p><p>​    对Token流进行语法分析，形成一个符合Java语言规范的抽象语法树。</p><p>（4）语义分析</p><p>​    形成一个注解过后的抽象语法树。</p><p>（5）字节码生成器</p><p>​    · 调用javac.jvm.Gen类遍历语法树，生成最终的Java字节码</p><p>​    · JVM的所有操作都是基于栈的</p><p>​    · 将字节码输出到.class文件中。</p><h2 id="class文件结构"><a href="#class文件结构" class="headerlink" title="class文件结构"></a>class文件结构</h2><p>（1）class文件头</p><p>​     第一行：标识符，表示这个文件为标准的class文件</p><p>​     第二和第三行：Java最小版本和最大版本范围。</p><p>（2）常量池</p><p>（3）类信息</p><p>​    如final类、接口、抽象类等</p><p>（4）Fields和Methods定义</p><p>（5）类属性描述</p><p><strong>可以使用javap命令生成class的结构信息到文件</strong>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">javap -verbose Message <span class="token operator">></span> result.txt （Message为Java类名，Message.java）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ClassLoader类加载器"><a href="#ClassLoader类加载器" class="headerlink" title="ClassLoader类加载器"></a>ClassLoader类加载器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>（1）将class文件加载到JVM中</p><p>（2）审查每个类应该由谁加载，它是一种父优先的等级加载机制</p><p>（3）将Class字节码重新解析成JVM统一要求的对象格式</p><h3 id="类结构（方法分析）"><a href="#类结构（方法分析）" class="headerlink" title="类结构（方法分析）"></a>类结构（方法分析）</h3><p>  ClassLoader是抽象类，其中的常用接口方法如下：</p><p>（1）defineClass(byte[], int, int)</p><p>​    将byte流解析成JVM能够识别的Class对象。</p><p>（2）findClass(String)</p><p>直接覆盖ClassLoader父类的findClass方法<strong>实现类的加载规则</strong>。</p><p>（3）resolveClass(Class&lt;?&gt;)</p><p>​    链接（Link），结合JVM运行时环境，准备执行该类或接口。</p><p>（4）loadClass(String)</p><p>在运行时<strong>加载指定类</strong>，获取类的Class对象。</p><p>​    Class&lt;?&gt; class = this.getClass().getClassLoader().loadClass(String)</p><p>（5）getResourceAsStream(xmlPath) </p><p>​    获取当前classpath</p><p>（6）getResource(..)</p><p>​    获取当前classpath</p><h3 id="等级加载机制"><a href="#等级加载机制" class="headerlink" title="等级加载机制"></a>等级加载机制</h3><h4 id="JVM平台提供三层ClassLoader"><a href="#JVM平台提供三层ClassLoader" class="headerlink" title="JVM平台提供三层ClassLoader"></a>JVM平台提供三层ClassLoader</h4><p>​    · Bootstrap ClassLoader 启动类加载器，加载JVM自身工作需要的类</p><p>​    · Extension ClassLoader 扩展类加载器，加载java.ext.dirs目录下的类</p><p>​    · Application ClassLoader 应用程序类加载器，加载classpath下的类</p><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>（1）概念</p><p>  在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。</p><p>加载的时候，<strong>首先会把该请求委派该父类加载器</strong>的 loadClass() 处理，因此所有的请求最终都应该传送到顶层的启动类加载器 BootstrapClassLoader 中。当父类加载器无法处理时，才由自己来处理。当父类加载器为null时，会使用启动类加载器 BootstrapClassLoader 作为父类加载器。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739924.png" alt="img"/><p>（2）每个类加载都有一个父类加载器</p><p>AppClassLoader的父类加载器为ExtClassLoader ExtClassLoader的父类加载器为null，<strong>null并不代表ExtClassLoader没有父类加载器，而是 BootstrapClassLoader</strong>。</p><p>​    类加载器之间的“父子”关系也不是通过继承来体现的，是由“优先级”来决定</p><p>（3）源码分析</p><p>​    双亲委派模型的实现代码非常简单，逻辑非常清晰，都集中在ClassLoader的loadClass()方法中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ClassLoader</span> parent<span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token class-name">Class</span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 首先，检查请求的类是否已经被加载过</span><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//父加载器不为空，调用父加载器loadClass()方法处理**</span>c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//父加载器为空，使用启动类加载器 BootstrapClassLoader 加载**</span>c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//抛出异常说明父类加载器无法完成加载请求</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//自己尝试加载**</span>c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// this is the defining class loader; record the stats         sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);         sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);         sun.misc.PerfCounter.getFindClasses().increment();</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）优点</p><p>​    · 双亲委派模型保证了Java程序的稳定运行，可以避免类的重复加载（JVM 区分不同类的方式不仅仅根据类名，相同的类文件被不同的类加载器加载产生的是两个不同的类）</p><p>​    · 保证了 Java 的核心 API 不被篡改</p><p>（5）如何不适用双亲委派模型</p><p> <strong>自定义加载器的话，需要继承 ClassLoader 。</strong></p><p>​    如果我们不想打破双亲委派模型，就重写 ClassLoader 类中的 findClass() 方法即可，无法被父类加载器加载的类最终会通过这个方法被加载。</p><p>​    但是，如果想打破双亲委派模型则需要重写 loadClass() 方法</p><h3 id="加载class文件过程"><a href="#加载class文件过程" class="headerlink" title="加载class文件过程"></a>加载class文件过程</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739925.png" alt="img"></p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>  · 通过全类名获取定义此类的二进制字节流</p><p>  · 将字节流所代表的静态存储结构转换为方法区的运行时数据结构</p><p>  · 在内存中生成一个代表该类的 Class 对象,作为方法区这些数据的访问入口</p><p>  .class文件 —》 findClass() —》 defineClass()</p><h4 id="链接（Link）"><a href="#链接（Link）" class="headerlink" title="链接（Link）"></a>链接（Link）</h4><p>（1）验证</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739934.png" /><p>（2）准备</p><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段</strong>，这些内存都将在方法区中分配。</p><p>​    ·这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</p><p>​    · 这里所设置的初始值”通常情况”下是数据类型默认的零值（如0、0L、null、false等），比如我们定义了public static int value=111 ，那么 value 变量在准备阶段的初始值就是 0 而不是111（初始化阶段才会赋值）。特殊情况：比如给 value 变量加上了 fianl 关键字public static final int value=111 ，那么准备阶段 value 的值就被赋值为 111。</p><p>（3）解析</p><p>解析阶段是虚拟机将<strong>常量池内的符号引用替换为直接引用</strong>的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符7类符号引用进行。</p><p>符号引用就是一组符号来描述目标，可以是任何字面量。<strong>直接引用</strong>就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>​    初始化是类加载的最后一步，也是真正执行类中定义的 Java 程序代码(字节码)，初始化阶段是执行初始化方法 <clinit> ()方法的过程。</p><p>对于初始化阶段，虚拟机严格规范了有且只有5种情况下，必须对类进行初始化(<strong>只有主动去使用类才会初始化类</strong>)：</p><p>（1）当遇到 new 、 getstatic、putstatic或invokestatic 这4条直接码指令时，比如 new 一个类，读取一个静态字段(未被 final 修饰)、或调用一个类的静态方法时。</p><p>（2）使用 java.lang.reflect 包的方法对类进行反射调用时如Class.forname(“…”),newInstance()等等。 ，如果类没初始化，需要触发其初始化。</p><p>（3）初始化一个类，如果其父类还未初始化，则先触发该父类的初始化。</p><p>（4）当虚拟机启动时，用户需要定义一个要执行的主类 (包含 main 方法的那个类)，虚拟机会先初始化这个类。</p><p>（5）MethodHandle和VarHandle可以看作是轻量级的反射调用机制，而要想使用这2个调用， 就必须先使用findStaticVarHandle来初始化要调用的类。</p><h3 id="常见加载类错误"><a href="#常见加载类错误" class="headerlink" title="常见加载类错误"></a>常见加载类错误</h3><p>（1）ClassNotFoundException</p><p>​      发生在显示加载类时</p><p>（2）NoClassDefFoundError</p><p>​      发生在隐式加载类时</p><p>（3）UnsatisfiedLinkError</p><p>​      解析native方法时</p><p>（4）ClassCastException</p><p>（5）ExceptionInInitializerError</p><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><p>参考：<a href="https://blog.csdn.net/shenwansangz/article/details/95601232">什么是JIT</a></p><p>​    JIT编译（just-in-time compilation）狭义来说是当某段代码即将第一次被执行时进行编译，因而叫“即时编译”。JIT编译是动态编译的一种特例。JIT编译一词后来被泛化，时常与动态编译等价；但要注意广义与狭义的JIT编译所指的区别。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/20160812104144969" alt="JVM运行原理"></p><p>​    当虚拟机发现某个方法或代码块的运行特别频繁时，就会把这些代码认定为“<em>热点代码</em>”。为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，完成这个任务的编译器称为<em>即时编译器</em>（Just In Time Compiler）</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>（1）分类</p><p>​    · 物理内存 RAM，调用操作系统接口访问。</p><p>​    · 虚拟内存，物理内存临时存储在磁盘文件</p><p>（2）划分</p><p>​    · 内核空间，操作系统程序逻辑</p><p>​    · 用户空间，每一次系统调用，都存在两个空间的内存切换</p><h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a>Java内存区域</h2><p>​    还有很多叫法，如JVM内存结构，运行时数据区域。（一定要与Java内存模型JMM分开）。    </p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739954.png" alt="img"></p><p>（1）程序计数器（PC寄存器）</p><p>  · 字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</p><p>  · 在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</p><p>（2）Java虚拟机栈</p><p>Java 虚拟机栈是由一个个栈帧组成，<strong>每一次函数调用都会有一个对应的栈帧</strong>被压入 Java 栈，每一个函数调用结束后，都会有一个栈帧被弹出。而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。</p><p><strong>局部变量表主要存放了编译期可知的各种数据类型</strong>（boolean、byte、char、short、int、float、long、double）、<strong>对象引用</strong>（reference 类型，它不同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）。</p><p>（3）本地方法栈</p><p>  本地方法栈则为虚拟机使用到的 Native 方法服务。</p><p>（4）堆</p><p>Java 虚拟机所管理的内存中最大的一块，Java 堆是所有线程共享的一块内存区域，在虚拟机启动时创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p><p>Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC 堆（Garbage Collected Heap）</strong>.从垃圾回收的角度，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p><p>（5）方法区</p><p>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然<strong>Java 虚拟机规范把方法区描述为堆的一个逻辑部分</strong>，但是它却有一个别名叫做<strong>Non-Heap（非堆）</strong>，目的应该是与 Java 堆区分开来。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739956.png" alt="img" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739975.png" alt="img" style="zoom:80%;" /><p><strong>方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。</strong>也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法</p><h2 id="Java对象创建过程"><a href="#Java对象创建过程" class="headerlink" title="Java对象创建过程"></a>Java对象创建过程</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739978.png" alt="img"></p><h3 id="类加载检查"><a href="#类加载检查" class="headerlink" title="类加载检查"></a>类加载检查</h3><p>  虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><h3 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h3><p>  对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。</p><p>  共有两种内存分配方式，选择两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155740539.png" alt="img"/><p>（1）指针碰撞</p><p>​    · 使用场合：堆内存规整</p><p>​    · 原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界值指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。</p><p>​    · GC收集器：Serial、ParNew</p><p>（2）空闲列表</p><p>​    · 使用场合：堆内存不规整</p><p>​    · 原理：虚拟机会维护一个列表，该列表中会记录那些内存块是可用的，在分配的时候，找一块足够大的内存块来划分给对象实例，最后更新列表记录。  </p><p>​    · GC收集器：CMS</p><p>  在创建对象过程中，需要注意线程安全问题，采用下列两种方法保证线程安全：</p><p>（1）CAS+失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></p><p>（2）TLAB： 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配</p><h3 id="初始化零值"><a href="#初始化零值" class="headerlink" title="初始化零值"></a>初始化零值</h3><p>  虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h3 id="设置对象头"><a href="#设置对象头" class="headerlink" title="设置对象头"></a>设置对象头</h3><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。<strong>这些信息存放在对象头中。</strong>另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><h3 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h3><p>  执行 new 指令之后会接着执行 <init> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><h2 id="Java内存分配和回收"><a href="#Java内存分配和回收" class="headerlink" title="Java内存分配和回收"></a>Java内存分配和回收</h2><p>  Java显式的内存申请有静态内存分配和动态内存分配两种。</p><h3 id="静态内存"><a href="#静态内存" class="headerlink" title="静态内存"></a>静态内存</h3><p>（1）静态内存分配，指Java被编译时就已经能够确定需要的内存空间，当加载到内存时，一次性分配。</p><p>（2）基本数据类型、对象的引用。在栈上分配</p><p>（3）回收：在代码运行结束时回收。</p><h3 id="动态内存"><a href="#动态内存" class="headerlink" title="动态内存"></a>动态内存</h3><p>（1）动态内存分配，指在程序执行时才知道要分配的存储空间大小，而不是在编译器就确定大小。</p><p>（2）new等指令在堆上创建</p><p>（3）回收：检测垃圾回收</p><p>​    · 引用计数法：引用计数为0时，等待回收</p><p>​    · 可达性分析：为不可达集合时，等待回收</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>  首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155740005.jpeg" alt="img" style="zoom:50%;" /><p><strong>会产生大量不连续的碎片。</strong></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a><strong>复制算法</strong></h3><p>  它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739997.jpeg" alt="img" style="zoom:50%;" /><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>根据<strong>老年代</strong>的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739995.jpeg" alt="img"/><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p><strong>当前虚拟机的垃圾收集都采用分代收集算法</strong>，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p><p><strong>在新生代中，</strong>每次收集都会有大量对象死去，所以可以选择<strong>复制算法</strong>，只需要付出少量对象的复制成本就可以完成每次垃圾收集<strong>。</strong></p><p><strong>老年代</strong>的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们<strong>必须选择“标记-清除”或“标记-整理”算法</strong>进行垃圾收集<strong>。</strong></p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155740014.jpeg" alt="img" style="zoom:50%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155740036.png" alt="img" style="zoom:50%;" /><p>（1）堆内存分配策略</p><ul><li><p>对象优先在eden区分配</p></li><li><p>大对象直接进入老年代</p></li><li><p>长期存活的对象将进入老年代</p></li></ul><p>（2）GC步骤</p><ol><li>大部分情况，对象都会首先在 Eden 区域分配</li><li>Eden区满了后，进行一次新生代垃圾回收GC，如果对象还存活，则会进入 s0 或者 s1。并且对象的年龄还会加 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。</li><li>当<strong>s0（from)满了</strong>，就会进行一次GC，将活着的对象放入老年代。</li><li>经过这次GC后，Eden区和”From”区已经被清空。这个时候，”From”和”To”会交换他们的角色，也就是新的”To”就是上次GC前的“From”，新的”From”就是上次GC前的”To”。<strong>不管怎样，都会保证名为To的Survivor区域是空的</strong>。Minor GC会一直重复这样的过程，直到“To”区被填满，**”To”区被填满之后，会将所有对象移动到老年代**中。</li></ol><p>（3）GC分类</p><ul><li><p>部分收集 (Partial GC)：</p><ul><li><p>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；</p></li><li><p>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</p></li><li><p>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</p></li></ul></li><li><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><p>关于系统频繁Full GC的排查：<a href="https://biz.51cto.com/art/201906/598280.htm">排查CPU100%（FUll GC导致）</a>、<a href="https://baijiahao.baidu.com/s?id=1666710293511563448&wfr=spider&for=pc">GC执行步骤和排查频繁FULL GC</a></p></li></ul><p><strong>常见问题1：频繁FULL GC的原因：</strong></p><ul><li><p>代码中一次获取了大量的对象，导致内存溢出，此时可以通过 Eclipse 的 Mat 工具查看内存中有哪些对象比较多。</p></li><li><p>内存占用不高，但是 Full GC 次数还是比较多，此时可能是显示的 System.gc() 调用导致 GC 次数过多，这可以通过添加 -XX:+DisableExplicitGC 来禁用 JVM 对显示 GC 的响应。</p></li></ul><p>其他排查FGC问题的实践指南：</p><ol><li>清楚从程序角度，有哪些原因导致FGC？</li></ol><p>  · 大对象：系统一次性加载了过多数据到内存中（比如SQL查询未做分页），导致大对象进入了老年代。</p><p>  · 内存泄漏：频繁创建了大量对象，但是无法被回收（比如IO对象使用完后未调用close方法释放资源），先引发FGC，最后导致OOM.</p><p>  · 程序频繁生成一些长生命周期的对象，当这些对象的存活年龄超过分代年龄时便会进入老年代，最后引发FGC. （即本文中的案例）</p><p>  · 程序BUG导致动态生成了很多新类，使得 Metaspace 不断被占用，先引发FGC，最后导致OOM.</p><p>  · 代码中显式调用了gc方法，包括自己的代码甚至框架中的代码。</p><p>  · JVM参数设置问题：包括总内存大小、新生代和老年代的大小、Eden区和S区的大小、元空间大小、垃圾回收算法等等。</p><ol start="2"><li>清楚排查问题时能使用哪些工具</li></ol><p>  · 公司的监控系统：大部分公司都会有，可全方位监控JVM的各项指标。</p><p>  · JDK的自带工具，包括jmap、jstat等常用命令：# 查看堆内存各区域的使用率以及GC情况jstat -gcutil -h20 pid 1000# 查看堆内存中的存活对象，并按空间排序jmap -histo pid | head -n20# dump堆内存文件jmap -dump:format=b,file=heap pid</p><p>  · 可视化的堆内存分析工具：JVisualVM、MAT等</p><ol start="3"><li>排查指南</li></ol><p>  · 查看监控，以了解出现问题的时间点以及当前FGC的频率（可对比正常情况看频率是否正常）</p><p>  · 了解该时间点之前有没有程序上线、基础组件升级等情况。</p><p>  · 了解JVM的参数设置，包括：堆空间各个区域的大小设置，新生代和老年代分别采用了哪些垃圾收集器，然后分析JVM参数设置是否合理。</p><p>  · 再对步骤1中列出的可能原因做排除法，其中元空间被打满、内存泄漏、代码显式调用gc方法比较容易排查。</p><p>  · 针对大对象或者长生命周期对象导致的FGC，可通过 jmap -histo 命令并结合dump堆内存文件作进一步分析，需要先定位到可疑对象。</p><p>  · 通过可疑对象定位到具体代码再次分析，这时候要结合GC原理和JVM参数设置，弄清楚可疑对象是否满足了进入到老年代的条件才能下结论。</p><p><strong>常见问题2：****线上可能出现的导致系统缓慢的情况及处理：</strong></p><p>简要的说，我们进行线上日志分析时，主要可以分为如下步骤：</p><p>①通过 top 命令查看 CPU 情况，如果 CPU 比较高，则通过 top -Hp 命令查看当前进程的各个线程运行情况。</p><p>  找出 CPU 过高的线程之后，将其线程 id 转换为十六进制的表现形式，然后在 jstack 日志中查看该线程主要在进行的工作。</p><p>这里又分为两种情况：</p><p>  · 如果是正常的用户线程，则通过该线程的堆栈信息查看其具体是在哪处用户代码处运行比较消耗 CPU。</p><p>  · 如果该线程是 VM Thread，则通过 jstat -gcutil 命令监控当前系统的 GC 状况。<br>   然后通过 jmap dump:format=b,file= 导出系统当前的内存数据。<br>   导出之后将内存情况放到 Eclipse 的 Mat 工具中进行分析即可得出内存中主要是什么对象比较消耗内存，进而可以处理相关代码。</p><p>②如果通过 top 命令看到 CPU 并不高，并且系统内存占用率也比较低。此时就可以考虑是否是由于另外三种情况导致的问题。</p><p>具体的可以根据具体情况分析：</p><p>  · 如果是接口调用比较耗时，并且是不定时出现，则可以通过压测的方式加大阻塞点出现的频率，从而通过 jstack 查看堆栈信息，找到阻塞点。</p><p>  · 如果是某个功能突然出现停滞的状况，这种情况也无法复现，此时可以通过多次导出 jstack 日志的方式对比哪些用户线程是一直都处于等待状态，这些线程就是可能存在问题的线程。</p><p>  · 如果通过 jstack 可以查看到死锁状态，则可以检查产生死锁的两个线程的具体阻塞点，从而处理相应的问题。</p><h2 id="常见垃圾收集器"><a href="#常见垃圾收集器" class="headerlink" title="常见垃圾收集器"></a>常见垃圾收集器</h2><h3 id="Serial-Collector"><a href="#Serial-Collector" class="headerlink" title="Serial Collector"></a>Serial Collector</h3><p>Serial（串行）收集器收集器是最基本、历史最悠久的垃圾收集器了。大家看名字就知道这个收集器是一个单线程收集器了。它的<strong>“单线程”</strong>的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（**”Stop The World”**），直到它收集结束。</p><p>优点：它<strong>简单而高效（与其他收集器的单线程相比）</strong></p><p>缺点：用户体验差，有停顿时间</p><p>新生代采用复制算法，老年代采用标记-整理算法</p><h3 id="Parallel-Collector"><a href="#Parallel-Collector" class="headerlink" title="Parallel Collector"></a>Parallel Collector</h3><p>  ParNew 收集器其实就是 Serial 收集器的多线程版本，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p><p>  它是许多运行在 Server 模式下的虚拟机的首要选择。</p><p>  新生代采用复制算法，老年代采用标记-整理算法</p><p>  并行，不是并发，用户使用仍然有停顿。</p><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>（1）CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</p><p>（2）步骤</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155740028.jpeg" alt="img"></p><p><strong>CMS是“标记-清除”算法</strong>实现的。</p><p><strong>· 初始标记：</strong>暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</p><p><strong>· 并发标记：</strong>同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</p><p><strong>· 重新标记：</strong>重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</p><p><strong>· 并发清除：</strong>开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</p><p>（3）优缺点</p><p>·优点：并发收集、低停顿。</p><p>· 缺点：</p><p>  ·对 CPU 资源敏感；</p><p>  ·无法处理浮动垃圾；</p><p>  ·它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</p><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>（1）概念</p><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.</strong></p><p><strong>（2）特点</strong></p><p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备一下特点：</p><p><strong>·并行与并发</strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</p><p><strong>·分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</p><p><strong>·空间整合</strong>：与 CMS 的“标记–清理”算法不同，G1 从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</p><p><strong>·可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。</p><p>（3）运行步骤</p><p>  G1 收集器的运作大致分为以下几个步骤：</p><p><strong>·初始标记</strong></p><p><strong>·并发标记</strong></p><p><strong>·最终标记</strong></p><p><strong>·筛选回收</strong></p><p>  **G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)**。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p><h2 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h2><h3 id="堆内存相关"><a href="#堆内存相关" class="headerlink" title="堆内存相关"></a>堆内存相关</h3><h4 id="显示指定堆内存"><a href="#显示指定堆内存" class="headerlink" title="显示指定堆内存"></a>显示指定堆内存</h4><p>  -Xms<heapsize>[unit]</p><p>  -Xmx<heapsize>[unit]</p><p><strong>·heap size</strong>表示要初始化内存的具体大小。</p><p><strong>·unit</strong>表示要初始化内存的单位。单位为<em>*<em>“ g”*</em>* (GB) 、*<strong>“ m”</strong>*（MB）、*</em>*“ k”***（KB）。</p><p>-Xms2G -Xmx5G</p><h4 id="显示指定新生代内存大小"><a href="#显示指定新生代内存大小" class="headerlink" title="显示指定新生代内存大小"></a>显示指定新生代内存大小</h4><p>**默认情况下，YG 的最小大小为 1310*MB*，最大大小为*无限制***。一共有两种指定 新生代内存(Young Ceneration)大小的方法。</p><p>（1）<strong>通过-XX:NewSize和-XX:MaxNewSize指定</strong></p><p>​    -XX:NewSize=<youngsize>[unit]</p><p>​    -XX:MaxNewSize=<youngsize>[unit]</p><p>-XX:NewSize=256m-XX:MaxNewSize=1024m</p><p>（2）<strong>通过-Xmn<young size>[unit] 指定</strong></p><p>-Xmn256m</p><p>*<em>还可以通过*</em>-XX:NewRatio=*<em>来设置新生代和老年代内存的比值。</em>*</p><h4 id="显示指定永久代-元空间的大小"><a href="#显示指定永久代-元空间的大小" class="headerlink" title="显示指定永久代/元空间的大小"></a><strong>显示指定永久代/元空间的大小</strong></h4><p>（1）JDK1.8之前</p><p>-XX:PermSize=N //方法区 (永久代) 初始大小</p><p>-XX:MaxPermSize=N //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</p><p>（2）<strong>JDK 1.8</strong></p><p>  方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p>-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小，如果不指定大小</p><h3 id="垃圾收集相关"><a href="#垃圾收集相关" class="headerlink" title="垃圾收集相关"></a>垃圾收集相关</h3><p>JVM具有四种类型的<em>GC</em>实现：</p><p>  ·串行垃圾收集器</p><p>  ·并行垃圾收集器</p><p>  ·CMS垃圾收集器</p><p>   ·G1垃圾收集器</p><p>可以使用以下参数声明这些实现：</p><p>-XX:+UseSerialGC</p><p>-XX:+UseParallelGC</p><p>-XX:+USeParNewGC</p><p>-XX:+UseG1GC</p><h3 id="GC调优策略"><a href="#GC调优策略" class="headerlink" title="GC调优策略"></a>GC调优策略</h3><h4 id="GC-调优原则"><a href="#GC-调优原则" class="headerlink" title="GC 调优原则"></a>GC 调优原则</h4><p>  多数的 Java 应用不需要在服务器上进行 GC 优化； </p><p>  多数导致 GC 问题的 Java 应用，都不是因为我们参数设置错误，而是代码问题；</p><p>  在应用上线之前，先考虑将机器的 JVM 参数设置到最优（最适合）； </p><p>  减少创建对象的数量； </p><p>  减少使用全局变量和大对象； </p><p>  GC 优化是到最后不得已才采用的手段； </p><p>  在实际使用中，分析 GC 情况优化代码比优化 GC 参数要多得多。</p><h4 id="GC-调优目的"><a href="#GC-调优目的" class="headerlink" title="GC 调优目的"></a>GC 调优目的</h4><p>  将转移到老年代的对象数量降低到最小； </p><p>  减少 GC 的执行时间。</p><h4 id="GC-调优策略"><a href="#GC-调优策略" class="headerlink" title="GC 调优策略"></a>GC 调优策略</h4><p>（1）策略 1</p><p>将新对象预留在新生代，由于 Full GC 的成本远高于 Minor GC，因此尽可能将对象分配在新生代是明智的做法，实际项目中根据 GC 日志分析新生代空间大小分配是否合理，适当通过“-Xmn”命令调节新生代大小，<strong>最大限度降低新对象直接进入老年代的情况</strong>。</p><p>（2）策略 2</p><p>大对象进入老年代，虽然大部分情况下，将对象分配在新生代是合理的。但是对于大对象这种做法却值得商榷，大对象如果首次在新生代分配可能会出现空间不足导致很多年龄不够的小对象被分配的老年代，破坏新生代的对象结构，可能会出现频繁的 full gc。因此，<strong>对于大对象，可以设置直接进入老年代（当然短命的大对象对于垃圾回收来说简直就是噩梦）。-XX:PretenureSizeThreshold 可以设置直接进入老年代的对象大小</strong>。</p><p>（3）策略 3</p><p>  合理设置进入老年代对象的年龄，-XX:MaxTenuringThreshold 设置对象进入老年代的年龄大小，减少老年代的内存占用，降低 full gc 发生的频率。</p><p>（4）策略 4</p><p>  设置稳定的堆大小，堆大小设置有两个参数：-Xms 初始化堆大小，-Xmx 最大堆大小。</p><p>（5）策略5</p><p>注意： 如果满足下面的指标，则一般不需要进行 GC 优化：</p><p>MinorGC 执行时间不到50ms； Minor GC 执行不频繁，约10秒一次； Full GC 执行时间不到1s； Full GC 执行频率不算频繁，不低于10分钟1次。</p><h2 id="JVM的可移植性"><a href="#JVM的可移植性" class="headerlink" title="JVM的可移植性"></a>JVM的可移植性</h2><ul><li><a href="https://www.jianshu.com/p/82349289479c">Java可移植性</a></li></ul><p> Java语言之中最大的特点在于其可移植性的支持，所谓的可移植性指的是同一个程序可以在不同的操作系统之间任意的进行部署，这样就减少了开发的难度，在Java里面如果要想实现可移植性的控制，那么主要依靠的是JVM（Java 虚拟机）。Java虚拟机是一个由软件和硬件模拟出来的计算机，所有的程序只要有Java虚拟机的支持，那么就可以实现程序的执行，并且不同的操作系统上会有不同版本的JVM存在，这样就可以实现移植性。</p><ul><li><a href="https://blog.csdn.net/weixin_39895881/article/details/114811033">java语言的可移植性为什么比较高_在JAVA可移植性的来源的三方面</a></li></ul><p>JAVA采用了提供一套与平台无关的库函数(包括AWT、UTIL、LANG等等)的方法来解决这个问题。就象JVM提供了一个虚拟的CPU一样，JAVA库函数提供了一个虚拟的GUI环境。JAVA程序仅对JAVA库函数提出调用，而库函数对操作系统功能的调用由各不同的虚拟机来完成。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础+集合</title>
      <link href="/2020/10/26/java-ji-chu-ji-he/"/>
      <url>/2020/10/26/java-ji-chu-ji-he/</url>
      
        <content type="html"><![CDATA[<p><em>由简书搬迁而来<a href="https://www.jianshu.com/p/0e5776786b46"><strong>原文链接</strong></a></em></p><blockquote><p>目录<br>  <strong>1 Java基础<br>  2 Java集合</strong>  </p><p>  参考资料<br>  ·《Java编程思想》<br>·《Java Web 技术内幕》<br>·《Java 并发编程实战》     </p></blockquote><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>  用引用（reference）操纵对象。犹如遥控器和电视机的关系。</p><h4 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h4><p>  创建对象，并存储在堆heap中。</p><h4 id="特例：基本类型"><a href="#特例：基本类型" class="headerlink" title="特例：基本类型"></a>特例：基本类型</h4><p>（1）基本类型与包装类</p><p>​    <strong>·</strong> 装箱过程是通过调用valueOf方法（Integer Integer.valueOf(int)）实现的，拆箱为xxxValue()（int Integer.intValue()）。</p><p>​    · Integer装箱时，在[-128, 127]之间不创建新对象，否则创建新对象。</p><p>​    · Integer、Short、Byte、Character、Long类似。Double、Float装箱类似，每次创建新对象。</p><p>​    · 当 “==”运算符的两个操作数都是 包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）。另外，对于包装器类型，equals方法并不会进行类型转换。</p><p><strong>demo:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> e <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> f <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> g <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> h <span class="token operator">=</span> <span class="token number">2L</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token operator">+</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token boolean">true</span>  <span class="token boolean">false</span>  <span class="token boolean">true</span>  <span class="token boolean">true</span>  <span class="token boolean">true</span>  <span class="token boolean">false</span>   <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　第一个和第二个输出结果没有什么疑问。第三句由于 a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法），因此它们比较的是数值是否相等。而对于c.equals(a+b)会先触发自动拆箱过程，再触发自动装箱过程，也就是说a+b，会先各自调用intValue方法，得到了加法运算后的数值之后，便调用Integer.valueOf方法，再进行equals比较。同理对于后面的也是这样，不过要注意倒数第二个和最后一个输出的结果（如果数值是int类型的，装箱过程调用的是Integer.valueOf；如果是long类型的，装箱调用的Long.valueOf方法）。</p><p>（2）存储位置：堆栈</p><p>（3）8中基本类型的字节大小。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951587.png" alt="img"></p><h3 id="不需要手动销毁对象"><a href="#不需要手动销毁对象" class="headerlink" title="不需要手动销毁对象"></a>不需要手动销毁对象</h3><p>  · 作用域：花括号决定</p><p>  · GC机制决定不需要手动销毁对象。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>（1）成员变量（字段）、成员函数（方法）。其中对于基本类型的成员变量有默认值。</p><p>（2）Java程序：</p><p>​    · 无“向前引用”问题</p><p>​    · 通配符 <code>*</code>，<code>import java.lang.*</code></p><p>​    · <strong>static 修饰时，属于类属性</strong>，与实例无关。</p><p>​    · java.lang 在程序中被自动导入。</p><p>​    · 编码风格：命名规则采用“驼峰命名法”。<strong>类名的首字母要大写</strong>；如果类名由几个单词构成，则并在一起，每个内部单词的首字母采用大写；<strong>方法、字段以及对象引用名称</strong>等与类相似，只是这些<strong>标识符的第一个字母采用小写</strong>。</p><h3 id="对象的构成"><a href="#对象的构成" class="headerlink" title="对象的构成"></a>对象的构成</h3><p><a href="https://blog.csdn.net/qq_32252957/article/details/83001750">Java的对象头和对象组成详解_Clarence-CSDN博客</a></p><ul><li><p>对象头</p><ul><li><p>Mark Word</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/image-20210630145316284.png" alt="image-20210630145316284"/></li><li><p>指向类的指针</p></li><li><p>数组长度（只有数组对象才有）</p></li></ul></li><li><p>实例数据</p></li><li><p>对齐填充字节</p></li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h3><p>  “==”与equals()区别：</p><p>  · ==对基本类型来说比较数值，对引用类型来说比较的是内存地址。</p><p>  · equals（）在没有被覆盖时，等价于“==”。当被覆盖时，一般比较的是对象的内容。</p><p>  <strong>· String对象中的equals（）方法被覆盖过了，比较的是内容。</strong></p><h3 id="按位操作符"><a href="#按位操作符" class="headerlink" title="按位操作符"></a><strong>按位操作符</strong></h3><p>  非（~）不能用于布尔类型，可用！（逻辑操作符）。</p><h3 id="移位符"><a href="#移位符" class="headerlink" title="移位符"></a>移位符</h3><p>  · &gt;&gt;&gt; “无符号”右移</p><p>  · char、byte、short 移位前需要转int类型</p><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>  String中的“+”操作符底层原理：</p><p>​    new StringBuffer(str).append(c).toString()；</p><h3 id="类型转换（cast）"><a href="#类型转换（cast）" class="headerlink" title="类型转换（cast）"></a>类型转换（cast）</h3><p>· 基本数据类型</p><p>  · 窄化转换（危险）</p><p>  · 扩展转换（安全）</p><h2 id="控制执行"><a href="#控制执行" class="headerlink" title="控制执行"></a>控制执行</h2><p>  foreach 用于<strong>数组和容器</strong></p><p>​      · 任何一个返回数组的方法 for(String str : getString()){ }</p><p>​      · 任何Iterable对象</p><h2 id="初始化与清理"><a href="#初始化与清理" class="headerlink" title="初始化与清理"></a>初始化与清理</h2><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>  如果已经定义了一个构造器（有/无参），编译器不会自动创建默认构造器，<strong>此时调用默认无参构造器报错</strong>。</p><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><p>  同一个类中，方法名相同，参数的类型、个数、顺序不同。</p><p><strong>注意，方法的关键字和返回值不同，会报错</strong>，不属于重载。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>  · 获得当前对象的引用</p><p>  · 只能在方法内部使用</p><p>  · 构造器之间调用时，this 只能最多有一个，且只能放第一行</p><p>  · 不能再staitc修饰的方法中调用</p><h3 id="终结处理与垃圾回收"><a href="#终结处理与垃圾回收" class="headerlink" title="终结处理与垃圾回收"></a>终结处理与垃圾回收</h3><h4 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h4><p>（1）finalize()方法是Object类中提供的一个方法，在GC准备释放对象所占用的内存空间之前，它将首先调用finalize()方法。其在Object中定义如下：protected void finalize() throws Throwable { }</p><p>（2）finalize()调用的时机</p><p>​    与C++的析构函数（对象在清除之前析构函数会被调用）不同，在Java中，由于GC的自动回收机制，因而并不能保证finalize方法会被及时地执行（垃圾对象的回收时机具有不确定性），也不能保证它们会被执行(程序由始至终都未触发垃圾回收)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalizer</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finalizer-->finalize()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Finalizer</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Finalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//无输出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Finalizer</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finalizer-->finalize()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">Finalizer</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Finalizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   f <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动请求gc</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出 Finalizer-->finalize()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3） 什么时候应该使用它</p><p>  finalize()方法中一般用于释放非Java 资源（如打开的文件资源、数据库连接等）,或是调用非Java方法（native方法）时分配的内存（比如C语言的malloc()系列函数）。</p><p>（4）为什么避免使用</p><p>  首先，由于finalize()方法的调用时机具有不确定性，从一个对象变得不可到达开始，到finalize()方法被执行，所花费的时间这段时间是任意长的。我们并不能依赖finalize()方法能及时的回收占用的资源，可能出现的情况是在我们耗尽资源之前，gc却仍未触发，因而通常的做法是提供显示的close()方法供客户端手动调用。</p><p>  另外，重写finalize()方法意味着延长了回收对象时需要进行更多的操作，从而延长了对象回收的时间。</p><h4 id="显示GC（-system-gc-）也不一定执行"><a href="#显示GC（-system-gc-）也不一定执行" class="headerlink" title="显示GC（ system.gc() ）也不一定执行"></a>显示GC（ system.gc() ）也不一定执行</h4><h4 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h4><p>（1） 引用计数</p><p>​      描述工作方式，未实现。</p><p>（2）复制</p><p>（3）标记清除</p><p>（4）标记整理</p><p>（5）分代收集机制</p><p>​    · 新生代（使用复制算法）</p><p>​    · 老年代（使用标记清除和标记整理算法）</p><h3 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h3><p>（1）字段在任何方法（包括构造器）之前得到初始化。</p><p>（2）static</p><p>​    · 只有在必要时刻才会进行（<strong>访问该类</strong>，因为staic修饰属于类属性）</p><p>​    · 代码块加载顺序</p><p>​      静态代码块（类加载的时候加载一次）—&gt; 普通代码块（在实例化时加载，可加载多次）—&gt; 构造函数（先调用父类构造函数）</p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>（1）每个.java文件只能包含一个public类</p><p>（2）访问权限修饰词</p><p>​      · 包访问权限（默认）</p><p>​      · public 对每个人可见</p><p>​      · private 仅该类可见<strong>（子类可以通过set、get方法调用private属性），不可修饰类</strong></p><p>​      · protected 继承的子类可见 <strong>不可修饰类</strong></p><p>​      <em><strong>· 将构造函数用private修饰，可以做成单例模式。</strong></em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 利用private修饰构造器，完成单例模式</span><span class="token class-name">Class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Demo</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> p<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="复用类"><a href="#复用类" class="headerlink" title="复用类"></a>复用类</h2><h3 id="组合类"><a href="#组合类" class="headerlink" title="组合类"></a>组合类</h3><p>  在类的字段中包含对其他类的引用。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>  <strong>所有类都隐式继承Object类。</strong></p><p>  Object类的方法：</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144950882.png" alt="img"/><p>  · 关于clone方法：<a href="https://www.jianshu.com/p/94dbef2de298">Java 浅拷贝和深拷贝 - 简书</a>、<a href="https://blog.csdn.net/xinghuo0007/article/details/78896726">java中clone方法的理解（深拷贝、浅拷贝）_xinghuo0007的博客-CSDN博客</a></p><p>（1）语法</p><p>​    · 父类中，成员变量用private，成员方法用public</p><p>​    · 使用extends关键字</p><p>​    · 使用super.function()在覆盖的方法中访问父类方法。</p><p>（2）初始化</p><p>​    · 子类没有构造器，调用父类的</p><p>​    · 基类先加载。基类在导出类构造器可以访问它之前，就已经完成初始化。</p><p>（3）覆盖（复写）</p><p>​    · 重载基类的方法，基类本身的方法并不会被屏蔽。</p><p>​    <strong>· 只想覆盖 @override注解（不加注解，基类的方法依然存在）</strong></p><p>（4）向上转型</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>（1）数据</p><p>​    · 编译时常量，无法创建setter方法</p><p>​    · 运行时初始化并不变</p><p>​    · 使用前总被初始化</p><p>（2）方法</p><p>​    防止继承类修改。（private 隐式在子类中指定为final）</p><p>（3）类</p><p>​    不可被继承，所有方法隐式为final</p><h3 id="初始化及加载"><a href="#初始化及加载" class="headerlink" title="初始化及加载"></a>初始化及加载</h3><p>（1）有基类，先加载</p><p>（2）加载static</p><p>（3）new 先加载基类构造器，再加载子类构造器。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>  <strong>面向对象的三大特征：封装、继承、多态。</strong></p><h3 id="方法调用绑定"><a href="#方法调用绑定" class="headerlink" title="方法调用绑定"></a>方法调用绑定</h3><p>（1）前期绑定：在程序编译期间绑定</p><p>（2）后期绑定：在运行时绑定（动态绑定），static方法不具有多态。</p><h3 id="多态设计"><a href="#多态设计" class="headerlink" title="多态设计"></a>多态设计</h3><p>  · 继承</p><p>  · 组合：通过类似set方法，修改成员变量</p><p>  · 接口</p><h3 id="向上转型（安全）"><a href="#向上转型（安全）" class="headerlink" title="向上转型（安全）"></a>向上转型（安全）</h3><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>  提供了一种将接口和实现分离的方法。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抽象函数。需要abstract修饰，并分号;结束</span><span class="token punctuation">&#125;</span><span class="token comment">//manager</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在赋予权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）<strong>包含</strong>抽象方法的类 abstract</p><p>​    可以含有构造方法，子类实例化时，先调用父类构造器。</p><p>（2）继承</p><p>​    · 子类必须实现抽象方法</p><p>​    · 可以继续使用abstact修饰，可以不用实现抽象方法</p><p>（3）不需要所有方法都是抽象</p><p><strong>（4）不可以实例化</strong></p><h3 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h3><p>（1）所以方法都抽象，且隐式为public的</p><p>（2）可以包含域，隐式为static和final的</p><p>（3）实现：子类实现所有接口方法 implements</p><p><strong>（4）不可以实例化</strong></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>（1）extends 一个基类 implements 多个接口</p><p>（2）接口之间可以使用extends继承</p><p>（3）可以向上转型为任意接口</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>（1）策略设计模式：根据所传参对象不同，具有不同方法（重载）</p><p>（2）适配器设计模式：接受拥有的接口，产生所需要的对象</p><p>（3）工厂方法设计模式：返回接口的某个实现的对象</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>（1）基本异常Exception</p><ul><li><p>new 异常对象</p></li><li><p>异常参数：</p><ul><li>默认构造器</li><li>字符串</li></ul></li></ul><p>（2）捕获异常</p><ul><li><p>try….catch语句</p><p>异常处理的结果有终止模型和恢复模型两种。<strong>Java支持终止模型</strong>，认为错误非常关键，以至于程序无法返回到异常发生的地方继续执行，一旦异常被抛出，就表明错误已无法挽回，也不能回来继续执行。</p></li><li><p>finally</p><ul><li>作用：把内存之外的资源恢复到初始状态，如已经打开的文件或者网络等。</li><li>含有return时，覆盖其他return。</li></ul></li></ul><p>（3）自定义异常：extends Exception</p><p>（4）抛出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">XXXException</span><span class="token punctuation">(</span><span class="token string">"...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）异常说明 throws</p><p>（6）发现异常时的清理：在创建需要清理的对象之后，立即进入try-catch-fianlly（嵌套）</p><p>（7）java.lang.Throwable</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951512.png" /><ul><li><p>Error（错误）：是程序无法处理的错误，表示运行应用程序中较严重问题。<strong>编译时和系统错误</strong>。</p></li><li><p>Exception（异常）：是程序本身可以处理的异常。可以被抛出的异常。</p></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="String对象不可变"><a href="#String对象不可变" class="headerlink" title="String对象不可变"></a>String对象不可变</h3><ul><li><p>定义：private final byte/char value[] （byte定义是JDK1.9出现的）</p></li><li><p><a href="https://blog.csdn.net/vegetable_bird_001/article/details/51278339">字符串常量与常量池的关系</a></p><ul><li><p>常量</p><p>用final修饰的成员变量表示常量，值一旦给定就无法改变！final修饰的变量有三种：静态变量、实例变量和局部变量，分别表示三种类型的常量。</p></li><li><p>方法区的常量池</p><img src="E:\我的\GithubBlog\Jason-QianHao.github.io\assets\Java\1240-20210630155739956.png" alt="img" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630155739975.png" alt="img" style="zoom:80%;" /><p>运行时常量池相对于CLass文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入CLass文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用比较多的就是String类的intern()方法。</p></li><li><p>常量池的好处<br>常量池是为了避免频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。<br>例如字符串常量池，在编译阶段就把所有的字符串文字放到一个常量池中。<br>（1）节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。<br>（2）节省运行时间：比较字符串时，==比equals()快。对于两个引用变量，只用==判断引用是否相等，也就可以判断实际值是否相等。</p></li><li><p>String类型的常量池</p><p>（1）只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</p><p>（2）对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</p><p><em>可以粗略认为：字符串常量池存放的是对象引用，不是对象。在Java中，对象都创建在堆内存中（待验证）</em></p></li><li><p>String的intern()方法</p><p>查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>            <span class="token class-name">String</span> bb<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str1<span class="token operator">==</span> bb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="“-”“-”的重载"><a href="#“-”“-”的重载" class="headerlink" title="“+”“+=”的重载"></a>“+”“+=”的重载</h3><p>​    · java中仅有的两个重载过的操作符</p><p>​    · “+”底层用了StringBuffer()的append()和toString()方法。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>（1）创建正则 java.util.regex.Pattern</p><p>（2）表达式</p><p>​    · <code>split( regex )</code></p><p>​    · <code>replaceAll(regx，String)</code></p><p>​    反斜杠 <code>\</code> 在 Java 中表示转义字符，这意味着 <code>\</code> 在 Java 拥有预定义的含义。</p><p>这里例举两个特别重要的用法：</p><ul><li>在匹配 <code>.</code> 或 <code>&#123;</code> 或 <code>[</code> 或 <code>(</code> 或 <code>?</code> 或 <code>$</code> 或 <code>^</code> 或 <code>*</code> 这些特殊字符时，需要在前面加上 <code>\\</code>，比如匹配 <code>.</code>时，Java 中要写为 <code>\\.</code>，但对于正则表达式来说就是 <code>\.</code>。</li><li>在匹配 <code>\</code> 时，Java 中要写为 <code>\\\\</code>，但对于正则表达式来说就是 <code>\\</code>。</li></ul><p><strong>注意</strong>：Java 中的正则表达式字符串有两层含义，首先 Java 字符串转义出符合正则表达式语法的字符串，然后再由转义后的正则表达式进行模式匹配。</p><p>正则表达式参考：<a href="https://segmentfault.com/a/1190000009162306">Java正则表达式</a></p><h4 id="常见匹配符号"><a href="#常见匹配符号" class="headerlink" title="常见匹配符号"></a>常见匹配符号</h4><table><thead><tr><th align="center">正则表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>.</code></td><td align="center">匹配所有单个字符，除了换行符（Linux 中换行是 <code>\n</code>，Windows 中换行是 <code>\r\n</code>）</td></tr><tr><td align="center"><code>^regex</code></td><td align="center">正则必须匹配字符串开头</td></tr><tr><td align="center"><code>regex$</code></td><td align="center">正则必须匹配字符串结尾</td></tr><tr><td align="center"><code>[abc]</code></td><td align="center">复选集定义，匹配字母 a 或 b 或 c</td></tr><tr><td align="center"><code>[abc][vz]</code></td><td align="center">复选集定义，匹配字母 a 或 b 或 c，后面跟着 v 或 z</td></tr><tr><td align="center"><code>[^abc]</code></td><td align="center">当插入符 <code>^</code> 在中括号中以第一个字符开始显示，则表示否定模式。此模式匹配所有字符，除了 a 或 b 或 c</td></tr><tr><td align="center"><code>[a-d1-7]</code></td><td align="center">范围匹配，匹配字母 a 到 d 和数字从 1 到 7 之间，但不匹配 d1</td></tr><tr><td align="center"><code>XZ</code></td><td align="center">匹配 X 后直接跟着 Z</td></tr><tr><td align="center">X|Z</td><td align="center">匹配 X 或 Z</td></tr></tbody></table><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>元字符是一个预定义的字符。</p><table><thead><tr><th align="center">正则表达式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>\d</code></td><td align="center">匹配一个数字，是 <code>[0-9]</code> 的简写</td></tr><tr><td align="center"><code>\D</code></td><td align="center">匹配一个非数字，是 <code>[^0-9]</code> 的简写</td></tr><tr><td align="center"><code>\s</code></td><td align="center">匹配一个空格，是 <code>[ \t\n\x0b\r\f]</code> 的简写</td></tr><tr><td align="center"><code>\S</code></td><td align="center">匹配一个非空格</td></tr><tr><td align="center"><code>\w</code></td><td align="center">匹配一个单词字符（大小写字母、数字、下划线），是 <code>[a-zA-Z_0-9]</code> 的简写</td></tr><tr><td align="center"><code>\W</code></td><td align="center">匹配一个非单词字符（除了大小写字母、数字、下划线之外的字符），等同于 <code>[^\w]</code></td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>限定符定义了一个元素可以发生的频率。</p><table><thead><tr><th align="center">正则表达式</th><th align="center">描述</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center"><code>*</code></td><td align="center">匹配 &gt;=0 个，是 <code>&#123;0,&#125;</code> 的简写</td><td align="center"><code>X*</code> 表示匹配零个或多个字母 X，<code>.*</code> 表示匹配任何字符串</td></tr><tr><td align="center"><code>+</code></td><td align="center">匹配 &gt;=1 个，是 <code>&#123;1,&#125;</code> 的简写</td><td align="center"><code>X+</code> 表示匹配一个或多个字母 X</td></tr><tr><td align="center"><code>?</code></td><td align="center">匹配 1 个或 0 个，是 <code>&#123;0,1&#125;</code> 的简写</td><td align="center"><code>X?</code> 表示匹配 0 个或 1 个字母 X</td></tr><tr><td align="center"><code>&#123;X&#125;</code></td><td align="center">只匹配 X 个字符</td><td align="center"><code>\d&#123;3&#125;</code> 表示匹配 3 个数字，<code>.&#123;10&#125;</code> 表示匹配任何长度是 10 的字符串</td></tr><tr><td align="center"><code>&#123;X,Y&#125;</code></td><td align="center">匹配 &gt;=X 且 &lt;=Y 个</td><td align="center"><code>\d&#123;1,4&#125;</code> 表示匹配至少 1 个最多 4 个数字</td></tr><tr><td align="center"><code>*?</code></td><td align="center">如果 <code>?</code> 是限定符 <code>*</code> 或 <code>+</code> 或 <code>?</code> 或 <code>&#123;&#125;</code> 后面的第一个字符，那么表示<strong>非贪婪模式</strong>（尽可能少的匹配字符），而不是默认的<strong>贪婪模式</strong></td><td align="center"></td></tr></tbody></table><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>（1）StringBuilder</p><p>​    · extends AbstractStringBuilder，不用final修饰</p><p>​    · 线程不安全</p><p>（2）StringBuffer</p><p>​    · extends AbstractStringBuilder</p><p>​    · 线程安全，对方法加同步锁</p><p>（3）常用方法：append、insert、indexOf、toString()</p><h2 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h2><h3 id="RTTI"><a href="#RTTI" class="headerlink" title="RTTI"></a>RTTI</h3><p>​    运行时类型识别。</p><p>  （1）“传统”，假定在编译时知道了所有类型</p><p>  （2）“反射”，在运行时<strong>发现和使用</strong>类的信息</p><h3 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h3><p>  java.lang.Class类</p><p>（1）被编译后产生，保存在.class文件中</p><p>（2）用来创建类的所有对象。创建前，用类加载器加载Class对象</p><p>（3）获取Class对象的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>“类的全限定名”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span> <span class="token class-name">Class</span> c2 <span class="token operator">=</span> 类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token number">3.</span> <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="RTTI应用场景"><a href="#RTTI应用场景" class="headerlink" title="RTTI应用场景"></a>RTTI应用场景</h3><p>（1）类型转换</p><p>（2）class对象</p><p>（3）instance of</p><p>（4）反射</p><p>​    class类与java.lang.reflect类库</p><p>（5）JDK动态代理</p><p>​    Proxy.newProxyInstance(类加载器，接口列表（目标接口），InvocationHandler实例)</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>（1）基于<strong>字节</strong>操作：InputStream/OutputStream</p><p>​    <strong>数据持久化或者网络传输</strong>都是以字节进行的。</p><p>（2）基于<strong>字符</strong>操作：Reader/Writer</p><p>（3）基于<strong>磁盘</strong>操作：File</p><p>（4）基于<strong>网络</strong>操作：Socket</p><p>  InputStreamReader从字节到字符转化，需要制定字符集</p><p>  OutputStreamWriter从字符到字节转化</p><p>字符和字节的区别：<a href="https://www.runoob.com/w3cnote/byte-character.html">字节与字符的区别 | 菜鸟教程</a></p><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>（1）BIO</p><p>​    · 同步阻塞</p><p>​    · 面向流</p><p>​    · 数据读取阻塞在线程中</p><p>（2）NIO</p><p>​    · 同步非阻塞</p><p>​    · 面向缓冲、基于通道，有选择器</p><p>​    · channel、selector、Buffer</p><p>（3）AIO</p><p>​    · 异步非阻塞</p><p>​    · 基于事件和回调机制</p><h3 id="磁盘IO工作模式"><a href="#磁盘IO工作模式" class="headerlink" title="磁盘IO工作模式"></a>磁盘IO工作模式</h3><p>（1）调用方式</p><p>​     <strong>读取和写入文件IO操作都调用操作系统提供的接口，因为磁盘设备是由操作系统管理的。</strong></p><p>  系统调用read()/write() —-》内核空间（含缓存机制） —–》用户空间</p><p>（2）访问文件方式</p><ul><li>标准访问文件方式：先查缓存，再查磁盘。write()时，内核缓存同步sync时间由操作系统决定。</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144952261.jpeg" alt="img" style="zoom:40%;" /><ul><li>直接IO： 不经过内核空间</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144952818.jpeg" alt="img" style="zoom:40%;" /><ul><li>同步访问文件：数据写到磁盘才返回成功标志给应用程序。</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951310.jpeg" alt="img" style="zoom:40%;" /><ul><li>异步访问文件：不阻塞等待</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951439.jpeg" alt="img" style="zoom:40%;" /><h3 id="Java序列化技术"><a href="#Java序列化技术" class="headerlink" title="Java序列化技术"></a>Java序列化技术</h3><p>  （1）java序列化技术就是将一个<strong>对象转化成一串二进制表示的字节数组</strong>，通过保存或转移这些字节数据来达到持久化的目的。</p><p>  （2）对象必须继承java.io.Serializable接口。</p><p>  （3）反序列化时，必须有原始类作为模板，才能将这个对象还原。</p><h3 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li><p>Java NIO(New IO)是一个可以替代标准Java IO API的IO API（从Java 1.4开始)，Java NIO提供了与标准IO不同的IO工作方式。</p></li><li><p>Java NIO: <strong>Channels and Buffers（通道和缓冲区）</strong></p><p>​    标准的IO基于字节流和字符流进行操作的，而NIO是基于通道（Channel）和缓冲区（Buffer）进行操作，数据总是<strong>从通道读取到缓冲区</strong>中，或者从缓冲区写入到通道中。</p></li><li><p>Java NIO: <strong>Non-blocking IO</strong>（非阻塞IO）</p><pre><code>Java NIO可以让你非阻塞的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。当数据被写入到缓冲区时，线程可以继续处理它。从缓冲区写入通道也类似。</code></pre></li><li><p>Java NIO: <strong>Selectors</strong>（选择器）</p><pre><code>Java NIO引入了选择器的概念，选择器用于监听多个通道的事件（比如：连接打开，数据到达）。因此，**单个的线程可以监听多个数据通道**。</code></pre></li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951737.png" alt="img"/><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951769.png" alt="img"/><h4 id="Buffers缓冲区"><a href="#Buffers缓冲区" class="headerlink" title="Buffers缓冲区"></a><strong>Buffers缓冲区</strong></h4><p>（1）java.nio包中定义对基本类型的容器。</p><p>　　Buffer就像一个数组，可以保存多个相同类型的数据。根据类型不同（<strong>boolean除外</strong>），有以下Buffer常用子类：</p><ul><li><p>ByteBuffer</p></li><li><p>CharBuffer</p></li><li><p>ShortBuffer</p></li><li><p>IntBuffer</p></li><li><p>LongBuffer</p></li><li><p>FloatBuffer</p></li><li><p>DoubleBuffer</p></li></ul><p>（2）属性</p><p>​    ·容量（capacity）：表示Buffer最大数据容量，缓冲区容量不能为负，并且建立后不能修改。</p><p>​    ·限制（limit）：第一个不应该读取或者写入的数据的索引，即位于limit后的数据不可以读写。缓冲区的限制不能为负，并且不能大于其容量（capacity）。</p><p>​    ·位置（position）：下一个要读取或写入的数据的索引。缓冲区的位置不能为负，并且不能大于其限制（limit）。</p><p>​    ·标记（mark）与重置（reset）：标记是一个索引，通过Buffer中的mark()方法指定Buffer中一个特定的position，之后可以通过调用reset()方法恢复到这个position。</p><p>（3）分类</p><p>  · <strong>非直接缓冲区</strong>：通过allocate() 方法分配缓冲区，将缓冲区建立在 JVM 的内存中。数据存储传输需要先复制到内存地址空间，再到磁盘。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951861.png" alt="img"/><p>  · <strong>直接缓冲区</strong>：</p><p>​    · 通过allocateDirect() 方法分配直接缓冲区，将缓冲区建立在物理内存中。可以提高效率。</p><p>​    · 也可以通过FileChannel 的 map() 方法 将文件区域直接映射到内存中来创建。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144952413.png" alt="img"/><h4 id="Channels通道"><a href="#Channels通道" class="headerlink" title="Channels通道"></a>Channels通道</h4><p>（1）作用</p><p>​    表示打开到IO 设备(例如：文件、套接字)的连接。若需要使用NIO 系统，需要获取用于连接 IO 设备的通道以及用于容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。Channel 负责传输， Buffer 负责存储。</p><p>（2）java.nio.channels.Channel 接口：</p><p>​    ·FileChannel</p><p>​    ·SocketChannel</p><p>​    ·ServerSocketChannel</p><p>​    ·DatagramChannel</p><p>（3）分散读取、聚集写入</p><p>​      scattering Reads：将通道中的数据分散到多个缓冲区中。</p><p>​      gathering Writes：将多个缓冲区的数据聚集到通道中</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951884.png" alt="img"/><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>（1）阻塞：客户端连接请求时，服务器只能等待连接请求，不能处理其他事情。</p><p>（2）非阻塞：客户端连接注册到多路复用器上，当轮询到连接有I/O请求时，才启动线程处理。</p><p>（3）几种IO模式的线程之间对比</p><p>  BIO：同步阻塞式IO，服务器实现模式为<strong>一个连接一个线程</strong>，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。 </p><p>  NIO：同步非阻塞式IO，服务器实现模式为<strong>一个请求一个线程</strong>，即客户端发送的连接请求都会注册到多路复用器上，<strong>多路复用器</strong>轮询到连接有I/O请求时才启动一个线程进行处理。 </p><p>  AIO(NIO.2)：异步非阻塞式IO，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由<strong>OS先完成了</strong>再通知服务器应用去启动线程进行处理。 </p><p>  伪异步：使用线程池管理</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951795.png" alt="img"></p><h4 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h4><p>（1）SelectionKey类</p><p>  在SelectionKey类的源码中我们可以看到如下的4中属性，四个变量用来表示四种不同类型的事件：可读、可写、可连接、可接受连接</p><p>​    ·SelectionKey.OP_CONNECT</p><p>​    ·SelectionKey.OP_ACCEPT</p><p>​    ·SelectionKey.OP_READ</p><p>​    ·SelectionKey.OP_WRITE</p><p>  如果你对不止一种事件感兴趣，那么可以用“位或”操作符将常量连接起来，如下：</p><p>​    int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951883.png" alt="img"></p><h4 id="NIO的Socket请求"><a href="#NIO的Socket请求" class="headerlink" title="NIO的Socket请求"></a>NIO的Socket请求</h4><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144952138.jpeg" alt="img"/><p>  分为两个线程共工作，一个监听客户端连接，一个用于处理数据交互。</p><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><p>（1）Java Persistence API 持久层API</p><p>​    JPA仅仅是一种规范，也就是说JPA仅仅定义了一些接口，而接口是需要实现才能工作的。所以底层需要某种实现</p><p>（2）基于O/R映射的标准规范</p><p>（3）主要实现：Hibernate、EclipseLink、openJPA</p><p>（4）提供</p><p>​    · XML或注解，将实体对象持久化到数据库中。@Entity、@Table、@Column、@Transient</p><p>​    · API，用来操作实体对象，执行CRUD</p><p>​    · JPQL查询语句</p><p>（5）避免字段持久化到数据库方法</p><ul><li><p>static</p></li><li><p>transient 也可以在Java中修饰，防止序列化。</p></li><li><p>@Transient</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 初始化</span><span class="token class-name">Wanger</span> wanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wanger<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wanger<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wanger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把对象写到文件中</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"chenmo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>wanger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 改变 static 字段的值</span><span class="token class-name">Wanger</span><span class="token punctuation">.</span>pre <span class="token operator">=</span><span class="token string">"不沉默"</span><span class="token punctuation">;</span> <span class="token comment">// 从文件中读出对象</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"chenmo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Wanger</span> wanger1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Wanger</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wanger1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Wanger&#123;name=王二,age=18,pre=沉默,meizi=王三&#125;</span><span class="token comment">// Wanger&#123;name=王二,age=18,pre=不沉默,meizi=null&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外， final关键字在序列化和反序列化时有一些微妙，详见：<a href="https://zhuanlan.zhihu.com/p/48007904">java序列化与final关键字</a></p><h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>  指定容器可以保存的类型，在编译器检查错误。</p><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><p>  Java容器类类库的用途是“保存对象”。</p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>  · Collection容器继承了Iterable接口（ 实现iterator()方法 ），都可以使用foreach。</p><p>  · Collection容器都覆盖了toString()，可以直接使用print(）</p><h4 id="List表"><a href="#List表" class="headerlink" title="List表"></a>List表</h4><p>（1）必须按照插入的顺序保存元素</p><p>（2）常见接口方法</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>在尾部追加元素</td></tr><tr><td>void add(int index, E element)</td><td></td></tr><tr><td>void clear()</td><td></td></tr><tr><td>boolean contains(Object o)</td><td></td></tr><tr><td>E get(int index)</td><td>获取指定下标的元素</td></tr><tr><td>int indexOf(Object o)</td><td>获取指定元素的下标</td></tr><tr><td>boolean isEmpty()</td><td>判断是否为空</td></tr><tr><td>E remove(int index / Object o)</td><td>移除</td></tr><tr><td>E set(int index, E element)</td><td>修改元素</td></tr><tr><td>int size()</td><td>获得大小</td></tr><tr><td>Object[] toArray[]</td><td>转化为数组</td></tr></tbody></table><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>（1）不能用重复元素</p><p>（2）常见接口方法</p><table><thead><tr><th>方法</th></tr></thead><tbody><tr><td>void clear()</td></tr><tr><td>boolean add(E e)</td></tr><tr><td>boolean contains(Object o)</td></tr><tr><td>boolean isEmpty()</td></tr><tr><td>boolean remove(Object o)</td></tr><tr><td>int size()</td></tr><tr><td>Object[] toArray()</td></tr></tbody></table><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p>（1）按照排队规则来确定对象产生的顺序</p><p>（2）@常见接口方法</p><p>  <strong>· Throws exception</strong></p><p>​    · boolean add(E e)   · E remove() 返回并删除头元素   · E element() 返回头元素</p><p>  <strong>· Returns special value</strong></p><p>​    · boolean offer(E e)   · E poll() 返回并弹出头节点      · E peek() 返回头元素</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>（1）一组成对的“键值对”对象，允许使用键来查找值</p><p>（2）常见接口方法</p><table><thead><tr><th>方法</th></tr></thead><tbody><tr><td>void clear()</td></tr><tr><td>boolean containsKey(Object key)</td></tr><tr><td>boolean containsValue(Object value)</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td></tr><tr><td>boolean equals(Object o)</td></tr><tr><td>Object get(Object key)</td></tr><tr><td>boolean isEmpty()</td></tr><tr><td>Object put(Object k, Object v) 会覆盖前面的值</td></tr><tr><td>Object remove(Object key)</td></tr><tr><td>default boolean replace(Object key, Object value, Object newValue)</td></tr><tr><td>int size()</td></tr><tr><td>remove(Object key)</td></tr><tr><td><strong>getOrDefault(Object key, V defaultValue)</strong></td></tr></tbody></table><p>  <strong>说明：</strong></p><p>​    调用Map.entrySet()，将集合中的映射关系对象存储Set中。迭代Set集合，通过entry的getKey()和getValue()方法获取映射关系对象。</p><h2 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>  · 迭代器是一个对象，它的工作是遍历并选择序列中的对象，而客户端程序员不必知道或关心该序列底层的结构。</p><p>  · 迭代器只能单向移动。</p><p>  · 不能对正在被迭代的集合进行结构上的改变，否则抛出异常。但可以使用iterator自己的remove方法</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>（1）使用iterator()返回一个Iterator对象，并准备返回序列的第一个元素。</p><p>（2）使用next()获得序列的下一个元素</p><p>（3）使用hasNext()检查序列中是否还有元素</p><p>（4）使用remove()将迭代器新近返回的元素删除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> pets <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">.</span><span class="token function">arrayList</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pet</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> pets<span class="token punctuation">.</span><span class="token function">iteratror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Pet</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> p <span class="token operator">:</span> pets<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用foreach语法更简洁。</p><h2 id="List的实现"><a href="#List的实现" class="headerlink" title="List的实现"></a>List的实现</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h4 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h4><p>（1）擅长于随机访问元素，但插入和移除元素慢</p><p>（2）线程不安全，<strong>底层为Object数组</strong></p><h4 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h4><p>（1）无参构造时，初始为空数组。当添加第一个元素时，扩为10（默认）。</p><p>（2）填满时，自动扩容，变为原来的1.5倍左右（奇数偶数不同）。</p><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>（1）插入删除代价较低，但随即访问慢。</p><p>（2）线程不安全，<strong>底层为双向链表</strong>。</p><p>（3）没有实现RandomAccess接口（标识是否具有随机访问能力）。</p><p>（4）<strong>实现了基本的List接口，同时添加了可以使用其作栈、队列或者双端队列的方法。</strong></p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><strong>Vector</strong></h3><p>（1）Vector简介</p><p>Vector 是矢量队列，它是JDK1.0版本添加的类。继承于AbstractList，实现了List, RandomAccess, Cloneable这些接口。</p><p>Vector 继承了AbstractList，实现了List；所以，它是一个队列，支持相关的添加、删除、修改、遍历等功能。</p><p>Vector 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在Vector中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。</p><p>Vector 实现了Cloneable接口，即实现clone()函数。它能被克隆。</p><p><strong>和ArrayList不同，Vector中的操作是线程安全的。</strong></p><p>（2）底层分析</p><p>   ·Vector实际上是通过一个数组去保存数据的。当我们构造Vecotr时；若使用默认构造函数，则Vector的默认容量大小是10。</p><p>   ·当Vector容量不足以容纳全部元素时，Vector的容量会增加。若容量增加系数 &gt;0，则将容量的值增加“容量增加系数”；否则，将容量大小增加一倍。</p><p>   ·Vector的克隆函数，即是将全部元素克隆到一个数组中。</p><h2 id="Stack栈"><a href="#Stack栈" class="headerlink" title="Stack栈"></a>Stack栈</h2><p>  （1）后进先出（LIFO）的容器，是限制插入和删除只能在一个位置上进行的<strong>表</strong>。</p><p>  （2）LinkedList作为底层实现。</p><p>  （3）常用方法：</p><p>​    · push(Object o)            · pop()                  · peek()</p><p>  （4）常见应用：</p><p>​      · 后缀表达式</p><h2 id="Set的实现"><a href="#Set的实现" class="headerlink" title="Set的实现"></a>Set的实现</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>（1）最快的获取元素的方式</p><p>（2）利用HashMap的Key存储</p><p>（3）判断重复元素原理：</p><p>​    · 利用hashCode()和equals()方法。先计算加入对象的hashcode值来判断加入的位置，同时与其他对象的hashcode值比较，如果没有相同的hashcode，则假设对象没有重复出现。若hashcode相同，则通过equals方法价差hashcode相等的对象是否真的相同，若相同，则插入操作不成功；若不同，则重新散列。</p><p>​    · <strong>equals()方法被覆盖，则hashCode()方法也必须被覆盖</strong>。原因：<br>​        · 两个对象相等，hashcode值一定相同。<br>​        · 两个对象相等，equals()方法放回true。<br>​        · 相同hashcode值，对象不一定相等。</p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>（1）具有有序的存储顺序，按照比较结果的升序保存对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 利用<span class="token class-name">Comparator</span>排序<span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span> 装入的对象实现了<span class="token class-name">Comparator</span>接口，有顺序也行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）利用红黑树结构实现</p><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><p>（1）按照添加的顺序保存对象</p><p>（2）使用链表来维护元素的插入顺序</p><h2 id="Map的实现"><a href="#Map的实现" class="headerlink" title="Map的实现"></a>Map的实现</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>（1）提供最快的查找技术</p><p>（2）基于散列表实现</p><p>（3）线程不安全</p><p>（4）hash()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> h<span class="token punctuation">;</span>  <span class="token comment">// key.hashCode()：返回散列值也就是hashcode</span>  <span class="token comment">// ^ ：按位异或</span>  <span class="token comment">// >>>:⽆符号右移，忽略符号位，空位都以0补⻬</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  · HashMap通过key的hashCode经过扰动函数处理过后得到hash值</p><p>  · 然后通过(n - 1) &amp; hash判断当前元素存放的位置，n为数组的长度。</p><p>  · 判断该元素与存入的元素的hash值和key是否相同，相同则直接覆盖，不相同就通过“拉链法”解决冲突。</p><h4 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h4><p>（1）JDK1.8之前，使用数组+链表</p><p>​    数组中存储Node&lt;K,V&gt;（implements Map.Entry&lt;K,V&gt;）。数组初始大小为16.</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951918.png" alt="img"/><p>（2）JDK1.8之后，使用数组+链表+红黑树，当链表的长度大于阈值（默认8）时 ，变为红黑树</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144952126.png" alt="img"/><h4 id="rehash扩容机制"><a href="#rehash扩容机制" class="headerlink" title="rehash扩容机制"></a>rehash扩容机制</h4><p>（1）哈希桶数组table的长度length大小必须为2的n次方(一定是合数)，这是一种非常规的设计，常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数</p><p>为什么要是2的n次方：取余（%）操作中，如果除数是2的幂次则等价于其除数减一的与（<br>&amp;）操作，即hash%length == hash &amp; (length - 1)。采用二进制的位操作后，相对于%能提高运算效率。</p><p>（2）扩容条件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> threshold<span class="token punctuation">;</span> <span class="token comment">// 所能容纳的key-value对极限</span><span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>  <span class="token comment">// 负载因子</span><span class="token keyword">int</span> modCount<span class="token punctuation">;</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  首先，Node[] table的初始化长度length(默认值是16)，Load factor为负载因子(默认值是0.75)，<strong>threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold = length * Load factor。</strong>也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当大于阈值<strong>threshold 时，进行扩容。</strong></p><p>（3）rehash过程</p><p>  · 数组大小扩容为原来的2倍。</p><p>  · 再散列到新数组。</p><p>（4）弊端</p><p>  多线程操作可能导致形成循环链表（rehash过程）。</p><p>参考：<a href="https://mp.weixin.qq.com/s?src=11&timestamp=1613981827&ver=2905&signature=vByozoJ33qW-bwQ1g-YMiVEpM7Y2B8Woya-sfEgileo2AigmyECAdZFyCtdLUoDtorLq3N8w0kx-WrN9ZRD4BLY6P21gLKQxf*GS4ZSUuWh0rsKKvQ45*dK*pm0NWeKF&new=1">参考1 </a> <a href="https://zhuanlan.zhihu.com/p/21673805">参考2</a></p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>（1）默认按照key的字典顺序来排序（升序）</p><ul><li><p>字典序</p><ul><li>排序规则</li></ul><p> 两个字符串 s1, s2比较</p><pre class="line-numbers language-none"><code class="language-none">1. 如果s1和s2是父子串关系，则 子串 &lt; 父串2. 如果非为父子串关系， 则从第一个非相同字符来比较。　　　  例子 s1 &#x3D; &quot;ab&quot;, s2 &#x3D; &quot;ac&quot;   这种情况算法规则是从第二个字符开始比较，由于&#39;b&#39; &lt; &#39;c&#39; 所以  &quot;ab&quot; &lt; &quot;ac&quot;3. 字符间的比较，是按照字符的字节码（ascii）来比较<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> compareTo 实现机制：对于字符串来说，字典排序规则；对于数字字符串来说，直接按照大小排序</li></ul></li></ul><p>（2）基于红黑树（自平衡的排序二叉树）实现，次序由Comparable或者Comparator决定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>（1）按照插入顺序保存键值，同时保留HashMap的查询速度</p><p>（2）使用链表维护内部顺序。</p><p>（3）采用基于访问的最近最少使用（LRU）算法，没有被访问过的元素就会出现在队列的前面。</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>（1）线程安全，内部的方法基本都是经过synchronized修饰，其他使用与HashMap类似。</p><p>（2）与concurrentHashMap相比，<strong>HashTable使用全表锁</strong>。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951990.png" alt="img"/><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>  与HashMap相比，<strong>线程安全，适合并发环境。</strong></p><p>（1）JDK1.7 分段锁</p><p>​    对整个通数组进行分割分段（Segment），多线程访问容器不同段数据时，不会存在锁竞争，提高并发访问效率。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144951949.png" alt="img"/><p>（2）JDK1.8 synchronized + CAS</p><p>​    看起来是一个优化过且线程安全的HashMap。synchronized只锁定当前链表或红黑树的首节点。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210630144952016.png" alt="img"/><h2 id="Queue-1"><a href="#Queue-1" class="headerlink" title="Queue"></a>Queue</h2><p>  先进先出（FIFO）的容器，在一端进行插入而在另一端进行删除的<strong>表</strong>。</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>（1）Deque接口，双端队列，底层实现可以选择LinkedList。</p><p>（2）LinkedList</p><p>（3）PriorityQueue</p><p>​      优先级队列（堆），用Comparator对象修改排序顺序，默认为最小堆。</p><h3 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h3><p>（1）单队列，存在“假溢出”问题</p><p>（2）循环队列</p><h2 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h2><h3 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h3><p>  来自java.lang包，使用comparaTo(Object obj)方法排序。</p><p>  Comparable是排序接口。若一个类实现了Comparable接口，就意味着该类支持排序。实现了Comparable接口的类的对象的列表或数组可以通过Collections.sort或Arrays.sort进行自动排序。</p><p>  此外，实现此接口的对象可以用作有序映射中的键或有序集合中的集合，无需指定比较器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  publicint <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  上述demo表示按照<strong>从小到大的年纪</strong>排序对象。</p><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><p>  来自java.util包，使用compare(Object obj1, Object obj2)方法排序。</p><p>  Comparator是比较接口，我们如果需要控制某个类的次序，而该类本身不支持排序(即没有实现Comparable接口)。</p><p>  int compare(T o1, T o2) 是“比较o1和o2的大小”。返回“负数”，意味着“o1比o2小”；返回“零”，意味着“o1等于o2”；返回“正数”，意味着“o1大于o2”.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonCompartor</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  publicint <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o1<span class="token punctuation">,</span> <span class="token class-name">Person</span> o2<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从小到大排序</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">PersonCompartor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定制排序的⽤法</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从大到小排序</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：上面demo的compareTo方法，在String类中有，按字典序或自然顺序排序。</strong></p><h2 id="工具类Collections和Arrays"><a href="#工具类Collections和Arrays" class="headerlink" title="工具类Collections和Arrays"></a>工具类Collections和Arrays</h2><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>  在java.util中有一个Arrays类，此类包含用于操纵数组的各种方法，例如：二分查找（binarySearch）、拷贝操作（copyOf）、比较(equals)、填充(fill)、排序（sort）等，功能十分强大。</p><blockquote><p>排序 :sort() 默认从小到大排序</p><p>查找 :binarySearch()</p><p>比较: equals</p><p>填充 :fill(int[], int)，可以用作批量初始化</p><p>转列表: asList(int, int, int) 参数用逗号隔开</p><p>哈希:hashCode()</p><p>转字符串 :toString()</p><p>拷贝：copyOfRange(int[], int from, int to)</p></blockquote><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>（1）排序</p><blockquote><p>void reverse(List list)//反转</p><p>void shuffle(List list)//随机排序</p><p>void sort(List list)//按自然排序的升序排序</p><p>void sort(List list, Comparator c)//定制排序，由Comparator控制排序逻辑</p><p>void swap(List list, int i , int j)//交换两个索引位置的元素</p><p>void rotate(List list, int distance)//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面。</p></blockquote><p>（2）查找替换</p><blockquote><p>int binarySearch(List list, Object key)//对List进行二分查找，返回索引，注意List必须是有序的</p><p>int max(Collection coll)//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</p><p>int max(Collection coll, Comparator c)//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</p><p>void fill(List list, Object obj)//用指定的元素代替指定list中的所有元素。</p><p>int frequency(Collection c, Object o)//统计元素出现次数</p><p>int indexOfSubList(List list, List target)//统计targe在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target).</p><p>boolean replaceAll(List list, Object oldVal, Object newVal), 用新元素替换旧元素</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2020/10/14/javaweb/"/>
      <url>/2020/10/14/javaweb/</url>
      
        <content type="html"><![CDATA[<p><em>由简书搬迁而来<a href="https://www.jianshu.com/p/47811e296f1d"><strong>原文链接</strong></a></em></p><blockquote><p>目录<br>  1 Socket<br>  2 软件结构<br>  3 Servlet<br>  4 HTTP<br>  5 单点登录SSO<br>  6 常见问题总结  </p><p>参考资料  </p><ul><li>《深入分析 Java Web》</li></ul></blockquote><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​    套接字（socket），是描述计算机之间完成相互网络通信的抽象功能，没有对应的实体。通讯的两端都有Sokcet，数据在两个Sokcet间通过IO传输。</p><p>  格式为：IP:端口号</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>TCP和UDP</p></li><li><p><strong>两种方式传输数据都是通过序列化java对象后，通过二进制协议传输，故Socket通信和编程语言没有关系。</strong></p></li></ul><h1 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h1><h2 id="C-S体系"><a href="#C-S体系" class="headerlink" title="C/S体系"></a><strong>C/S体系</strong></h2><p>  Client-Server 客户端-服务器端。属于桌面应用程序。</p><ul><li>弊端：<ul><li>需要安装软件</li><li>维护难，占空间</li><li>服务端升级，客户端也需要升级</li></ul></li><li>优点：<ul><li>体验效果好</li><li>占宽带小</li><li>减轻服务器端压力</li></ul></li></ul><h2 id="B-S体系"><a href="#B-S体系" class="headerlink" title="B/S体系"></a>B/S体系</h2><p>  Browser-Server浏览器端-服务器端，属于网站应用程序。</p><ul><li>弊端：<ul><li>需要使用浏览器访问</li><li>兼容性差、安全性差</li><li>服务器端压力大</li></ul></li><li>优点：<ul><li>不需要特定客户端</li><li>服务端升级，浏览器不需要升级。</li></ul></li></ul><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="资源的分类"><a href="#资源的分类" class="headerlink" title="资源的分类"></a>资源的分类</h2><ul><li><p>静态资源：当用户多次访问这个资源，资源的源代码永远不会改变的资源。</p></li><li><p>动态资源：当用户多次访问这个资源，资源的源代码可能会发送改变。</p></li></ul><h2 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h2><p>  Servlet本质是Server Applet 服务连接器。是服务器端的程序，具有独立平台和协议的特性，用于交互式地浏览和生成数据，生成<strong>动态Web内容</strong>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>  编写类继承HttpServlet类，并覆盖doGet和doPost方法，并在web.xml文件或者使用@WebServlet注解配置访问路径。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//解决中文乱码问题</span>   resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内容编码，防止出现中文乱码</span>   resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//向浏览器输出内容</span>   resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是第一个servlet程序。当前时间为："</span><span class="token operator">+</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">new</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="Servlet容器"><a href="#Servlet容器" class="headerlink" title="Servlet容器"></a>Servlet容器</h3><p>  servlet容器的产生是为了技术上的解耦，通过标准化接口来相互协作。  </p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853270.jpeg" alt="img" style="zoom:50%;" /><p>  图中看出，真正管理servlet的容器是Context容器，且一个Context对应一个Web工程。</p><h3 id="Servlet容器的启动"><a href="#Servlet容器的启动" class="headerlink" title="Servlet容器的启动"></a>Servlet容器的启动</h3><p>Tomcat启动代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Tomcat</span> tomcat<span class="token operator">=</span> <span class="token function">getTomcatInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> appDir<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token function">getBuildDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"webapps/examples"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>tomcat<span class="token punctuation">.</span><span class="token function">addWebapp</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> "<span class="token operator">/</span>examplesappDir<span class="token punctuation">.</span> <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteChunk</span> res <span class="token operator">=</span> <span class="token function">geturl</span><span class="token punctuation">(</span> <span class="token string">"http://localhost:"</span><span class="token operator">+</span><span class="token function">getport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" /examples/servlets/servlet/HelloWorldExample"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>res <span class="token function">tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span>h1<span class="token punctuation">></span></span><span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>"<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Context</span> addwebapp <span class="token punctuation">(</span><span class="token class-name">Hosthost</span><span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token function">silence</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token class-name">StandardContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>   ctx<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>   ctx<span class="token punctuation">.</span> <span class="token function">setDocBase</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>defaultRealm<span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token function">initsimpleAuth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   ctx<span class="token punctuation">.</span> <span class="token function">setRealm</span><span class="token punctuation">(</span>defaultRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>   ctx<span class="token punctuation">.</span> <span class="token function">addLifecycleListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultWebXmlListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Contextconfig</span> ctxCfg <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token class-name">ContextConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span>   ctx<span class="token punctuation">.</span> <span class="token function">addLifecycleListener</span><span class="token punctuation">(</span>ctxCfg<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctxcfg<span class="token punctuation">.</span> setDefaultwebXml <span class="token punctuation">(</span><span class="token string">"org/apache/catalin/startup/DEFAULT_XMI "</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>host <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> addchild <span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>；   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>     host<span class="token punctuation">.</span><span class="token function">addchild</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ctx；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）Tomcat启动过程</p><ul><li>getTomcatInstance()获取Tomcat实例</li><li>新建StandardContext()容器，并设置访问URl和项目文件访问地址</li><li>添加LifecycleListener</li><li>新建ContextConfig。解析Web应用的配置文件web.xml等</li><li>tomcat实例执行addWebapp（）</li><li>tomcat实例执行start（），启动整个Tomcat容器。</li></ul><p>（2）tomcat所有的容器都集成Lifecycle接口，Lifecycle接口管理着容器的整个生命周期，所有容器的修改和状态的改变都会由它去通知已经注册的观察者（Listener）。这是基于<strong>观察者模式</strong>设计的。</p><p><strong>（3）Context容器的启动</strong></p><p>​    在tomcat容器启动后，当Context容器处于init初始化状态时，其中的Listener将会被调用。</p><p>​    首先执行ContextConfig的Init方法：<br>​      · 创建用于解析XML配置文件的contextDigester对象<br>​      · 读取默认的 context. xm配置文件,如果存在则解析它。<br>​      · 读取默认的Hos配置文件,如果存在则解析它<br>​      · 读取默认的 Context自身的配置文件,如果存在则解析它<br>​      · 设置 Context的 DocBase</p><p>​    ContextConfig的init方法完成后, Context容器就会执行startInternal()方法,这个方法的启动逻辑比较复杂,主要包括如下几部分：<br>​      · 创建读取资源文件的对象<br>​      · 创建 ClassLoader对象<br>​      · 设置应用的工作目录<br>​      · 启动相关的辅助类,如 logger、 realm、 resources等。<br>​      · 修改启动状态,通知感兴趣的观察者(Web应用的配置)<br>​      · 子容器的初始化<br>​      · 获取 ServletContext并设置必要的参数。<br>​      · 初始化“ load on startup”的 Servlet. <strong>其他Servlet在第一次被调用的时候初始化。</strong></p><p>​    在初始化时，会将Servlet包装成StandardWrapper。因为StandardWrapper是Tomcat容器中的一部分，它具有容器的特性，而Servlet作为一个独立的Web开发标准，不应该强耦合在Tomcat中。</p><h3 id="Servlet实例的建立和初始化"><a href="#Servlet实例的建立和初始化" class="headerlink" title="Servlet实例的建立和初始化"></a>Servlet实例的建立和初始化</h3><p>（1）创建实例</p><p>​    web.xml中的配置项，“load-on-startup”如果大于0，则在Tomcat启动时Servlet就会被启动。调用Wrapper.loadServlet方法获取servletClass，并交给<strong>InstanceManager</strong>去创建对象。</p><p>（2）初始化实例</p><p>​    调用StandardWrapper的InitServlet方法初始化对象。</p><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><p>  · ServletConfig，在Servlet初始化时就传到Servlet，以StandardWrapperFacade对象的形式调用，可以防止暴露不必要的数据。</p><p>  · ServletContext，获取Context容器的信息。</p><p>  · ServletRquest</p><p>  · ServletResponse</p><p>  体系设计过程中用到<strong>门面设计模式</strong>。</p><h3 id="Servlet调用"><a href="#Servlet调用" class="headerlink" title="Servlet调用"></a>Servlet调用</h3><p>（1）访问URL：<code>http://hostname:port/contextpath/servletPath</code></p><p>（2）Tomcat中的org.apache.tomcat.util.http.mapper完成URL到一个Servlet子容器的映射工作。Mapper类保存了Tomcat的Container容器中的所有子容器的信息，根据传入Servlet容器的请求的hostname和contextpath设置到request的mappingData属性中。</p><p>（3）Mapper子类MapperListener作为监听这监听容器的变化，这样其中的mapper属性也相应修改。</p><p>（4）执行<strong>Servlet接口</strong>的**service(ServletRequest req, ServletResponse resp)**方法。</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>  Filter也称之为过滤器，它是 Servlet 技术中最实用的技术，Web 开发人员通过 Filter 技术，对 web 服务器管理的所有 web 资源：例如 Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现 URL 级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p><p>  它主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理。使用 Filter 的完整流程：Filter 对用户请求进行预处理，接着将请求交给 Servlet 进行处理并生成响应，最后 Filter 再对服务器响应进行后处理。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** \* 使用Filter 打印参数 \* @author Administrator * */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token class-name">FilterDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FilterDemo 构造函数被执行..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token comment">/** \* 销毁 */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token comment">/*   用户在每个请求进来时，访问doFilter方法，在Servlet的service方法之前调用。 */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> paramServletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> paramServletResponse<span class="token punctuation">,</span>        <span class="token class-name">FilterChain</span> paramFilterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> paramServletRequest<span class="token punctuation">;</span>    <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> paramServletResponse<span class="token punctuation">;</span>    <span class="token comment">// 请求地址</span>    <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestURI:"</span><span class="token operator">+</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 参数</span>    <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> parameterMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span>parameterMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token comment">/** \* 初始化 */</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> paramFilterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.qian.servlet.FilterDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>FilterDemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h4><p>（1）FilterConfig</p><p>​    可以通过其获取ServletContext对象。</p><p>（2）FilterChain</p><p>​    <strong>责任链设计模式。</strong>FilterChain是doFilter方法的传入参数，保存了当前整个请求链。通过调用FilterChain.doFilter方法，可以将请求继续传递下去，<strong>但是如果要拦截请求，则不调用。</strong></p><p>​    <strong>当FilterChain上所有的Filter对象执行完成后，才会执行最终的Servlet。</strong></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h4><p>（1）Filter常用于登录、XSS攻击、权限方面。</p><p>（2）<strong>Filter是单例的</strong>，与Servlet类似。</p><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><h3 id="Servlet接口方法"><a href="#Servlet接口方法" class="headerlink" title="Servlet接口方法"></a>Servlet接口方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServletService</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO 自动生成的方法存根</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO 自动生成的方法存根</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO 自动生成的方法存根</span>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO 自动生成的方法存根</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> arg0<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> arg1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// TODO 自动生成的方法存根</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，与生命周期相关的有四个方法：</p><p>（1）构造方法：创建servlet对象的时候调用。默认情况下，第一次访问（拥有load-on-startup设置的除外）servlet的时候创建servlet对象<strong>只调用1次。证明servlet对象在tomcat是单实例的</strong>。</p><p>（2）init方法： 创建完servlet对象的时候调用。只调用1次。</p><p>（3）service方法： 每次发出请求时调用。调用n次。</p><p>（4）destroy方法： 销毁servlet对象的时候调用。<strong>停止服务器或者重新部署web应用</strong>时销毁servlet对象。只调用1次。</p><h3 id="Tomcat内部代码运行"><a href="#Tomcat内部代码运行" class="headerlink" title="Tomcat内部代码运行"></a>Tomcat内部代码运行</h3><p>（1）通过配置文件的映射关系，找到ServletClass内容。</p><p>（2）通过反射构造Servlet对象</p><p>（3）创建ServletConfig对象，反射调用init方法。</p><p>（4）创建request、response对象，反射调用service方法。</p><p>（5）销毁servlet时，反射调用destroy方法。</p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853294.png" alt="img" style="zoom:70%;" /><h2 id="Servlet多线程问题"><a href="#Servlet多线程问题" class="headerlink" title="Servlet多线程问题"></a>Servlet多线程问题</h2><p>（1）servlet对象在tomcat服务器是单实例多线程的，为每个用户请求分配一个线程，可以通过线程池来管理。</p><p>（2）因为servlet是多线程的，所以当多个servlet的线程同时访问了servlet的共享数据，如成员变量，可能会引发线程安全问题。</p><p>​    解决办法：</p><p>​       · 把使用到共享数据的代码块进行同步（使用synchronized关键字进行同步）</p><p>​       · 建议在servlet类中尽量不要使用成员变量。如果确实要使用成员，必须同步。而且尽量缩小同步代码块的范围。（哪里使用到了成员变量，就同步哪里！！），以避免因为同步而导致并发效率降低。</p><h2 id="域对象"><a href="#域对象" class="headerlink" title="域对象"></a>域对象</h2><p>（1）作用： 用于保存数据、获取数据，可以在不同的动态资源之间共享数据。</p><p>（2）使用：</p><p>​    · 保存数据 setAttribute(String，Object）</p><p>​    · 获取数据 Object getAttribute(String）</p><p>​    · 删除数据 removeAttribute(String）</p><p>（3）分类：</p><p>​    · HttpServletRequest</p><p>​    · HttpSession 会话对象</p><p>​    · PageContext</p><p>​    · ServletContext 作用范围为整个Web应用</p><p>（4）可以通过getContextPath()方法获取上下文路径</p><h2 id="转发与重定向"><a href="#转发与重定向" class="headerlink" title="转发与重定向"></a>转发与重定向</h2><p>（1）转发：</p><p>​    · 地址栏不会改变</p><p>​    · 只能转发到当前web应用</p><p>​    · 可以把数据保存到request域</p><p>​    · request.getRequestDispatcher(String).forward(request，response）</p><p>（2）重定向：</p><p>​    · 地址栏改变</p><p>​    · 可以跳转到其他web应用</p><p>​    · 不能使用request数据（涉及到2次浏览器请求）</p><p>​    · response.sendRedirect(String)</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>  会话数据<strong>保存在客户端</strong>。浏览器在每次访问服务端时，都会带着cookie信息。</p><p>关于Cookie的跨域问题：<a href="https://blog.csdn.net/chou_out_man/article/details/80664413?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">cookie 跨域问题_chou_out_man的博客-CSDN博客_cookie跨域</a></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>（1）构造Cookie对象</p><p>​    Cookie(java.lang.String name, java.lang.String value)</p><p>（2）设置cookie</p><p>​    void setPath(java.lang.String uri)  ：设置cookie的有效访问路径</p><p>​    void setMaxAge(int expiry)：设置cookie的有效时间<br>​        · <strong>不设置，则随浏览器关闭而消失</strong><br>​        · 整数（正负均可），cookie保存到浏览器，缓存在硬盘中<br>​        · 零，不保存cookie</p><p>​    void setValue(java.lang.String newValue) ：设置cookie的值</p><p>（3）发送cookie到浏览器端保存</p><p>​    void response.addCookie(Cookie cookie)  :发送cookie</p><p>（4）服务器接收cookie</p><p>​    Cookie[] request.getCookies() :接收cookie</p><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/LastAccessTime"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LastAccessTime</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 防止浏览器显示乱码</span>    <span class="token class-name">String</span> lastAccessTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> name <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"lastAccessTime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        astAccessTime <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lastAccessTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"您是首次访问!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你上次访问时间:"</span> <span class="token operator">+</span> lastAccessTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// 保存访问时间</span>   <span class="token comment">// 创建cookie 将当前时间作为cookie保存到浏览器</span>   <span class="token class-name">String</span> currenttime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"lastAccessTime"</span><span class="token punctuation">,</span> currenttime<span class="token punctuation">)</span><span class="token punctuation">;</span>   cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 发送cookie</span>   resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>  真正构建Cookie是在org.apache.catalina.connector.Response类中，调用generateCookieString方法将Cookie对象构造成一个String字符串，并将字符串命名为Set-Cookie添加到Header中。</p><h3 id="利弊分析"><a href="#利弊分析" class="headerlink" title="利弊分析"></a>利弊分析</h3><p>  弊端</p><p>​    · 只能存字符串类型，不能保存对象</p><p>​    · 只能存非中文</p><p>​    · 1个Cookie的容量不超过4KB，最多300个</p><p>​    · 安全性差</p><h3 id="压缩cookie"><a href="#压缩cookie" class="headerlink" title="压缩cookie"></a>压缩cookie</h3><p>（1）采用文本压缩方式。可采用gzip或者deflate算法</p><p>（2）压缩后进行转码，采用Base32或者Base64。因为Cookie中不能包含控制字符，只能包含ASCII码中34~126的可见字符。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>  会话数据保存在<strong>服务器端（内存中）</strong>。</p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>HttpSession类：用于保存会话数据</p><p>（1）创建或得到session对象</p><p>​    HttpSession getSession() </p><p>​    HttpSession getSession(boolean create) </p><p>（2）设置session对象</p><p>​    void setMaxInactiveInterval(int interval) ： 设置session的有效时间</p><p>​    void invalidate()  ： 销毁session对象</p><p>​    java.lang.String getId() ： 得到session编号</p><p>（3）保存会话数据到session对象</p><p>​    void setAttribute(java.lang.String name, java.lang.Object value) ： 保存数据</p><p>​    java.lang.Object getAttribute(java.lang.String name) ： 获取数据</p><p>​    void removeAttribute(java.lang.String name) ： 清除数据</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/TestSession"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSession</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>   <span class="token comment">/**   \* @see HttpServlet#HttpServlet()   */</span>   <span class="token keyword">public</span> <span class="token class-name">TestSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO Auto-generated constructor stub</span>   <span class="token punctuation">&#125;</span> <span class="token comment">/** \* @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO Auto-generated method stub</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 防止浏览器显示乱码</span>    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> lastTime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>lastTime <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这是第一次访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"上次访问时间："</span> <span class="token operator">+</span> lastTime <span class="token operator">+</span> <span class="token string">"现在: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"lastTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="与Cookie关系"><a href="#与Cookie关系" class="headerlink" title="与Cookie关系"></a>与Cookie关系</h3><p>（1）服务器生成唯一对应session对象的JSESSIONID，并作为cookie发送到浏览器端保存。</p><p>（2）如果浏览器禁用cookie可以将JSESSIONID写到用户请求的URL中。</p><p>​    比如，可以通过表单中的隐藏域，具体实现参考：<a href="https://blog.csdn.net/weixin_33810302/article/details/85590011">Session的url重写</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;form name="testform” action="/xxx">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jsessionid<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）如何避免浏览器的JSESSIONID的cookie随着浏览器关闭而丢失的问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** \* 手动发送一个硬盘保存的cookie给浏览器*/</span> <span class="token class-name">Cookie</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">,</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工作原理-2"><a href="#工作原理-2" class="headerlink" title="工作原理"></a>工作原理</h3><p>（1）request.getSession()方法，触发创建session对象，并加入到org.apache.catalina.Manager的session容器中保存。</p><p>（2）Manager负责servlet容器中所有session的生命周期管理。当servlet容器重启或者关闭时，Manager负责持久化（调用upload方法）没有过期的session对象到“SESSIONS.ser”文件中，也会定期检测过期。</p><h3 id="分布式session"><a href="#分布式session" class="headerlink" title="分布式session"></a>分布式session</h3><img src="/../assets/JavaWeb/1240-20210629161853334.jpeg" alt="img" style="zoom:50%;" /><p>（1）服务订阅服务器，集中管理资源和配置，统一通过它来推送配置。可以使用Zookeeper实现。</p><p>（2）分布式缓存，存储共享集群中每台集群的session。</p><p>（3）存取方式。<br>    · 自定义InnerHttpSession类重新实现HttpSession接口。<br>    · 通过Filter拦截用户请求，将自己设置的InnerHttpSession对象设置到request和response对象中。<br>    · 应用创建的所有Session对象都保存在InnerHttpSession对象中，访问完成后将InnerHttpSession内容更新到分布式缓存中。</p><h3 id="跨域名共享Cookie"><a href="#跨域名共享Cookie" class="headerlink" title="跨域名共享Cookie"></a>跨域名共享Cookie</h3><p>（1）利用<strong>跳转应用</strong>支持多个域名的访问，并将同一个sessionID作为cookie写到多个域名下。</p><p>（2）多个域名，根据sessionID在分布缓存中拿取session信息。</p><h3 id="表单重复提交问题"><a href="#表单重复提交问题" class="headerlink" title="表单重复提交问题"></a>表单重复提交问题</h3><p>（1）原因</p><p>​    · 网络延时</p><p>​    · 浏览器重新刷新按钮</p><p>​    · 浏览器“回退”按钮，再提交。</p><p>（2）解决方案</p><p>​    · 利用javaScript代码进行标识</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Form表单&lt;&#x2F;title&gt;  var isFlag &#x3D; false; &#x2F;&#x2F;表单是否已经提交标识，默认为false  function submitFlag() &#123;  if (isFlag &#x3D;&#x3D; false) &#123;   isFlag &#x3D; true;   return true;  &#125; else &#123;   return false;  &#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;DoFormServlet&quot;  method&#x3D;&quot;post&quot; onsubmit&#x3D;&quot;return submitFlag()&quot;&gt;  用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;userName&quot;&gt; &lt;input type&#x3D;&quot;submit&quot;  value&#x3D;&quot;提交&quot; id&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    ·利用js让按钮在提交一次后不可用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">dosubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//获取表单提交按钮</span>  <span class="token keyword">var</span> btnSubmit <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将表单提交按钮设置为不可用，这样就可以避免用户再次点击提交按钮</span>  btnSubmit<span class="token punctuation">.</span>disabled<span class="token operator">=</span> <span class="token string">"disabled"</span><span class="token punctuation">;</span>  <span class="token comment">//返回true让表单可以正常提交</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    · 在session域中生成并保存唯一token，在页面中加入隐藏域存储token，提交时进行检验</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用户访问服务器</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/ForwardServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForwardServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>   req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"sesionToken"</span><span class="token punctuation">,</span> <span class="token class-name">TokenUtils</span><span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"form.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;跳转页面&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Form表单&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;  &lt;body&gt;   &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;DoFormServlet&quot; method&#x3D;&quot;post&quot; onsubmit&#x3D;&quot;return dosubmit()&quot;&gt;     &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;token&quot; value&#x3D;&quot;$&#123;sesionToken&#125;&quot;&gt; 用户名：&lt;input type&#x3D;&quot;text&quot;       name&#x3D;&quot;userName&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot; id&#x3D;&quot;submit&quot;&gt;   &lt;&#x2F;form&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//服务器后端处理</span> <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> sesionToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"sesionToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sesionToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>session<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"sesionToken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h2><p>  随机性令牌，唯一不重复字符串。</p><p>  生成方式：</p><p>​      · 自定义唯一识别码</p><p>​      · UUID.randomUUID().toString()</p><h2 id="Web安全与攻防"><a href="#Web安全与攻防" class="headerlink" title="Web安全与攻防"></a>Web安全与攻防</h2><p>（1）XSS 跨站脚本注入</p><p>​    利用Filter进行拦截，例如将<code>&lt;script&gt;</code>转化为html元素 <code>&amp;lt;script&amp;gt;</code>。</p><p>（2）CSRF 跨站请求伪造，避免Cookie，利用token。</p><p>（3）上传漏洞、可执行exe文件。</p><p>（4）Sql注入 利用#{}和?占位符解决，避免sql语句的拼接。</p><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>  超文本传输协议，是浏览器个服务端之间数据传输的格式规范。HTTP使用TCP作为传输层协议，但HTTP本身是无连接、无状态的，可以短连接（Http/1.0），也可以长连接（Http/1.1 保持一段时间）。</p><p><a href="https://blog.csdn.net/tennysonsky/article/details/44562435">http的无连接、无状态的意思</a></p><h2 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h2><h3 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h3><blockquote><p>GET /day09/hello HTTP/1.1 <strong>-请求行</strong></p><p>Host: localhost:8080  <strong>–请求头（多个key-value对象）</strong></p><p>User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:35.0) Gecko/20100101 Firefox/35.0</p><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p><p>Accept-Language: zh-cn,en-us;q=0.8,zh;q=0.5,en;q=0.3</p><p>Accept-Encoding: gzip, deflate</p><p>Connection: keep-alive</p><p>–<strong>一个空行</strong></p><p>name=eric&amp;password=123456       <strong>–（可选）实体内容</strong></p></blockquote><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>GET /day09/hello HTTP/1.1</p><p>（1）请求方式</p><p>  常见的请求方式： GET 、 POST、 HEAD、 TRACE、 PUT、 CONNECT 、DELETE</p><p>  常用的请求方式： GET 和 POST</p><p>  · GET<br>      · URL后面可以跟参数<br>      · 参数限制为1KB内<br>      · 默认方式，但不适合提交敏感密码等内容</p><p>  · POST<br>      · 参数在请求体中<br>      · 参数数据无限制<br>      · 适合提交敏感内容</p><p>（2）http协议版本</p><p>  http1.0：当前浏览器客户端与服务器端建立连接之后，只能发送一次请求，一次请求之后连接关闭。</p><p>  http1.1：当前浏览器客户端与服务器端建立连接之后，可以在一次连接中发送多次请求。（基本都使用1.1）</p><p>（3）请求资源</p><p>  URL: 统一资源定位符。<a href="http://localhost:8080/day09/testImg.html%E3%80%82%E5%8F%AA%E8%83%BD%E5%AE%9A%E4%BD%8D%E4%BA%92%E8%81%94%E7%BD%91%E8%B5%84%E6%BA%90%E3%80%82**%E6%98%AFURI">http://localhost:8080/day09/testImg.html。只能定位互联网资源。**是URI</a> 的子集**。</p><p>  URI： 统一资源标记符。/day09/hello。用于标记任何资源。可以是本地文件系统，局域网的资源（//192.168.14.10/myweb/index.html）， 可以是互联网。</p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><p>  · 多个key-value对象</p><p>  · 含有配置信息和cookie</p><h3 id="实体内容"><a href="#实体内容" class="headerlink" title="实体内容"></a>实体内容</h3><p>  仅POST方式含有（<strong>与请求头有一个空行</strong>）</p><h3 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a><strong>HttpServletRequest对象</strong></h3><p>  HttpServletRequest对象作用是用于获取请求数据。</p><p>  核心的API：</p><p>（1）请求行：</p><p>​    request.getMethod(); 请求方式</p><p>​    request.getRequetURI()  / request.getRequetURL()请求资源</p><p>​    request.getProtocol()请求http协议版本</p><p>（2）请求头：</p><p>​    request.getHeader(“名称”)  根据请求头获取请求值</p><p>​    request.getHeaderNames()获取所有的请求头名称</p><p>（3）实体内容:</p><p>​    request.getInputStream()获取实体内容数据</p><p>​    request.getParameter(“参数名”); 根据参数名获取参数值（注意，只能获取一个值的参数）</p><p>​    request.getParameterValue(“参数名“)；根据参数名获取参数值（可以获取多个值的参数）</p><p>​    request.getParameterNames(); 获取所有参数名称列表 </p><h2 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h2><h3 id="响应格式"><a href="#响应格式" class="headerlink" title="响应格式"></a>响应格式</h3><blockquote><p>HTTP/1.1 200 OK  <strong>–响应行</strong></p><p>Server: Apache-Coyote/1.1  <strong>–响应头（key-vaule）</strong></p><p>Content-Length: 24 </p><p>Date: Fri, 30 Jan 2015 01:54:57 GMT</p><p>–<strong>一个空行</strong></p><p>this is hello servlet!!!   <strong>–实体内容</strong></p></blockquote><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>（1）http协议版本</p><p>（2）状态码: 服务器处理请求的结果（状态）</p><p>​    常见的状态码：</p><p>​      200：  表示请求处理完成并完美返回</p><p>​      302：  表示请求需要进一步细化。 </p><p>​      304：当用户第一次请求index.html时，服务器会添加一个名为Last-Modified响应头，这个头说明了index.html的最后修改时间，浏览器会把index.html内容，以及最后响应时间缓存下来。当用户第二次请求index.html时，在请求中包含一个名为If-Modified-Since请求头，它的值就是第一次请求时服务器通过Last-Modified响应头发送给浏览器的值，即index.html最后的修改时间，If-Modified-Since请求头就是在告诉服务器，我这里浏览器缓存的index.html最后修改时间是这个，您看看现在的index.html最后修改时间是不是这个，如果还是，那么您就不用再响应这个index.html内容了，我会把缓存的内容直接显示出来。而服务器端会获取If-Modified-Since值，与index.html的当前最后修改时间比对，<strong>如果相同，服务器会发响应码304，表示index.html与浏览器上次缓存的相同，无需再次发送(节省传输成本）</strong>，浏览器可以显示自己的缓存页面，如果比对不同，那么说明index.html已经做了修改，服务器会响应200。</p><p>​      404：  表示客户访问的资源找不到。</p><p>​      500：  表示服务器的资源发送错误。（服务器内部错误）</p><p>（3）状态描述</p><h3 id="HttpServletResponse对象"><a href="#HttpServletResponse对象" class="headerlink" title="HttpServletResponse对象"></a>HttpServletResponse对象</h3><p>  HttpServletResponse对象修改响应信息：</p><p>（1）响应行：</p><p>​    response.setStatus() 设置状态码</p><p>（2）响应头：</p><p>​    response.setHeader(“name”,”value”) 设置响应头</p><p>（3）实体内容：</p><p>​    response.getWriter().writer(); 发送字符实体内容</p><p>​    response.getOutputStream().writer() 发送字节实体内容</p><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><h3 id="与Http区别"><a href="#与Http区别" class="headerlink" title="与Http区别"></a>与Http区别</h3><p>（1）https 协议需要到 ca 申请证书，一般免费证书较少，因而需要一定费用。</p><p>（2）http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议（对称加密）。</p><p>（3）http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</p><p>（4）http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全。</p><h3 id="工作原理-3"><a href="#工作原理-3" class="headerlink" title="工作原理"></a>工作原理</h3><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853239.png" alt="img"></p><p>　客户端在使用HTTPS方式与 Web 服务器通信时有以下几个步骤。</p><p>　　（1）客户使用 https 的 URL 访问 Web 服务器，要求与 Web 服务器建立 SSL 连接。</p><p>　　（2）Web 服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</p><p>　　（3）客户端的浏览器与 Web 服务器开始协商 SSL 连接的安全等级，也就是信息加密的等级。</p><p>　　（4）客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</p><p>　　（5）Web 服务器利用自己的私钥解密出会话密钥。</p><p>　　（6）Web 服务器利用会话密钥加密与客户端之间的通信。</p><p>参考：<a href="https://www.cnblogs.com/makelu/p/11140824.html">HTTPS详解 - 我是码客 - 博客园</a></p><h3 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h3><ul><li><p><a href="https://blog.csdn.net/weixin_39843414/article/details/108744377">HTTPS 证书被伪造了怎么办？</a></p></li><li><p><a href="https://blog.csdn.net/LS7011846/article/details/106782890">https可否有效应对dns劫持、http内容劫持</a></p></li></ul><h3 id="其他加密算法"><a href="#其他加密算法" class="headerlink" title="其他加密算法"></a>其他加密算法</h3><h4 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h4><p>  高级加密标准(AES,Advanced Encryption Standard)为最常见的<strong>对称加密算法</strong>(微信小程序加密传输就是用这个加密算法的)。<strong>对称加密算法也就是加密和解密用相同的密钥</strong>，具体的加密流程如下图：</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853318.png" alt="img" /><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p>  RSA 加密算法是一种典型的<strong>非对称加密算法</strong>，它基于大数的因式分解数学难题，它也是应用最广泛的非对称加密算法。</p><p>  非对称加密是通过两个密钥（公钥-私钥）来实现对数据的加密和解密的。公钥用于加密，私钥用于解密。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853335-4954733.png" alt="img"/><h4 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h4><p>  循环冗余校验(Cyclic Redundancy Check, CRC)是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</p><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>  MD5 常常作为文件的签名出现，我们在下载文件的时候，常常会看到文件页面上附带一个扩展名为.MD5 的文本或者一行字符，这行字符就是就是把整个文件当作原数据通过 MD5 计算后的值，我们下载文件后，可以用检查文件 MD5 信息的软件对下载到的文件在进行一次计算。两次结果对比就可以确保下载到文件的准确性。 另一种常见用途就是网站敏感信息加密，比如用户名密码，支付签名等等。随着 https 技术的普及，现在的网站广泛采用前台明文传输到后台，MD5 加密（使用偏移量）的方式保护敏感数据保护站点和数据安全。</p><p>参考：<a href="https://blog.csdn.net/u011202188/article/details/45269655">MD5算法分析及逆向详解_天下布武之信长的专栏-CSDN博客_md5逆向</a></p><h2 id="HttpClient工具"><a href="#HttpClient工具" class="headerlink" title="HttpClient工具"></a>HttpClient工具</h2><ul><li> 需要导入的依赖<pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.httpcomponents<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.29<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>HttpClient<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** \* 发送 post请求访问本地应用并根据传递参数不同返回不同结果 */</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 创建默认的httpClient实例.</span>   <span class="token class-name">CloseableHttpClient</span> httpclient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建httppost</span>   <span class="token class-name">HttpPost</span> httppost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/myDemo/Ajax/serivceJ.action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建参数队列</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">></span></span> formparams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NameValuePair</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   formparams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"house"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">UrlEncodedFormEntity</span> uefEntity<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    uefEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>formparams<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    httppost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>uefEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"executing request "</span> <span class="token operator">+</span> httppost<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> httpclient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httppost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">HttpEntity</span> entity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Response content: "</span> <span class="token operator">+</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientProtocolException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭连接,释放资源</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       httpclient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">/** \* 发送 get请求 */</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">CloseableHttpClient</span> httpclient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建httpget.</span>    <span class="token class-name">HttpGet</span> httpget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"executing request "</span> <span class="token operator">+</span> httpget<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行get请求.</span>    <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> httpclient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取响应实体</span>      <span class="token class-name">HttpEntity</span> entity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 打印响应状态</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 打印响应内容长度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Response content length: "</span> <span class="token operator">+</span> entity<span class="token punctuation">.</span><span class="token function">getContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印响应内容</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Response content: "</span> <span class="token operator">+</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientProtocolException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭连接,释放资源</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      httpclient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><p>（1）ajax + 响应头 Access-control-Allow-origin</p><p>​    在当前域名请求网站中，默认不允许通过ajax请求发送其他域名。报错XMLHttpRequest cannot load 。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span> <span class="token operator">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">dataType</span> <span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>    <span class="token literal-property property">url</span> <span class="token operator">:</span> <span class="token string">"http://a.a.com/a/FromUserServlet"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span> <span class="token operator">:</span> <span class="token string">"userName=余胜军&amp;userAge=19"</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    后台response添加header，response.setHeader(“Access-Control-Allow-Origin”, “*”); 支持所有网站</p><p>（2）JSONP</p><p>​    在ajax中加入JSONP格式传输。</p><pre class="line-numbers language-none"><code class="language-none"> $.ajax(&#123;   type : &quot;POST&quot;,   async : false,   url : &quot;http:&#x2F;&#x2F;a.a.com&#x2F;a&#x2F;FromUserServlet?userName&#x3D;张三&quot;,   dataType : &quot;jsonp&quot;,&#x2F;&#x2F;数据类型为jsonp    jsonp : &quot;jsonpCallback&quot;,&#x2F;&#x2F;服务端用于接收callback调用的function名的参数    success : function(data) &#123;    alert(data.result);  &#125;,   error : function() &#123;    alert(&#39;fail&#39;);   &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>   resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// resp.setHeader("Access-Control-Allow-Origin", "*");</span>   <span class="token class-name">String</span> userName <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> userAge <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"userAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">"----"</span> <span class="token operator">+</span> userAge<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"No-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">setDateHeader</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">JSONObject</span> resultJSON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据需要拼装json</span>    resultJSON<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> jsonpCallback <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"jsonpCallback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 客户端请求参数</span>    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonpCallback <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> resultJSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回jsonp格式数据</span>    out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO: handle exception</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>· 注意事项</strong></p><p>  · 原理是，底层生成一个get请求发送。<br>  · 缺点：只支持get请求，不支持post请求</p><p>（3）网关系统</p><p>​    使用nginx进行域名转发</p><p>（4）使用后台服务器转发，如HttpClient</p><p>​    不建议使用，非常占宽带。</p><h1 id="单点登录SSO"><a href="#单点登录SSO" class="headerlink" title="单点登录SSO"></a>单点登录SSO</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>  SSO英文全称Single Sign On，单点登录。SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p><p>例如访问在网易账号中心（<a href="http://reg.163.com/%EF%BC%89%E7%99%BB%E5%BD%95%E4%B9%8B%E5%90%8E%EF%BC%8C%E8%AE%BF%E9%97%AE%E4%BB%A5%E4%B8%8B%E7%AB%99%E7%82%B9%E9%83%BD%E6%98%AF%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%EF%BC%9A">http://reg.163.com/）登录之后，访问以下站点都是登录状态：</a></p><p>· 网易直播<a href="http://v.163.com/">http://v.163.com</a></p><p>· 网易博客<a href="http://blog.163.com/">http://blog.163.com</a></p><p>· 网易花田<a href="http://love.163.com/">http://love.163.com</a></p><p>· 网易考拉<a href="https://www.kaola.com/">https://www.kaola.com</a></p><p>· 网易Lofter<a href="http://www.lofter.com/">http://www.lofter.com</a></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853360.png" alt="img" style="zoom:50%;" /><p>（1）架构说明</p><p>· 前台站点：需要登录的站点</p><p>· SSO站点-登录：提供登录的页面</p><p>· SSO站点-登出：提供注销登录的入口</p><p>· SSO服务-登出：提供登录服务</p><p>· SSO服务-登录状态：提供登录状态校验/登录信息查询的服务</p><p>· SSO服务-登出：提供用户注销登录的服务</p><p>· 数据库：存储用户账户信息</p><p>· 缓存：存储用户的登录信息，通常使用Redis</p><p>·用户登录状态的存储和校验逻辑</p><p>（2）用户登录状态的存储和校验</p><p>  常见的Web框架对于Seesion的实现都是生成一个SessionId存储在浏览器Cookie中。然后将Session内容存储在服务器端内存中。</p><p>  用户登录成功之后，生成AuthToken交给客户端保存。如果是浏览器，就保存在Cookie中。如果是手机App就保存在App本地缓存中。 用户在浏览需要登录的页面时，客户端将AuthToken提交给SSO服务校验登录状态/获取用户登录信息</p><p>  对于登录信息的存储，建议采用Redis，使用Redis集群来存储登录信息，既可以保证高可用，又可以线性扩充。同时也可以让SSO服务满足负载均衡/可伸缩的需求。</p><p>  AuthToken，直接使用UUID/GUID即可，如果有验证AuthToken合法性需求，可以将UserName+时间戳加密生成，服务端解密之后验证合法性</p><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853432.png" alt="img" /><p>按照上图，用户登录后Authtoken保存在Cookie中。 domian= test. com浏览器会将domain设置成 .test.com，这样访问所有*.test.com的web站点，都会将Authtoken携带到服务器端。然后通过SSO服务，完成对用户状态的校验/用户登录信息的获取。</p><h2 id="登录信息获取-登录状态校验"><a href="#登录信息获取-登录状态校验" class="headerlink" title="登录信息获取/登录状态校验:"></a>登录信息获取/登录状态校验:</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853460.png" alt="img"/><h2 id="用户登出时序图"><a href="#用户登出时序图" class="headerlink" title="用户登出时序图"></a>用户登出时序图</h2><p>用户登出时要做的事情很简单：</p><p>· 服务端清除缓存（Redis）中的登录状态</p><p>· 客户端清除存储的AuthToken</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853416.png" alt="img"/><h2 id="跨域登录-登出"><a href="#跨域登录-登出" class="headerlink" title="跨域登录/登出"></a>跨域登录/登出</h2><p>  跨域要解决的问题，就是如何解决Cookie的跨域读写问题。</p><p>  解决跨域的核心思路就是：</p><p>· 登录完成之后通过回调的方式，将AuthToken传递给主域名之外的站点，该站点自行将AuthToken保存在当前域下的Cookie中。</p><p>· 登出完成之后通过回调的方式，调用非主域名站点的登出页面，完成设置Cookie中的AuthToken过期的操作。</p><ul><li>跨域登录（主域名已登录）</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853461.png" alt="img" /><ul><li>跨域登录（主域名未登录）</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853481.png" alt="img"/><ul><li>跨域登出</li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629161853448.png" alt="img"/><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><a href="https://www.jianshu.com/p/f12a0aa51d70">03-shiro权限系统-单点登陆 - 简书</a></p><h1 id="OAuth认证和验证"><a href="#OAuth认证和验证" class="headerlink" title="OAuth认证和验证"></a>OAuth认证和验证</h1><p>参考：<a href="https://blog.csdn.net/yonhu123java/article/details/108276882">4种模式</a>、<a href="https://blog.csdn.net/iteye_5904/article/details/82542557?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">流程</a>、<a href="https://blog.csdn.net/little_kelvin/article/details/111232009?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control">总体</a></p><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><ul><li>OAuth(开放授权)是一个开放标准。</li><li>允许第三方网站在用户授权的前提下访问在用户在服务商那里存储的各种信息。而这种授权无需将用户提供用户名和密码提供给该第三方网站。</li><li>OAuth允许用户提供一个令牌给第三方网站，一个令牌对应一个特定的第三方网站，同时该令牌只能在特定的时间内访问特定的资源。</li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><p>OAuth的认证和授权的过程中涉及的三方包括：<br>服务商：用户使用服务的提供方，一般用来存消息、储照片、视频、联系人、文件等(比如Twitter、Sina微波等)。<br>用  户：服务商的用户<br>第三方：通常是网站，该网站想要访问用户存储在服务商那里的信息。</p><p>比如某个提供照片打印服务的网站，用户想在那里打印自己存在服务商那里的网络相册。在认证过程之前，第三方需要先向服务商申请第三方服务的唯一标识。</p></li><li><p>OAuth认证和授权的过程如下:</p><ol><li>用户访问第三方网站网站，想对用户存放在服务商的某些资源进行操作。</li><li>第三方网站向服务商请求一个临时令牌。</li><li>服务商验证第三方网站的身份后，授予一个临时令牌。</li><li>第三方网站获得临时令牌后，将用户导向至服务商的授权页面请求用户授权，然后这个过程中将临时令牌和第三方网站的返回地址发送给服务商。</li><li>用户在服务商的授权页面上输入自己的用户名和密码，授权第三方网站访问所相应的资源。</li><li>授权成功后，服务商将用户导向第三方网站的返回地址。</li><li>第三方网站根据临时令牌从服务商那里获取访问令牌。</li><li>服务商根据令牌和用户的授权情况授予第三方网站访问令牌。</li><li>第三方网站使用获取到的访问令牌访问存放在服务商的对应的用户资源。</li></ol><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/Center.jpeg" alt="img"></p></li></ul><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>授权码模式</td><td>基于授权码code，是最严谨，最安全，流程最完整的授权模式</td></tr><tr><td>隐藏式 （简化模式）</td><td>授权码模式的简化版本，缺少了授权码环节</td></tr><tr><td>密码模式</td><td>第三方应用直接使用资源拥有者的用户密码去获取令牌</td></tr><tr><td>客户端凭证模式</td><td>第三方应用使用客户端凭证请求令牌</td></tr></tbody></table><h1 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h1><h2 id="eclipse-开发web程序"><a href="#eclipse-开发web程序" class="headerlink" title="eclipse 开发web程序"></a><strong>eclipse 开发web程序</strong></h2><p>  启动tomcat服务器的时候。临时目录在你的工作区间workspace.metadata.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\</p><p>  用于临时存放服务器编译过后的jsp、servlet、字节码文件、图片之类的，相当于缓存，不用每次都编译，提高速度。</p><h2 id="Servlet里resp-getWriter-write-“-n”-不能换行"><a href="#Servlet里resp-getWriter-write-“-n”-不能换行" class="headerlink" title="Servlet里resp.getWriter().write(“\n”)不能换行"></a>Servlet里resp.getWriter().write(“\n”)不能换行</h2><p>  servlet编程的时候使用 resp.getWriter().write(“\n”) 来换行，一开始还觉得代码没有问题呀，也没报错，太天真了，原来是要用html标签来换行。</p><p>  使用resp.getWriter().write(“&lt; br/&gt;”) 完全ok，不然resp.setContentType(“text/html”)是摆在那里吃素的吗！！！</p>]]></content>
      
      
      <categories>
          
          <category> 网络与Web基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络与Web基础 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring知识汇总</title>
      <link href="/2020/10/10/spring-zhi-shi-hui-zong/"/>
      <url>/2020/10/10/spring-zhi-shi-hui-zong/</url>
      
        <content type="html"><![CDATA[<p><em>由简书搬迁而来<a href="https://www.jianshu.com/p/263a6e3198cd"><strong>原文链接</strong></a></em></p><blockquote><p>目录<br>  1 数据交换格式<br>  2 Java反射<br>  3 Spring简介<br>  4 Spring IOC<br>  5 代理<br>  6 Spring AOP<br>  7 Spring MVC<br>  8 Spring JDBC<br>  9 Spring 事务<br>  10 Spring 远端调用<br>  11 Spring代码  </p><p>参考资料：  </p><ul><li>《Spring 技术内幕》  </li><li>JavaG  </li><li>JavaD  </li><li>简书文章  </li></ul></blockquote><h1 id="数据交换格式"><a href="#数据交换格式" class="headerlink" title="数据交换格式"></a>数据交换格式</h1><p>  客户端与服务器常用数据交换格式xml、JSON、html。XML是重量级数据格式，传输过程中占带宽较大，传输效率不高；JSON是轻量级的数据格式，占带宽较小。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>移动端、互联网项目，大多采用http+JSON，走restful风格。</li><li>webService服务采用http+XML，多用于银行项目。</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>  JSON(JavaScript Object Notation)是一种轻量级的数据交换格式，相比于xml这种数据交换格式来说，因为解析xml比较的复杂，而且需要编写大段的代码，所以客户端和服务器的数据交换格式往往通过JSON来进行交换。<br>样例:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"sites"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"baidu"</span><span class="token punctuation">,</span>          <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"www.baidu.com"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"sougou"</span><span class="token punctuation">,</span>          <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"www.sougou.com"</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON格式说明"><a href="#JSON格式说明" class="headerlink" title="JSON格式说明"></a>JSON格式说明</h3><p>  JSON的形式是用大括号“{}”包围起来的项目列表，每一个项目间用逗号（,）分隔，而项目就是用冒号（:）分隔的属性名和属性值。这是典型的字典表示形式，也再次表明javascript里的对象就是字典结构。不管多么复杂的对象，都可以用一句JSON代码来创建并赋值。在JSON中，名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值。</p><p>  json简单说就是javascript中的对象和数组，所以这两种结构就是<strong>对象</strong>和<strong>数组</strong>两种结构，通过这两种结构可以表示各种复杂的结构</p><p>（1）对象：对象在js中表示为“{}”括起来的内容，数据结构为 {key：value,key：value,…}的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是 数字、字符串、数组、对象几种。</p><p>（2）数组：数组在js中是中括号“[]”括起来的内容，数据结构为 [“java”,”javascript”,”vb”,…]，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象几种。经过对象、数组2种结构就可以组合成复杂的数据结构了。</p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>​    常用的JSON解析框架有：fastjson(阿里)、gson(谷歌)、jackson(SpringMVC自带)。下面主要介绍阿里的fastjson。</p><p>​    另一篇博文介绍了主要用法<a href="https://jason-qianhao.github.io/_posts/2021-06-26-fastjson%E6%B1%87%E6%80%BB/">fastjson汇总</a></p><h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> jsonStr <span class="token operator">=</span> <span class="token string">"&#123;\"sites\":[&#123;\"name\":\"baidu\",\"url\":\"www.baidu.com\"&#125;,&#123;\"name\":\"sougou\",\"url\":\"www.sougou.com/\"&#125;]&#125;"</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将json字符串转为jsonbject </span>  <span class="token class-name">JSONObject</span> jsonStrObject <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>jsonObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里也可以用JSON.parseObject(jsonStr)**</span>  <span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> jsonStrObject<span class="token punctuation">.</span><span class="token function">getJSONArray</span><span class="token punctuation">(</span><span class="token string">"sites"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> object <span class="token operator">:</span> jsonArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">JSONObject</span> stObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> stObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> stObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组装json"><a href="#组装json" class="headerlink" title="组装json"></a>组装json</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JSONObject</span> stObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"baidu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stObject<span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sites"</span><span class="token punctuation">,</span> jsonArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//这里也可以用JSON.toJSONString(root, SerializerFeature.WriteMapNullValue);后面的参数为是否显示null值等控制参数。**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>  它是可扩展标记语言（Extensible Markup Language，简称XML），是一种标记语言。主要用于描述数据和用作配置文件。</p><p>  XML文档在逻辑上主要由一下 5 个部分组成：</p><p>  （1）XML声明：指明所用 XML 的版本、文档的编码、文档的独立性信息</p><p>  （2）文档类型声明：指出XML文档所用的 DTD</p><p>  （3）元素：由开始标签、元素内容和结束标签构成</p><p>  （4）注释：以结束，用于对文档中的内容起一个说明作用</p><p>  （5）处理指令：通过处理指令来通知其他应用程序来处理非XML格式的数据，格式为</p><p>　　XML文档的根元素被称为文档元素，它和在其外部出现的处理指令、注释等作为文档实体的子节点，根元素本身和其内部的子元素也是一棵树。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>students</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>微信公众号</span><span class="token punctuation">></span></span>@残缺的孤独<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>微信公众号</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>学号</span><span class="token punctuation">></span></span>20140101<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>学号</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>地址</span><span class="token punctuation">></span></span>北京海淀区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>地址</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>座右铭</span><span class="token punctuation">></span></span>要么强大，要么听话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>座右铭</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>002<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>新浪微博</span><span class="token punctuation">></span></span>@残缺的孤独<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>新浪微博</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>学号</span><span class="token punctuation">></span></span>20140102<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>学号</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>地址</span><span class="token punctuation">></span></span>北京朝阳区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>地址</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>座右铭</span><span class="token punctuation">></span></span>在哭泣中学会坚强<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>座右铭</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>students</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用解析XML方法"><a href="#常用解析XML方法" class="headerlink" title="常用解析XML方法"></a>常用解析XML方法</h3><p>  常用解析框架： Dom4j、Sax、Pull。</p><ul><li>Dom4j与Sax区别<br><strong>dom4j不适合大文件的解析，因为它是一下子将文件加载到内存中</strong>，所以有可能出现内存溢出，sax是基于事件来对xml进行解析的，所以他可以解析大文件的xml，也正是因为如此，所以dom4j可以对xml进行灵活的增删改查和导航，而sax没有这么强的灵活性，所以sax经常是用来解析大型xml文件，而要对xml文件进行<strong>一些灵活（crud）操作就用dom4j</strong>。</li></ul><h3 id="dom4j"><a href="#dom4j" class="headerlink" title="dom4j"></a>dom4j</h3><h4 id="dom4j获取Document对象方法"><a href="#dom4j获取Document对象方法" class="headerlink" title="dom4j获取Document对象方法"></a>dom4j获取Document对象方法</h4><p>  解析XML过程是通过获取Document对象，然后继续获取各个节点以及属性等操作，因此获取Document对象是第一步，大体说来，有<strong>三种方式</strong>：</p><p>（1）自己创建Document对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Element</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中students是根节点，可以继续添加其他节点等操作。</p><p>（2）自己创建Document对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建SAXReader对象</span><span class="token class-name">SAXReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取文件 转换成Document</span><span class="token class-name">Document</span> document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"XXXX.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）读取XML文本内容获取Document对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> xmlStr <span class="token operator">=</span> <span class="token string">"&lt;students>......&lt;/students>"</span><span class="token punctuation">;</span><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token class-name">DocumentHelper</span><span class="token punctuation">.</span><span class="token function">parseText</span><span class="token punctuation">(</span>xmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>dom4j解析Demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DocumentException</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">SAXReader</span> saxReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Document</span> read <span class="token operator">=</span> saxReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E://work//spring-ioc//src//main//resources//stu.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取根节点</span>  <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> read<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getNodes</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token class-name">Element</span> rootElement<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前节点名称:"</span> <span class="token operator">+</span> rootElement<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取属性ID</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Attribute</span><span class="token punctuation">></span></span> attributes <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">*</span>rootElement<span class="token punctuation">.</span><span class="token function">attributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Attribute</span> attribute <span class="token operator">:</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"属性:"</span> <span class="token operator">+</span> <span class="token operator">*</span><span class="token operator">*</span>attribute<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> attribute<span class="token punctuation">.</span>*<span class="token operator">*</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootElement<span class="token punctuation">.</span><span class="token function">getTextTrim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> rootElement<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用迭代器遍历</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">></span></span> elementIterator <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elementIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>elementIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Element</span> next <span class="token operator">=</span> elementIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getNodes</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><h2 id="反射的作用"><a href="#反射的作用" class="headerlink" title="反射的作用"></a>反射的作用</h2><p>（1）动态创建对象，不适用new。<br>（2）反编译：.class -&gt; .java<br>（3）访问java对象的属性、方法、构造方法等。</p><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>（1）JDBC加载驱动<br>（2）Spring IOC，原理即<strong>反射+dom4j</strong>。<br>（3）框架的配置文件中，含有class=“….”等字样。</p><h2 id="获取class对象的方法"><a href="#获取class对象的方法" class="headerlink" title="获取class对象的方法"></a>获取class对象的方法</h2><p>（1） Class c1 = Class.forName(“类的全限定名”);<br>（2） Class c2 = 类名.class;<br>（3） Class c3 = this.getClass();</p><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> forName <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.qian.entity.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建此Class 对象所表示的类的一个新实例 调用了User的无参数构造方法.</span><span class="token class-name">Object</span> newInstance <span class="token operator">=</span> forName<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319668.png" alt="img"></p><h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><p>​    spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<br>​    Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。<br>     轻量，从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。<br>​    控制反转，Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。<br>​    面向切面，Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。<br>​    容器，Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。<br>​    框架，Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。<br>​    所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。<br>​    一般说的spring框架大都是Spring Framework，它是很多模块的集合，使用这些模块可以很方便地协助我们进行开发。这些模块包括核心容器、数据访问/集成、Web、AOP面向切面编程、工具、消息和测试模块。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319567.png" alt="img" style="zoom:50%;" /><ul><li>列举一些重要的spring模块：<br>（1）Spring Core 包含IOC容器等。<br>（2）Spring Aspects 与AspectJ集成。<br>（3）Spring AOP 面向切面的编程实现。<br>（4）Spring JDBC 与Java数据库对接。<br>（5）Spring JMS Java消息服务。<br>（6）Spring ORM 支持Hibernate等ORM工具<br>（7）Spring Web 创建web应用程序提供支持<br>（8）Spring Test 提供对Junit和TestNG测试的支持。</li></ul><h1 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>创建对象和处理对象的依赖关系。</li><li>原理是：Java反射+dom4j</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>  控制反转、依赖注入。<br>  对象之间的依赖关系可以通过把对象的依赖注入交给框架或者IOC容器来完成，降低代码的耦合度。在Spring的实现中，IOC容器是实现这个模式的载体，它可以在对象生成或初始化时直接将数据注入到对象中，也可以通过将对象引用注入到数据域中的方式来注入对方法调用的依赖。</p><h2 id="IOC容器实现"><a href="#IOC容器实现" class="headerlink" title="IOC容器实现"></a>IOC容器实现</h2><p>  在Spring IOC容器的设计中，有两个主要的容器系列。一个是实现BeanFactory接口的简单容器系列，这个系列只实现了容器的最基本功能；另一个是ApplicationContext应用上下文，它作为容器的高级形态而存在。</p><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629152656549.png" alt="img" style="zoom:50%;" /><h4 id="BeanFactory和FactoryBean区别"><a href="#BeanFactory和FactoryBean区别" class="headerlink" title="BeanFactory和FactoryBean区别"></a>BeanFactory和FactoryBean区别</h4><ul><li>BeanFactory定义了 IOC 容器的最基本形式，并提供了 IOC 容器应遵守的的最基本的接口，也就是 Spring IOC 所遵守的最底层和最基本的编程规范。BeanFactory仅是个接口，并不是IOC容器的具体实现。所有的 Bean 都是由 BeanFactory( 也就是 IOC 容器 ) 来进行管理。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//FactoryBean前缀</span>   <span class="token class-name">String</span> FACTORY_BEAN_PREFIX <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>   <span class="token comment">//根据名称获取Bean对象</span>   <span class="token class-name">Object</span> <span class="token operator">*</span><span class="token operator">*</span>getBean<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>   <span class="token comment">///根据名称、类型获取Bean对象 &lt;T> </span>   <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>   <span class="token comment">//根据类型获取Bean对象 &lt;T> </span>   <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span>  requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>  <span class="token comment">//根据名称获取Bean对象,带参数</span>   <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>   <span class="token comment">//根据类型获取Bean对象,带参数 &lt;T> </span>   <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>   <span class="token comment">//是否存在 boolean </span>   <span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//是否为单例</span>   <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>   <span class="token comment">//是否为原型（多实例）</span>   <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>   <span class="token comment">//名称、类型是否匹配</span>   <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>   <span class="token comment">//获取类型</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">;</span>   <span class="token comment">//根据实例的名字获取实例的别名</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>FactoryBean工厂类接口，用户可以通过实现该接口定制实例化 Bean 的逻辑。是一个能产生或者修饰对象生成的工厂Bean，可以在IOC容器中被管理，类似工厂模式和修饰器模式。当使用容器中factory bean的时候，该容器不会返回factory bean本身，而是返回其生成的对象。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>   <span class="token comment">//FactoryBean 创建的 Bean 实例</span>   <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>   <span class="token comment">//返回 FactoryBean 创建的 Bean 类型</span>   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回由 FactoryBean 创建的 Bean 实例的作用域是 singleton 还是 prototype</span>   <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IOC容器的使用步骤："><a href="#IOC容器的使用步骤：" class="headerlink" title="IOC容器的使用步骤："></a>IOC容器的使用步骤：</h4></li></ul><p>（1）创建IOC配置文件的抽象资源，这个抽象资源包含了BeanDefinition的定义信息。<br>    ClassPathResource res = new ClassPathResource(“bean.xml”);<br>（2）创建一个BeanFactory。<br>    DefaultListableBeanFactory factory = new DefaultListableBeanFactory();<br>（3）创建一个BeanDefinitionReader。<br>    XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(factory);<br>（4）加载配置信息，完成载入和注册Bean定义。<br>    reader.loadBeanDefinitions(res);</p><ul><li>BeanDefinition<br>BeanFactory 是 Bean 容器，那么 Bean 又是什么呢？这里的 BeanDefinition 就是我们所说的 Spring 的 Bean，我们自己定义的各个 Bean 其实会转换成一个个 BeanDefinition 存在于 Spring 的 BeanFactory 中。所以 Bean 在代码层面上可以简单认为是 BeanDefinition 的实例BeanDefinition 中保存了我们的 Bean 信息，比如这个 Bean 指向的是哪个类、是否是单例的、是否懒加载、这个 Bean 依赖了哪些 Bean 等等。</li></ul><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319716.png" alt="img" style="zoom:50%;" /><p>  是一个高级形态意义的IOC容器。</p><p>  在BeanFactory的基础上添加的新特性：<br>（1）扩展MessageSource接口，支持不同的信息源。<br>（2）对ResourceLoader和Resource的支持，可以灵活得到Bean。<br>（3）继承接口ApplicationEventPublisher，支持应用事件<br>（4）丰富的附件功能，面向框架的风格。</p><p>  一个具体的应用上下文，只需要实现和它自身设计相关的功能，如FileSystemXmlApplicationContext，需要实现：<br>（1）对实例化应用上下文的支持，启动IOC的refresh()过程。<br>（2）定义如何从文件加载Bean定义资源。</p><h2 id="IOC源码分析"><a href="#IOC源码分析" class="headerlink" title="IOC源码分析"></a>IOC源码分析</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319869.jpeg" alt="img" style="zoom: 63%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320045.jpeg" alt="img" style="zoom: 63%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319668.jpeg" alt="img" style="zoom:63%;" /><p><em>IOC初始化过程</em>:</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319746.png" alt="img"></p><ul><li>一些注意点<br>（1）Bean的依赖注入发生在第一次getBean()方法调用时<br>（2）设置了lazyinit属性的Bean，在IOC容器初始化完成注入<br>（3）创建bean实例的两种方法：<pre><code>  - BeanUtils中的JVM反射        - CGLIB</code></pre>（4）在Bean的创建和对象依赖注入中，递归完成依赖注入。</li></ul><h2 id="IOC中的Bean"><a href="#IOC中的Bean" class="headerlink" title="IOC中的Bean"></a>IOC中的Bean</h2><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>（1）singleton 单例模式（默认）。Bean类中的全局变量用TheadLocal来定义，解决线程安全问题。<br>（2）prototype，每次请求会创建一个新的bean实例。<br>（3）request，Http请求创建一个Bean，仅在当前request有效。<br>（4）session，Http请求创建一个Bean，仅在当前session有效。<br>（5）global-session，全局session，在基于portlet的web中有效。</p><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><p>（1）Bean容器中找到Bean定义。<br>（2）创建bean实例<br>（3）bean属性注入<br>（4）如果实现了*.Aware接口，调用setXXX（）方法。<br>（5）如果实现了BeanPostProcess方法，调用postProcessBeforeInitialization方法。<br>（6）如果实现了InitializingBean接口，调用afterPropertiesSet方法。<br>（7）如果配置文件中定义包含Init-method属性，执行指定方法<br>（8）如果实现了BeanPostProcess方法，调用postProcessAfterInitialization()方法。<br>（9）如果实现了DisposableBean接口，执行destroy()方法<br>（10）如果在配置文件中定义包含destroy-method属性，执行指定方法。</p><h2 id="IOC中创建对象"><a href="#IOC中创建对象" class="headerlink" title="IOC中创建对象"></a>IOC中创建对象</h2><p>  创建对象,有几种方式：</p><ul><li><p>调用无参数构造器</p></li><li><p>带参数构造器</p></li><li><p>工厂创建对象</p></li></ul><p>​    工厂类，静态方法创建对象</p><p>​    工厂类，非静态方法创建对象</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 无参构造函数 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qian.entity.UserEntity<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!-- 有参构造函数 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qian.entity.UserEntity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qian.entity.ObjectFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 通过实例工厂方法创建 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user3<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 通过静态工厂方法创建 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qian.entity.ObjectFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStaticInstance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IOC的依赖注入（DI）"><a href="#IOC的依赖注入（DI）" class="headerlink" title="IOC的依赖注入（DI）"></a>IOC的依赖注入（DI）</h2><ul><li><p>通过构造函数</p></li><li><p>通过set方法给属性注入值</p></li><li><p>p名称空间</p></li><li><p>注解<br>  <strong>使用注解步骤</strong></p><ul><li>先引入context名称空间<pre><code>  `xmlns:context=&quot;http://www.springframework.org/schema/context&quot;`</code></pre></li><li>开启注解扫描  <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.itcast.e_anno2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用注解，通过注解的方式，把对象加入ioc容器。</li></ul><p><strong>创建对象以及处理对象依赖关系，相关的注解：</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>指定把一个对象加入IOC容器<span class="token annotation punctuation">@Repository</span>作用同<span class="token annotation punctuation">@Component</span>；在持久层使用<span class="token punctuation">(</span>dao<span class="token punctuation">)</span><span class="token annotation punctuation">@Service</span>作用同<span class="token annotation punctuation">@Component</span>；在业务逻辑层使用<span class="token annotation punctuation">@Controller</span>作用同<span class="token annotation punctuation">@Component</span>；在控制层使用<span class="token annotation punctuation">@Resource</span>属性注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意事项</strong></p><pre class="line-numbers language-none"><code class="language-none">@autowired spring框架自带  默认以类型查找@Resource是jdk1.6  默认以名称查找 再以类型如果xml和注解混合使用，先走xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Component 和 @Bean 的区别是什么？</strong><br>      a. 作用对象不同：@Component注解作用于类，而@Bean注解作用于方法。<br>      b. @Component通常通过类路径扫描(@ComponentScan)来自动侦测以及自动装配到<br>        Spring容器中；@Bean注解通常是在标有该注解的方法中定义产生这个Bean，<br>        @bean告诉Spring这是某个类的实例，当需要它的时候还给我。<br>      c. @Bean注解比Component注解的自定义性更强，而且很多地方只能通过@Bean注解<br>        来注册bean。特别是引用第三方库中的类需要装配到Spring容器时，只能通过<br>        @Bean实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">OneService</span> <span class="token function">getService</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">case</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     when <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">serviceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     when <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">serviceImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     when <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">serviceImpl3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>  代理指的是一个代理人（或替代品），它被授权代表另外一个人（或文档）。</p><p>  代理的一些特性：1.代理存在的意义就是代表另一个事物。2.代理至少需要完成（或实现）它所代表的事物的功能。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>  JAVA静态代理是指由程序员创建或工具生成的代理类，这个类在编译期就已经是确定了的，存在的。<br>  典型的静态代理模式一般包含三类角色:</p><p>（1）抽象角色：它的作用是定义一组行为规范。抽象角色一般呈现为接口（或抽象类），这些接口（或抽象类）中定义的方法就是待实现的。</p><p>（2）真实角色：实现了抽象角色所定义的行为。真实角色就是个普通的类，它需要实现抽象角色定义的那些接口。</p><p>（3）代理角色：代表真实角色的角色。根据上面代理的定义，我们可以知道代理角色需要至少完成（或实现）真实角色的功能。为了完成这一使命，那么代理角色也需要实现抽象角色所定义的行为（即代理类需要实现抽象角色所定义的接口），并且在实现接口方法的时候需要调用真实角色的相应方法。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319787.png" alt="img"/><ul><li><p>特点：需要手动生成代理类，并在实现接口方法的时候调用真实类的方法。</p></li><li><p>缺点：</p><ul><li><p>代理类依赖于真实类。在编译期就已经确定代理类和真实类的关系。</p></li><li><p>一个真实类对应一个代理类，导致类数量膨胀。</p></li></ul></li></ul><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>  动态代理是在运行期利用JVM的反射机制生成代理类,这里是直接生成类的字节码（JDK动态代理技术是在运行时直接生成类的字节码，并载入到虚拟机执行的。<strong>这里不存在class文件的</strong>），然后通过类加载器载入JAVA虚拟机执行。现在主流的JAVA动态代理技术的实现有两种：一种是JDK自带的，就是我们所说的JDK动态代理，另一种是开源社区的一个开源项目CGLIB。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>DK动态代理的实现是在运行时，根据一组接口定义，使用Proxy、InvocationHandler等工具类去生成一个代理类和代理类实例。这两个类都在jdk的反射包java.lang.reflect下面。Proxy是个工具类，有了它就可以为接口生成动态代理类了。</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319938.png" alt="img"></p><ul><li>生成的代理类$Proxy0对外只提供一个构造函数，这个构造函数接受一个InvocationHandler实例h，这个构造函数的逻辑非常简单，就是调用父类的构造函数，将参数h赋值给对象字段h。最终就是把所有的方法实现都分派到InvocationHandler实例h的invoke方法上。所以JDK动态代理的接口方法实现逻辑是完全由InvocationHandler实例的invoke方法决定的。</li></ul><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>（1）定义一个接口，即需要代理的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyIntf</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）定义处理类，实现InvocationHandler接口。只有一个待实现的invoke(Objectproxy,Methodmethod,Object[]args)方法，proxy表示动态代理类实例，method表示调用的方法，args表示调用方法的参数。在实际应用中，invoke方法就是我们实现业务逻辑的入口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）利用Proxy.newProxyInstance(ClassLoader，Class&lt;?&gt;，InvocationHandler)创建代理类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyIntf</span> proxyObj <span class="token operator">=</span>     <span class="token punctuation">(</span><span class="token class-name">MyIntf</span><span class="token punctuation">)</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">MyIntf</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">MyIntf</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            proxyObj<span class="token punctuation">.</span><span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成的代理类源码"><a href="#生成的代理类源码" class="headerlink" title="生成的代理类源码"></a>生成的代理类源码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">MyIntf</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Methodm0</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Methodm1</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Methodm2</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Methodm3</span><span class="token punctuation">;</span>  <span class="token keyword">static</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>      m0<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span>newClass<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m1<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span>newClass<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m2<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span>newClass<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m3<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tuniu.distribute.openapi.common.annotation.MyIntf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">,</span>newClass<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> localNoSuchMethodException<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>localNoSuchMethodException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> localClassNotFoundException<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>localClassNotFoundException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> paramInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>paramInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>m3<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Error</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> localError<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> localError<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 后面省略equals(),hashCode(),toString()三个方法的代码，因为这三个方法和helloWorld()方法非常相似</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>  从上面生成的代理类源码可以看出，在$Proxy0类中，利用<strong>Java反射技术</strong>获取Target接口中的方法。</p><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ul><li><p>实现类可以不用实现任何接口，使用字节码增强器Enhancer类创建代理类。</p></li><li><p><strong>代理类继承业务类</strong>，并对方法强化处理从而实现代理。</p></li></ul><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><p>（1）查找目标类素有非final的public方法定义<br>（2）将方法转换为字节码<br>（3）将组成的字节码装换为class对象。<br>（4）实现MethodInterceptor接口，作为拦截器。利用其intercept(Object obj, Method method, Object[] objects, MethodProxy methodProxy)方法，作为回调入口。在方法的内部主要调用的methodProxy.invokeSuper，执行的原始类的方法。<br>      - obj：表示要进行增强的对象；</p><ul><li><p>method：表示要被拦截的方法；</p></li><li><p>objects：表示要被拦截方法的参数；</p></li><li><p>methodProxy：表示要触发父类的方法对象。</p></li></ul><p>（5）利用Enhance生成代理类。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>  利用<strong>Java字节码编辑类库ASM</strong>操作字节码实现。</p><h3 id="对比两种动态代理"><a href="#对比两种动态代理" class="headerlink" title="对比两种动态代理"></a>对比两种动态代理</h3><ul><li><p>JDK动态代理：基于Java反射机制实现，<strong>必须要实现了接口</strong>的业务类才生成代理对象。</p></li><li><p>CGLIB动态代理：基于ASM机制实现，通过生成业务类的子类作为代理类。</p></li><li><p>JDK Proxy的优势：<br>  最小化依赖关系、代码实现简单、简化开发和维护、JDK原生支持，比CGLIB更加可靠，随JDK版本平滑升级。而字节码类库通常需要进行更新以保证在新版Java上能够使用。</p></li><li><p>基于CGLIB的优势：<br>  <strong>无需实现接口</strong>，达到代理类无侵入，只操作关心的类，而不必为其他相关类增加工作量。高性能。</p></li></ul><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/24777208-76ed33817373b48c.png" alt="img"/><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="概念和作用"><a href="#概念和作用" class="headerlink" title="概念和作用"></a>概念和作用</h2><p>​    AOP（Aspect Oriented Programming: 面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>  基于动态代理实现，且依赖于IOC，只对Bean有效。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>（1）Aspect 切面，一个关注点的模块化<br>（2）<strong>Advice</strong> 通知，“切面”对某个“连接点”的动作。<br>    分类：<br>      · 前置通知 Before<br>      · 后置通知 After<br>      · 返回后通知 AfterReturning<br>      · 异常通知 AfterThrowing<br>      · 环绕通知 Around<br>（3）Joinpoint 连接点，程序执行过程中的某一行为<br>（4）<strong>Pointcut</strong> 切入点，决定通知作用于哪个连接点，集合<br>（5）Target Object 目标对象，被切面通知的对象<br>（6）Aop Proxy Aop代理，有JDK和CGLIB两种<br>（7）<strong>Advisor</strong> 决定拦截那些方法，内部需定义Advice。</p><h2 id="AOP-配置方式"><a href="#AOP-配置方式" class="headerlink" title="AOP 配置方式"></a>AOP 配置方式</h2><p>  Spring 1.2 <strong>基于接口的配置</strong>：最早的 Spring AOP 是完全基于几个接口的，想看源码的同学可以从这里起步。</p><p>  Spring 2.0 <strong>schema-based 配置</strong>：Spring 2.0 以后使用 XML 的方式来配置，使用 命名空间 <aop /></p><p>  Spring 2.0 <strong>@AspectJ 配置</strong>：使用<strong>注解</strong>的方式来配置，这种方式感觉是最方便的，还有，这里虽然叫做 @AspectJ，但是这个和 AspectJ 其实没啥关系。</p><h3 id="基于接口配置"><a href="#基于接口配置" class="headerlink" title="基于接口配置"></a>基于接口配置</h3><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>（1）定义目标接口和其实现类</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319894.png" alt="img" style="zoom:50%;" /><p>（2）定义Advice</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319886.png" alt="img" style="zoom:50%;" /><p>（3）在spring配置文件中定义<strong>ProxyFactoryBean</strong></p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319949.png" alt="img" style="zoom:50%;" /><h4 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a><strong>拦截器配置</strong></h4><p>  在上面的配置中，配置拦截器的时候，interceptorNames 除了指定为 Advice，是还可以指定为 Interceptor 和 Advisor 的。</p><p>（1）Advice<br>  拦截器的粒度只控制到了类级别，类中所有的方法都进行了拦截。</p><p>（2）Advisor<br>  <strong>它内部需要指定一个 Advice</strong>，Advisor 决定该拦截哪些方法，拦截后需要完成的工作还是内部的 Advice 来做。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320072.png" alt="img" style="zoom:50%;" /><p>（3）Interceptor<br>  类似JDK动态代理中的处理类的invoke方法。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151319956.png" alt="img" style="zoom:80%;" /><h4 id="autoproxy自动代理"><a href="#autoproxy自动代理" class="headerlink" title="autoproxy自动代理"></a>autoproxy自动代理</h4><p>  上述方法有个共同的问题，那就是我们得为每个 bean 都配置一个代理，之后获取 bean 的时候需要获取这个代理类的 bean 实例（如 (UserService) context.getBean(“userServiceProxy”)），这显然非常不方便，不利于我们之后要使用的自动根据类型注入。</p><p>用autoproxy包中的<strong>BeanNameAutoProxyCreator代替ProxyFactoryBean。</strong></p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320023.png" alt="img" style="zoom:50%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320007.png" alt="img" style="zoom:50%;" /><h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><h4 id="maven依赖-1"><a href="#maven依赖-1" class="headerlink" title="maven依赖"></a>maven依赖</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h4><p>（1）开启注解，使用 @EnableAspectJAutoProxy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一旦开启了上面的配置，那么所有使用 @Aspect 注解的 <strong>bean</strong> 都会被 Spring 当做<strong>用来实现 AOP 的配置类</strong>，我们称之为一个 <strong>Aspect</strong>。</p><p>（2）配置切入点@Pointcut</p><p>  由如下几种方式：</p><ul><li>@Pointcut(“execution(* transfer(..))”) 正则表达式匹配</li><li>@Pointcut(“within(com.javadoop.springaoplearning.service..*)”) 指定所在类或所在包下面的方法（Spring AOP 独有）</li><li>@Pointcut(“execution( .*(..)) &amp;&amp; @annotation(com.javadoop.annotation.Subscribe)”) 方法上具有特定的注解</li><li>@Pointcut(“bean(*Service)”) 匹配 bean 的名字（Spring AOP 独有）<br>  <strong>注意点：</strong>上面匹配中，通常 “.” 代表一个包名，”..” 代表包及其子包，方法参数任意匹配使用两个点 “..”</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemArchitecture</span><span class="token punctuation">&#123;</span>  <span class="token comment">// web 层</span>  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(com.javadoop.web..*)"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inWebLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// service 层</span>  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(com.javadoop.service..*)"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inServiceLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// dao 层</span>  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"within(com.javadoop.dao..*)"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inDataAccessLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// service 实现，注意这里指的是方法实现，其实通常也可以使用bean(*ServiceImpl)</span>  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.javadoop..service.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">businessService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// dao 实现</span>  <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.javadoop.dao.*.*(..))"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataAccessOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）配置Advice</p><pre class="line-numbers language-none"><code class="language-none">@Aspectpublic class AdviceExample&#123;  &#x2F;&#x2F; 这里会用到我们前面说的 SystemArchitecture  &#x2F;&#x2F; 下面方法就是写拦截 &quot;dao层实现&quot;  @Before(&quot;com.javadoop.aop.SystemArchitecture.dataAccessOperation()&quot;)  public void doAccessCheck()&#123;  &#x2F;&#x2F; ... 实现代码  &#125;   &#x2F;&#x2F; 当然，我们也可以直接&quot;内联&quot;Pointcut，直接在这里定义 Pointcut  &#x2F;&#x2F; 把 Advice 和 Pointcut 合在一起了，但是这两个概念我们还是要区分清楚的  @Before(&quot;execution(* com.javadoop.dao.*.*(..))&quot;)  public void doAccessCheck()&#123;  &#x2F;&#x2F; ... 实现代码  &#125;  @AfterReturning(&quot;com.javadoop.aop.SystemArchitecture.dataAccessOperation()&quot;)  publicvoiddoAccessCheck()&#123;  &#x2F;&#x2F; ...  &#125;  @AfterReturning( pointcut&#x3D;&quot;com.javadoop.aop.SystemArchitecture.dataAccessOperation()&quot;, returning&#x3D;&quot;retVal&quot;)  publicvoiddoAccessCheck(Object retVal)&#123;    &#x2F;&#x2F; 这样，进来这个方法的处理时候，retVal 就是相应方法的返回值，是不是非常方便    &#x2F;&#x2F; ... 实现代码  &#125;   &#x2F;&#x2F; 异常返回  @AfterThrowing(&quot;com.javadoop.aop.SystemArchitecture.dataAccessOperation()&quot;)  publicvoiddoRecoveryActions()&#123;  &#x2F;&#x2F; ... 实现代码  &#125;  @AfterThrowing( pointcut&#x3D;&quot;com.javadoop.aop.SystemArchitecture.dataAccessOperation()&quot;, throwing&#x3D;&quot;ex&quot;)  public void doRecoveryActions(DataAccessException ex)&#123;  &#x2F;&#x2F; ... 实现代码  &#125;  &#x2F;&#x2F; 注意理解它和 @AfterReturning 之间的区别，这里会拦截正常返回和异常的情况  @After(&quot;com.javadoop.aop.SystemArchitecture.dataAccessOperation()&quot;)  public void doReleaseLock()&#123;    &#x2F;&#x2F; 通常就像 finally 块一样使用，用来释放资源。    &#x2F;&#x2F; 无论正常返回还是异常退出，都会被拦截到  &#125;  &#x2F;&#x2F; 感觉这个很有用吧，既能做 @Before 的事情，也可以做 @AfterReturning 的事情  @Around(&quot;com.javadoop.aop.SystemArchitecture.businessService()&quot;)  public Object doBasicProfiling(ProceedingJoinPoint pjp)throwsThrowable&#123;  &#x2F;&#x2F; start stopwatchObject  retVal &#x3D; pjp.proceed();  &#x2F;&#x2F; stop stopwatchreturnretVal;   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此外，Spring 提供了非常简单的获取入参的方法，使用 org.aspectj.lang.<strong>JoinPoint</strong> 作为 Advice 的第一个参数即可，如：</li></ul><pre class="line-numbers language-none"><code class="language-none">@Before(&quot;com.javadoop.springaoplearning.aop_spring_2_aspectj.SystemArchitecture.businessService()&quot;)public void logArgs(JoinPoint joinPoint)&#123;    System.out.println(&quot;方法执行前，打印入参：&quot;+ Arrays.toString(joinPoint.getArgs()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：第一，必须放置在第一个参数上；第二，如果是 @Around，我们通常会使用其子类 ProceedingJoinPoint，因为它有 procceed()/procceed(args[]) 方法。</p><h3 id="schema-based-配置"><a href="#schema-based-配置" class="headerlink" title="schema-based 配置"></a>schema-based 配置</h3><p>  是 Spring 2.0 以后提供的基于<code> &lt;aop /&gt;</code> 命名空间的 XML 配置。这里说的 schema-based 就是指基于 aop 这个 schema。</p><h2 id="AOP源码分析"><a href="#AOP源码分析" class="headerlink" title="AOP源码分析"></a>AOP源码分析</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320079.png" alt="img" style="zoom:50%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320066.jpeg" alt="img" style="zoom:50%;" /><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320171.jpeg" alt="img" style="zoom:50%;" /><h1 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h1><h2 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320143.jpeg" alt="img" style="zoom:50%;" /><h2 id="web环境中的IOC环境"><a href="#web环境中的IOC环境" class="headerlink" title="web环境中的IOC环境"></a>web环境中的IOC环境</h2><p>（1）由ContextLoaderListener 启动根上下文（IOC容器）。<br>（2）由WebApplicationContext 启动子上下文</p><h2 id="工作流程图"><a href="#工作流程图" class="headerlink" title="工作流程图"></a>工作流程图</h2><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210629151320184.png" alt="img"/><p>（1）用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获；</p><p>（2）执行DispatcherServlet的doservice()方法，执行其中的doDispatcher()方法。</p><p>（3）DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping（<strong>处理器映射器，会去查找一个HashMap类型的handlerMapper，key为URL，value为handler</strong>）获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；</p><p>（4） DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（<strong>附注</strong>：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p><p>（5） 提取Request中的模型数据，填充Handler入参，**开始执行Handler（Controller)**。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><p>（6） Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；</p><p>（7）根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；</p><p>（8）ViewResolver 结合Model和View，来渲染视图</p><p>（9）将渲染结果返回给客户端。</p><h2 id="请求处理方法Action"><a href="#请求处理方法Action" class="headerlink" title="请求处理方法Action"></a>请求处理方法Action</h2><p>  Spring MVC中每个控制器中可以定义多个请求处理方法，我们把这种请求处理方法简称为Action，每个请求处理方法可以有多个不同的参数，以及一个多种类型的返回结果。</p><p>Action常见返回值种类：</p><ul><li>ModelAndView</li><li>Model</li><li>Map 包含模型的属性</li><li>View</li><li>String 视图名称</li><li>void</li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>  默认如果action返回String，此时的String为视图名称，会去视图解析器的设定的目录下查找，查找的规则是：URL= prefix前缀+<strong>视图名称</strong>+suffix后缀组成。</p><p>  如果方法声明了注解@ResponseBody ，将内容或对象作为 HTTP 响应正文返回，并调用适合HttpMessageConverter的Adapter转换对象，写入输出流。些时的String不再是路径而是内容。</p><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>  当方法没有返回值时，方法中并未指定视图的名称，则默认视图的名称为方法名.</p><p>  当方法的返回值为void，但输出流中存在输出内容时，则不会去查找视图，而是将输入流中的内容直接响应到客户端，响应的内容类型是纯文本。</p><h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>   在旧的Spring MVC中ModelAndView使用频率非常高，它可以同时指定须返回的模型与视图对象或名称。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/action35"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">action35</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>  <span class="token comment">//1只指定视图</span>  <span class="token comment">// return new ModelAndView("/bar/index");</span>   <span class="token comment">//2分别指定视图与模型</span>  <span class="token comment">//Map&lt;String, Object  model=new HashMap&lt;String,Object ();</span>  <span class="token comment">//model.put("message", "ModelAndView action35");</span>  <span class="token comment">//return new ModelAndView("/bar/index",model);</span>   <span class="token comment">//3同时指定视图与模型</span>  <span class="token comment">//return new ModelAndView("/bar/index","message","action35 ModelAndView ");</span>   <span class="token comment">//4分开指定视图与模型</span>  <span class="token class-name">ModelAndView</span> modelAndView<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指定视图名称</span>  modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"/bar/index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加模型中的对象</span>  modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"&lt;h2 Hello ModelAndView&lt;/h2 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>  当返回结果为Map时，相当于只是返回了Model，并未指定具体的视图，返回视图的办法与void是一样的，即URL= prefix前缀+控制器路径+方法名称 +suffix后缀组成。</p><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>  该接口Model定义在包org.springframework.ui下，model对象会用于页面渲染，视图路径使用方法名，与void类似。</p><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>  当返回值为自定义类型时<strong>Spring会把方法认为是视图名称</strong>，与返回值为void的类似办法处理URL，但页面中获得数据比较麻烦。在action上添加@ResponseBody注解则返回的是自定义类型本身，而非视图，Spring会选择一个合适的方式解析对象，默认是json。</p><h1 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h1><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>（1）定义一个抽象类，定义模板方法TemplateMethod。</p><p>（2）使用：设计具体类，集成模板类，如JdbcTemplate。</p><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><h3 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h3><p>  JdbcTemplate继承了基类JdbcAccessor和接口类JdbcOperation。</p><p>（1）JdbcAccessor：对DataSource数据源进行管理和配置。</p><p>（2）JdbcOperation：定义通过JDBC操作数据库的基本操作方法。JdbcTemplate对接口方法进行实现，如execute方法、query方法、update方法等。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>（1）使用基于回调函数，在回调函数中嵌入用户对数据库进行操作的代码或者由spring来生成。</p><p>（2）直接使用JdbcTemplate的execute(String sql)方法完成数据库操作。</p><h2 id="操作对象"><a href="#操作对象" class="headerlink" title="操作对象"></a>操作对象</h2><p>  如MappingSqlQuery，可以直接返回object，是简单的ORM实现。</p><h1 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a>Spring 事务</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="编程式事务控制"><a href="#编程式事务控制" class="headerlink" title="编程式事务控制"></a>编程式事务控制</h3><ul><li>自己手动控制事务</li><li>Jdbc代码：Conn.setAutoCommite(false);  //设置手动控制事务</li><li>Hibernate代码：Session.beginTransaction();   //开启一个事务</li><li>粒度：可以是方法中的某几行。</li><li>特点：比较灵活，但开发起来比较繁琐：每次都要开启、提交、回滚.</li></ul><h3 id="声明式事务控制"><a href="#声明式事务控制" class="headerlink" title="声明式事务控制"></a>声明式事务控制</h3><ul><li><p>Spring提供了对事务的管理</p></li><li><p>核心实现： 基于AOP</p></li><li><p>粒度：整个方法</p></li><li><p>事务管理器类：</p><pre><code> Jdbc技术：**DataSourceTransactionManager**       </code></pre><p> ​    Hibernate技术：<strong>HibernateTransactionManager</strong></p><ul><li><strong>配置方式：</strong><br>  XML<br>   @Transactional注解</li><li>注意点<pre><code>  事物是程序运行如果没有错误,会自动提交事物,如果程序运行发生异常,则会自动回滚。 **如果使用了try捕获异常时.一定要在catch里面手动回滚。**</code></pre></li></ul></li></ul><h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a><strong>事务传播行为</strong></h2><ul><li>支持当前事务</li></ul><p>（1）PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</p><p>（2）PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。</p><p>（3）PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。 </p><ul><li>不支持当前事务</li></ul><p>（4）]PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。 </p><p>（5）PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 </p><p>（6）PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。</p><ul><li>其他</li></ul><p>（7）PROPAGATION_NESTED-创建并非嵌套</p><h1 id="Spring-远端调用"><a href="#Spring-远端调用" class="headerlink" title="Spring 远端调用"></a>Spring 远端调用</h1><p>Spring 远端调用的实现：</p><p>（1）HTTP调用器</p><ul><li><p>基于HTTP协议，使用HttpInvokerProxyFactoryBean实现。使用AOP封装。</p></li><li><p>对象序列化传输，接收响应后反序列化。</p></li></ul><p>（2）Hssion/Burlap</p><ul><li><p>hession 使用二进制协议</p></li><li><p>Burlap 基于XML</p><pre><code>但是都是基于http协议设计</code></pre></li></ul><p>（3）Spring RMI<br>    基于TCP/IP协议，使用序列化传输对象。</p><h1 id="Spring代码"><a href="#Spring代码" class="headerlink" title="Spring代码"></a>Spring代码</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.qian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>qian-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 引入Spring-AOP等相关Jar --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-orm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1_2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>   http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userEntity<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qian.entity.UserEntity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span>     <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2020/10/07/mybatis/"/>
      <url>/2020/10/07/mybatis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目录<br>1 JDBC<br>2 Mybaits概述<br>3 Mybatis扩展<br>4 Mybatis的加载和缓存<br>5 Mybatis注解开发<br>6 Mybatis分页<br>7 常见问题汇总  </p><p>参考资料：  </p><ul><li>《Java使用教程 第3版》  </li><li>JavaG  </li><li>CSDN  </li></ul></blockquote><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>  JDBC是Java DataBase Connectivity的缩写，它是一种可用于执行SQL语句的Java API，其中包含跨平台的数据库访问方法,为数据库应用开发人员提供了一种标准的应用程序编程接口,屏蔽了具体数据库的差异,如图1-1所示。当Java程序访问数据库时,由 JDBC API接口调用相应数据库的API实现来访问数据库,从而无须改变Java程序就能访问不同的数据库。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742244.jpeg" alt="img" style="zoom:50%;" /><h3 id="JDBC实现"><a href="#JDBC实现" class="headerlink" title="JDBC实现"></a>JDBC实现</h3><p>  不同的数据库提供不同的JDBC实现,如图1-2所示,JDBC的实现包括三部分。</p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742019.jpeg" alt="img" style="zoom:50%;" /><ul><li><p>JDBC驱动管理器:对应 java. sql DriverManager类,它负责注册特定JBC驱动器,以及根据驱动器建立与数据库的连接</p></li><li><p>JDBC驱动器API:其中最主要的是java. gl. Driver接口</p></li><li><p>JDBC驱动器:由数据库供应商或其他第三方提供,也称为JDBC驱动程序。它们实现了JDBC驱动器API( Driver接口),负责与特定的数据库连接。JDBC驱动器可以注册到JBC驱动管理器中。不同数据库提供的JDBC驱动器也不同。</p></li></ul><h3 id="访问数据库步骤"><a href="#访问数据库步骤" class="headerlink" title="访问数据库步骤"></a>访问数据库步骤</h3><p>(1) 加载驱动程序。调用DriverManager类的registerDriver()方法用来注册驱动程序类的实例。</p><p>(2) 建立连接。调用DrierManager类的getConnection()方法得到一个与数据库的连接，返回一个Connection对象。</p><p>(3) 操作数据库。 调用Connection对象的createStatement()、prepareStatement()等方法执行SQL语句，返回结果集ResultSet。</p><p>(4) 断开连接。</p><h3 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h3><h4 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h4><p>  调用 Connection对象的 createStatement()方法创建一个 Statement对象。 Statement接口的常用方法如下：</p><p>(1) boolean execute(String sql) throws SQLExceptior:执行给定的SoL语句</p><p>(2) int executeUpdate(String sql) throws SQLException:执行给定SQL语句,该语句可能为INSERT、 UPDATE或 DELETE语句,或者不返回任何内容的SQL语句(如 SQL DDL语句)</p><p>(3) Resultset execute Query( String sql) throws SQLException:执行给定的SQL语句,该语句返回单个 Resultset对象。</p><p>(4) void addBatch( (String sql) throws SQLException:将给定的SOL命令添加到此Statement对象的当前命令列表中。通过调用方法 executeBatch可以批量执行此列表中的命令</p><p>(5) int[] executeBatch() throws SQLException:将一批命令提交给数据库来执行,如果全部命令执行成功,则返回更新计数组成的数组。</p><h4 id="PreparedStatement接口"><a href="#PreparedStatement接口" class="headerlink" title="PreparedStatement接口"></a>PreparedStatement接口</h4><p>  Java提供了一个 Statement接口的子接口 PreparedStatement,两者的功能相似,但当某SQL指令被执行多次时, PreparedStatement的效率要比 Statement高,而且 PreparedStatement还可以给SQL指令传递参数。调用 Connection对象的 prepareStatement()方法来得到 PreparedStatement对象。PreparedStatement对象所代表的SQL语句中的参数用问号(?)来表示。调用 PreparedStatement对象的 setXXX()方法来设置这些参数。PreparedStatement接口的常用方法如下:</p><p>(1) void set Boolean(int parameterIndex, boolean x) throws SQLException:将指定参数设置为给定boolean值。parameterIndex的第一个参数是1,第二个参数是2… …x 是参数值。</p><p>(2) void setInt(int parameterIndex, int x) throws SQLException::将指定参数设置为给定int值。</p><p>(3) void setFloat(int parameterIndex., float x) throws SQLException:将指定参数设置为给定float值。</p><p>(4) void set Double(int parameterIndex, double x) throws SQLException:将指定参数设置为给定double值。</p><p>(5) void setString(int parameterIndex, String x) throws SQLException:将指定参数设置为给定String值。</p><p>(6) void setDate(int parameterIndex, Date x) throws SQLException:使用运行应用程序的虚拟机的默认时区将指定参数设置为给定java.sql.Date值。</p><h4 id="ResultSet接口"><a href="#ResultSet接口" class="headerlink" title="ResultSet接口"></a>ResultSet接口</h4><p>  当使用 Statement和 PreparedStatement中的 executeQuery方法来执行 select查询指令时,查询的结果被放在结果集 Resultset中。Resultset接口的常用方法如下：</p><p>(1) String getString(int columnIndex) throws SQLException:获取此 Resultset对象的当前行中指定列的值,参数 columnIndex代表字段的索引位置。</p><p>(2) String getString(String columnLabel) throws SQLException:获取此 Resultset对象的当前行中指定列的值,参数 columnLabel代表字段值。</p><p>(3) int getInt (int columnIndex) throws SQLException:获取此 ResultSet对象的当前行中指定列的值,参数 columnIndey代表字段值。</p><p>(4) int getInt(String column Label) throws SQLException:获取此 Resultset对象的当前行中指定列的值,参数 columnLabel代表字段值。</p><p>(5) boolean absolute(int row) throws SQLException:将光标移动到此 Resultset对象的给定行编号。</p><p>(6) boolean previous() throws SQLException:将光标移动到此 Resultset对象的上一行。</p><p>(7) boolean first() throws SQLException:将光标移动到此 Resultset对象的第一行。</p><p>(8) boolean last() throws SQLException:将光标移动到此 Resultset对象的最后一行。</p><p>(9) boolean next() throws SQLException:将光标移到下一行, Resultset光标最初位于第一行之前,第一次调用next0方法使第一行成为当前行。</p><h3 id="JDBC-Demo"><a href="#JDBC-Demo" class="headerlink" title="JDBC Demo"></a>JDBC Demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"username=' OR 1=1 -- "</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token comment">// String sql = "SELECT id,username FROM user_table WHERE " +</span><span class="token comment">// "username='" + username + "'AND " + "password='"</span><span class="token comment">// + password + "'";</span><span class="token comment">//优点在于，可以进行预编译</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT id,username FROM user_table WHERE username=? AND password=?"</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> stat <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>stat<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>stat<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"---name:"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h3><p>  事务处理是由单一的逻辑单位完成的一系列操作,它由一系列对数据库的操作组成。事务处理在数据库系统中主要用来实现数据完整性,所有遵守JDBC规范的JDBC驱动程序都支持事务处理。当在一个事务中执行多个操作时,只有所有操作成功才意味着整个事务成功。只要有一个操作失败,整个事务就失败,该事务会回滚( rollback)到最初的状态。</p><p>  当一个连接对象被创建时,<strong>默认情况下事务被设置为自动提交状态</strong>。这意味着每次执行一条SQL语句时,如果执行成功,就会自动调用 commit()方法向数据库提交,也就不能再回滚了。为了将多条SQL语句作为一个事务执行,可以**设置 Connection对象的 setAutoCommit(false)**。然后在所有的SQL语句成功执行后,显式调用 Connection对象的commit()方法来提交事务,或者在执行出错时调用Connection对象的 rollback()方法来回滚事务。</p><h2 id="Mybatis概述"><a href="#Mybatis概述" class="headerlink" title="Mybatis概述"></a>Mybatis概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>Mybatis 是一个使用java编写的持久层框架。它封装了 JDBC ，使开发者只需要关注 sql 语句，而无需关注注册驱动、创建连接、创建 Statement 等繁杂的过程。</p></li><li><p>ORM（Object Relational Mapping）对象关系映射。简单地说，就是把数据库表和实体类及实体类的属性对应起来，让我们可以通过操作实体类来操作数据库表。</p></li></ul><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><h4 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>org<span class="token punctuation">.</span>mybatis<span class="token operator">/</span>mybatis <span class="token operator">--</span><span class="token operator">></span>  <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mybatis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.4</span><span class="token number">.4</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>mvnrepository<span class="token punctuation">.</span>com<span class="token operator">/</span>artifact<span class="token operator">/</span>mysql<span class="token operator">/</span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java <span class="token operator">--</span><span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>       <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.1</span><span class="token number">.21</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应定义的配置文件：</p><ul><li>UserMapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>   <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.ykf.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 配置查询所有用户 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listAllUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.ykf.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM user   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mybatis.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>    <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>   <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 全局变量 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/db_mybatis<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--配置环境--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 配置事务类型 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 配置数据源（连接池） --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 指定映射文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意事项</p></li><li><p>sql中的#{username}等必须与对应类的属性名一致</p><ul><li>映射配置文件的 mapper 标签 </li><li>映射配置文件的操作配置，<strong>id 属性的取值必须是 mapper 接口的方法名</strong></li></ul></li></ul><h4 id="springboot整合mybatis"><a href="#springboot整合mybatis" class="headerlink" title="springboot整合mybatis"></a>springboot整合mybatis</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>parent<span class="token punctuation">></span></span>      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>parent<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.5</span><span class="token number">.2</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>       <span class="token operator">&lt;</span>relativePath <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> lookup parent from repository <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span> <span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">></span></span>       <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>           <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>           <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>           <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>           <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mybatis<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>             <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">1.1</span><span class="token number">.1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>       <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>           <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>mysql<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>             <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>mysql<span class="token operator">-</span>connector<span class="token operator">-</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>             <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">5.1</span><span class="token number">.21</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>       <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>  以mybatis框架情况为例讲解。</p><h4 id="mybatis调用的主类"><a href="#mybatis调用的主类" class="headerlink" title="mybatis调用的主类"></a>mybatis调用的主类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisTest</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**  \* Mybatis 入门案例  */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1. 读取配置文件</span>      <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 2. 创建 SqlSessionFactory 工厂</span>     <span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3. 获取 SqlSession 对象</span>     <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 4. 使用 SqlSession 创建 Mapper 的代理对象</span>     <span class="token class-name">UserMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">UserMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 5. 使用代理对象执行查询</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span> users<span class="token punctuation">></span></span> <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 6. 释放资源</span>     sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742146.png" alt="img"></p><ul><li>构建者模式：创建SqlSessionFactory对象</li><li>工厂模式： 创建SqlSession对象</li><li>代理模式: 创建Dao接口实体类。getMapper(类名.class)方法，使用JDK动态代理创建一个代理对象，在对象的InvocationHandler接口实现类中调用findAll()方法。最后使用反射技术封装实体类返回代理对象。</li></ul><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742182.png" alt="img"></p><p>  在通过代理模式生成代理对象后，调用方法如listAllUsers()的过程如下：<br>（1）通过dom4j解析xml文件。根据mysql数据库的配置信息创建出Connection对象，注册驱动，建立连接。<br>（2）获取预处理对象PreparedStatement。将UserMapper.xml文件中对应方法的sql语句传入,调用connection.prepareStatement(sql)获得PreparedStatement对象。<br>（3）执行查询。ResultSet resultSet = prepareStatement.executeQuery()<br>（4）遍历结果集，封装为<code>List&lt;User&gt;</code>返回。</p><p>· 注意事项<br>  在代理对象调用方法时，mybatis会将方法需要的sql语句和封装结果的实体类全限定类名（即一个标签<code>&lt;select&gt;</code>）进行组合，定义成一个MappedStatement对象。</p><h2 id="mybatis扩展"><a href="#mybatis扩展" class="headerlink" title="mybatis扩展"></a>mybatis扩展</h2><h3 id="Usermapper-xml中的扩展"><a href="#Usermapper-xml中的扩展" class="headerlink" title="Usermapper.xml中的扩展"></a>Usermapper.xml中的扩展</h3><ul><li><p>POJO包装<br>  pojo是普通JavaBean，即属性+ get/set方法。对应还有EJB是企业JavaBean，是分布式事务处理组件。<br>  在开发中如果想实现复杂查询 ，查询条件不仅包括用户查询条件，还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用 pojo 包装对象传递输入参数。即新定义一个Bean，包含对其他类的引用。</p></li><li><p>实体类属性与数据库表不一致</p><ul><li><p>使用别名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> id <span class="token keyword">AS</span> userId<span class="token punctuation">,</span> username <span class="token keyword">AS</span> userName<span class="token punctuation">,</span> birthday <span class="token keyword">AS</span> userBirthday<span class="token punctuation">,</span> sex <span class="token keyword">AS</span> userSex<span class="token punctuation">,</span> address <span class="token keyword">AS</span> userAddress <span class="token keyword">FROM</span> <span class="token keyword">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用ResultMap</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.ykf.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userBirthday<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userAddress<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userSex<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mybatis的连接池"><a href="#Mybatis的连接池" class="headerlink" title="Mybatis的连接池"></a>Mybatis的连接池</h3></li></ul><p>数据源是执行具体的数据库的相关信息，在配置文件中配置的，如mybatis.xml中的<datasource>。在 Mybatis 中，数据源 dataSource 共有三类，分别是：</p></li><li><p>UNPOOLED ： 不使用连接池的数据源。采用传统的 javax.sql.DataSource 规范中的连接池，Mybatis 中有针对规范的实现</p></li><li><p>POOLED ： 使用连接池的数据源。采用池的思想</p></li><li><p>JNDI ： 使用 JNDI 实现的数据源，采用服务器提供的 JNDI 技术实现，来获取 DataSource 对象，不同的服务器所能拿到的 DataSource 是不一样的。<strong>注意，如果不是 Web 或者 Maven 的war工程，是不能使用 JNDI 的。</strong></p></li></ul><h3 id="Mybatis多表查询"><a href="#Mybatis多表查询" class="headerlink" title="Mybatis多表查询"></a><strong>Mybatis多表查询</strong></h3><h4 id="多对一（一对多）"><a href="#多对一（一对多）" class="headerlink" title="多对一（一对多）"></a><strong>多对一（一对多）</strong></h4><p>（1）编写联合查询sql语句。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> U<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>id <span class="token keyword">AS</span> aid<span class="token punctuation">,</span> a<span class="token punctuation">.</span>uid<span class="token punctuation">,</span> a<span class="token punctuation">.</span>money <span class="token keyword">from</span> account a<span class="token punctuation">,</span> <span class="token keyword">user</span> u <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>uid <span class="token operator">=</span> u<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）定义Bean，包含对相关实体类的引用（组合）。</p><p>（3）定义ResultMap。注意使用<code>&lt;association&gt;&lt;/association&gt;</code>对其中包含的实体类进行定义，该标签 用于一对一映射，其中的 property 属性表示要关联的属性，javaType 表示待关联的实体类的全限定类名。</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>（1）编写多对多查询语句</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>id <span class="token keyword">as</span> rid<span class="token punctuation">,</span> r<span class="token punctuation">.</span>role_name<span class="token punctuation">,</span> r<span class="token punctuation">.</span>role_desc <span class="token keyword">FROM</span> <span class="token keyword">user</span> u <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> user_role ur <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> ur<span class="token punctuation">.</span>uid <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> role r <span class="token keyword">ON</span> ur<span class="token punctuation">.</span>rid <span class="token operator">=</span> r<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）定义Bean，包含相关实体类的集合引用，如<code>List&lt;User&gt;</code>等。</p><p>（3）定义ResultMap，注意使用<code>&lt;collection&gt;&lt;/collection&gt;</code>对其中包含的实体类进行定义，该标签 用于一对一映射，其中的 property 属性表示要关联的属性，ofType 表示待关联的实体类的全限定类名。</p><h3 id="Mybatis拦截器"><a href="#Mybatis拦截器" class="headerlink" title="Mybatis拦截器"></a>Mybatis拦截器</h3><p>（1）Mybatis拦截器只能拦截四种类型的接口：Executor、StatementHandler、ParameterHandler和ResultSetHandler。这是在Mybatis的Configuration中写死了的，如果要支持拦截其他接口就需要我们重写Mybatis的Configuration。Mybatis可以对这四个接口中所有的方法进行拦截。</p><p>（2）利用拦截器实现Mybatis分页的一个思路就是拦截StatementHandler接口的prepare方法，然后在拦截器方法中把Sql语句改成对应的分页查询Sql语句，之后再调用StatementHandler对象的prepare方法，即调用invocation.proceed()</p><p><a href="https://blog.csdn.net/moshenglv/article/details/52699976">【myBatis】Mybatis中的拦截器_程序员面试经验分享-CSDN博客_mybatis拦截器</a></p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172741952.png" alt="img" style="zoom:50%;" /><p><a href="https://blog.csdn.net/huyiju/article/details/82454735?ops_request_misc=%7B%22request_id%22:%22161002000316780299086819%22,%22scm%22:%2220140713.130102334.pc_blog.%22%7D&request_id=161002000316780299086819&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-82454735.pc_v2_rank_blog_default&utm_term=Mybatis&spm=1018.2226.3001.4450">MyBatis学习——第四篇（拦截器和拦截器分页实现）_huyiju的博客-CSDN博客_分页拦截器</a></p><h2 id="Mybatis的加载与缓存"><a href="#Mybatis的加载与缓存" class="headerlink" title="Mybatis的加载与缓存"></a>Mybatis的加载与缓存</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><ul><li><p>延迟加载就是在<strong>需要用到数据时才进行加载，不需要用到数据时就不加载数据</strong>，延迟加载也称<strong>懒加载</strong>。</p></li><li><p>在<strong>一对多</strong>或<strong>多对多</strong>的表关系中，通常情况下我们都是采用延迟加载。</p></li><li><p>实现<br>  在mybatis.xml中配置开启延迟加载</p>  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 开启延迟加载 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项<br>  在编写 Mybatis 的配置文件时，文档结构一定<strong>不可以随便写</strong>，一定要按照官方文档所要求的顺序，比如说：<code>&lt;settings&gt;&lt;/settings&gt;</code> 标签不可以写在<code> &lt;environments&gt;&lt;/environments&gt;</code>下方。具体文档结构见下图：</p></li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172741920.png" alt="img"></p><h4 id="立即加载"><a href="#立即加载" class="headerlink" title="立即加载"></a>立即加载</h4><ul><li><p>立即加载就是不管是否需要数据，只要<strong>一进行查询，就会把相关联的数据一并查询出来</strong>。</p></li><li><p>在<strong>多对一</strong>或<strong>一对一</strong>的表关系中，通常情况下我们都是采用立即加载。</p></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><p>  一级缓存是 <strong>SqlSession</strong> 级别的缓存，只要 SqlSession 没有 <strong>flush</strong> 或 <strong>close</strong>，它就会存在。当调用 SqlSession 的**修改、添加、删除、commit()、close()、clearCache()**等方法时，就会清空一级缓存。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172741958.png" alt="img"></p><ul><li><p>第一次发起查询用户 id 为 1 的用户信息，Mybatis 会先去找缓存中是否有 id 为 1 的用户信息，如果没有，从数据库查询用户信息。</p></li><li><p>得到用户信息，<strong>将用户信息存储到一级缓存中</strong>。</p></li><li><p>如果 sqlSession 去执行 commit 操作（执行插入、更新、删除），那么 Mybatis 就会清空 SqlSession 中的一级缓存，这样做的目的为了<strong>让缓存中存储的是最新的信息，避免脏读</strong>。</p></li><li><p>第二次发起查询用户 id 为 1 的用户信息，先去找缓存中是否有 id 为 1 的用户信息，缓存中有，直接从缓存中获取用户信息。</p></li><li><p>注意事项</p><ul><li>Mybatis <strong>默认</strong>就是使用一次缓存的，不需要配置。</li><li>一级缓存中存放的是<strong>对象</strong>。（一级缓存其实就是 Map 结构，直接存放对象）</li></ul></li></ul><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>  二级缓存是 <strong>Mapper</strong> 映射级别的缓存，多个 SqlSession 去操作同一个 Mapper 映射的 SQL 语句，多个SqlSession 可以共用二级缓存，<strong>二级缓存是跨 SqlSession 的</strong>。</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742002.png" alt="img"></p><ul><li><p>当 sqlSession1 去查询用户信息的时候，Mybatis 会将查询数据存储到二级缓存中。</p></li><li><p>如果 sqlSession3 去执行<strong>相同 Mapper 映射下的 SQL 语句</strong>，并且<strong>执行 commit 提交</strong>，那么 Mybatis 将会清空该 Mapper 映射下的二级缓存区域的数据。</p></li><li><p>sqlSession2 去查询与 sqlSession1 相同的用户信息，Mybatis 首先会去缓存中找是否存在数据，如果存在直接从缓存中取出数据。</p></li><li><p>Mybatis 的二级缓存配置</p></li><li><p>mybatis.xml</p></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;settings&gt; &lt;!-- 开启缓存 --&gt; &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;&lt;&#x2F;settings&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>UserMapper.xml</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;mapper namespace&#x3D;&quot;cn.ykf.mapper.UserMapper&quot;&gt;   &lt;!-- 使用缓存 --&gt;    &lt;cache&#x2F;&gt;&lt;&#x2F;mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在需要使用二级缓存的操作上配置 <strong>（针对每次查询都需要最新数据的操作，要设置成 useCache=”false”，禁用二级缓存）</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;listAllUsers&quot; resultMap&#x3D;&quot;UserWithAccountsMap&quot; useCache&#x3D;&quot;true&quot;&gt;   SELECT * FROM user&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>注意事项<ul><li>当我们使用二级缓存的时候，所缓存的类一定要<strong>实现 java.io.Serializable 接口</strong>，这样才可以使用序列化的方式来保存对象。</li><li>由于是序列化保存对象，所以二级缓存中存放的是<strong>数据</strong>，而不是整个对象。</li></ul></li></ul><h2 id="Mybatis注解开发"><a href="#Mybatis注解开发" class="headerlink" title="Mybatis注解开发"></a>Mybatis注解开发</h2><p>  常用注解表：</p><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742004.png" alt="img"></p><h3 id="单表CURD"><a href="#单表CURD" class="headerlink" title="单表CURD"></a>单表CURD</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** * 查询所有用户   \* *   @return   */</span>   <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"UserMap"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>property <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userBirthday"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userSex"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userAddress"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">listAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/** * 添加用户   \* *   @param user   *   @return 成功返回1，失败返回0   */</span>   <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(username,birthday,sex,address) VALUES(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"UserMap"</span><span class="token punctuation">)</span>   <span class="token keyword">int</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多对一（一对多）-1"><a href="#多对一（一对多）-1" class="headerlink" title="多对一（一对多）"></a>多对一（一对多）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">&#123;</span><span class="token comment">/**  \* 查询所有账户，并查询所属用户，采用立即加载  *  \* @return  */</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM account"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"AccountMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"uid"</span><span class="token punctuation">,</span>          one <span class="token operator">=</span> <span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"cn.ykf.mapper.UserMapper.getUserById"</span><span class="token punctuation">,</span> fetchType <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span>EAGER<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">listAllAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**  \* 根据id查询单个用户  *  \* @param userId  \* @return  */</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE id = #&#123;id&#125;"</span><span class="token punctuation">)</span>  <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**  \* 查询所有用户，并且查询拥有账户，采用延迟加载  *  \* @return  */</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"UserMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"userId"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userBirthday"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userSex"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"userAddress"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"accounts"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>          many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"cn.ykf.mapper.AccountMapper.getAccountByUid"</span><span class="token punctuation">,</span> fetchType <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">listAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**  \* 根据用户id查询账户列表  *  \* @param uid  \* @return  */</span>  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM account WHERE uid = #&#123;uid&#125;"</span><span class="token punctuation">)</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">listAccountsByUid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二级缓存-1"><a href="#二级缓存-1" class="headerlink" title="二级缓存"></a>二级缓存</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>settings<span class="token punctuation">></span></span>   <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启缓存 <span class="token operator">--</span><span class="token operator">></span>   <span class="token operator">&lt;</span>setting name<span class="token operator">=</span><span class="token string">"cacheEnabled"</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>settings<span class="token operator">></span><span class="token annotation punctuation">@CacheNamespace</span><span class="token punctuation">(</span>blocking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span> <span class="token comment">// .....</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis分页"><a href="#Mybatis分页" class="headerlink" title="Mybatis分页"></a>Mybatis分页</h2><p>  主要有三种方法实现，最简单的就是利用原生的sql关键字limit来实现，还有一种就是利用interceptor来拼接sql，实现和limit一样的功能，再一个就是利用PageHelper来实现。</p><h3 id="自定义返回对象Pager"><a href="#自定义返回对象Pager" class="headerlink" title="自定义返回对象Pager"></a>自定义返回对象Pager</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> page<span class="token punctuation">;</span><span class="token comment">//分页起始页</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment">//每页记录数</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rows<span class="token punctuation">;</span><span class="token comment">//返回的记录集合</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> total<span class="token punctuation">;</span><span class="token comment">//总记录条数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit关键字实现"><a href="#limit关键字实现" class="headerlink" title="limit关键字实现"></a>limit关键字实现</h3><ul><li>UserMapper.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findByPager</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>UserMapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByPager<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.mybatis.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   select * from xx_user limit #&#123;page&#125;,#&#123;size&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select count(1) from xx_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserService.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findByPager</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>   params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> pager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByPager</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>   pager<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>   pager<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> pager<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Interceptor-plugin实现"><a href="#Interceptor-plugin实现" class="headerlink" title="Interceptor plugin实现"></a>Interceptor plugin实现</h3><p>  定义一个类实现Interceptor接口，通过拦截器插件的方式实现分页。  </p><ul><li>MyPageInterceptor.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token class-name">StatementHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">"prepare"</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPageInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> page<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> dbType<span class="token punctuation">;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plugin is running..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">StatementHandler</span> statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StatementHandler</span><span class="token punctuation">)</span>invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Object</span> object <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  metaObject <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Object</span> object <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  metaObject <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span>metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"delegate.mappedStatement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> mapId <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>mapId<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".+ByPager$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ParameterHandler</span> parameterHandler <span class="token operator">=</span>     <span class="token punctuation">(</span><span class="token class-name">ParameterHandler</span><span class="token punctuation">)</span>metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"delegate.parameterHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>parameterHandler<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"delegate.boundSql.sql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sql <span class="token operator">+=</span> <span class="token string">" limit "</span><span class="token operator">+</span><span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size <span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>size<span class="token punctuation">;</span>    metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"delegate.boundSql.sql"</span><span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> limit <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"limit"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dbType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"dbType"</span><span class="token punctuation">,</span> <span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UserService.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findByPager</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>  params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> pager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByPager</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  pager<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  pager<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pager<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>spring配置中，增加plugin设置</li></ul><p><img src="https://gitee.com/Object_Jason/my-pic-go/raw/master/img/1240-20210628172742081.png" alt="img"></p><ul><li> UserMapper.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByPager<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.mybatis.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> select * from xx_user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>long<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select count(1) from xx_user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pagehelper实现"><a href="#Pagehelper实现" class="headerlink" title="Pagehelper实现"></a>Pagehelper实现</h3><ul><li>maven依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>spring.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageHelper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helperDialect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reasonable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportMethodsArguments<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>params<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>count=countSql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span>     <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/xxx/mybatis/dao/*Mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>plugins<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> UserService.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findByPager</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> pager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>   userMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   pager<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   pager<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> pager<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  其实PageHelper方法也是第二种使用Interceptor拦截器方式的一种三方实现，它内部帮助我们实现了Interceptor的功能。所以我们不用自定义MyPageInterceptor这个类了。实际上也是在运行查询方法的时候，进行拦截，然后设置分页参数。所以PageHelper.startPage(page,size)这一句需要显示调用，然后再执行userMapper.findAll()，在查询所有用户信息的时候，会进行一个分页参数设置，让放回的结果只是分页的结果，而不是全部集合。</p><p><a href="https://blog.csdn.net/qq_21996541/article/details/79796117">浅析pagehelper分页原理_王大锤的博客-CSDN博客_pagehelper分页原理</a></p><p>总结：PageHelper首先将前端传递的参数保存到page这个对象中，接着将page的副本存放入ThreadLoacl中，这样可以保证分页的时候，参数互不影响，接着利用了mybatis提供的拦截器，取得ThreadLocal的值，重新拼装分页SQL，完成分页。</p><h2 id="常见问题汇总"><a href="#常见问题汇总" class="headerlink" title="常见问题汇总"></a>常见问题汇总</h2><h3 id="关于mybatis的一些面试题"><a href="#关于mybatis的一些面试题" class="headerlink" title="关于mybatis的一些面试题"></a>关于mybatis的一些面试题</h3><p>（1）#{}是sql占位符，在预编译时为“?”；${}是配置文件中的占位符，直接被替换成字符。</p><p>（2）mybatis将<code>&lt;select&gt;&lt;insert&gt;</code>等标签，唯一解释为一个MappedStatement对象。</p><p>（3）Mybatis 仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybaytis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能。</p><h3 id="开发常见问题总结"><a href="#开发常见问题总结" class="headerlink" title="开发常见问题总结"></a>开发常见问题总结</h3><h4 id="数据库和实体类映射"><a href="#数据库和实体类映射" class="headerlink" title="数据库和实体类映射"></a>数据库和实体类映射</h4><ul><li>驼峰命名</li></ul><blockquote><p>数据库表列：user_name</p><p>实体类属性：userName</p></blockquote><p>在springboot的yml配置如下，<strong>一定不要放在spring标签下！！！</strong></p><blockquote><p>mybatis:<br>  configuration:<br>    # 开启驼峰uName自动映射到u_name<br>    map-underscore-to-camel-case: true</p></blockquote><p>或者在mybatis配置文件中设置：</p><p><code>&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot; /&gt;</code></p><ul><li>使用别名。参考3.1节</li></ul><h4 id="Parameter-array-not-found-Available-parameters-are-collection-list-问题"><a href="#Parameter-array-not-found-Available-parameters-are-collection-list-问题" class="headerlink" title="Parameter array not found. Available parameters are [collection, list]问题"></a>Parameter array not found. Available parameters are [collection, list]问题</h4><p>  当我们要查询一些的信息时，可能会采用list集合或者数组作为参数传入方法中。</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;findSomeUsers&quot; resultType&#x3D;&quot;user3&quot; parameterType&#x3D;&quot;list&quot;&gt;   select * from user where id in  &lt;foreach collection&#x3D;&quot;noList&quot; index&#x3D;&quot;index&quot; item&#x3D;&quot;no&quot; open&#x3D;&quot;(&quot; separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot;&gt;    #&#123;no&#125;  &lt;&#x2F;foreach&gt; &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  这时报错是因为，传递一个 List 实例或者数组作为参数对象传给 MyBatis,MyBatis 会自动将它包装在一个 Map 中,用名称在作为键。List 实例将会以“list” 作为键,而数组实例将会以“array”作为键。解决这个异常的两种方式是：<br>  1.在方法参数前面加上你遍历的集合的名称，比如你在foreach的collection中写的是noList，那么你就在传入的list参数前面加上一个注解@Param(“noList”)。<br>  2.将foreach的collection中的值改成list即可。</p><ul><li>在实际开发中，上述报错，下面代码为一项目中使用的正确代码：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"&lt;script>"</span><span class="token punctuation">,</span> <span class="token string">"select * from `product_category` where category_type in "</span><span class="token punctuation">,</span><span class="token string">"&lt;foreach collection='categoryTpyeList' item='item' index='index' open='(' separator=',' close=')'>"</span><span class="token punctuation">,</span><span class="token string">"#&#123;item&#125;"</span><span class="token punctuation">,</span> <span class="token string">"&lt;/foreach>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;/script>"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProductCategoryEntity</span><span class="token punctuation">></span></span> <span class="token function">findByCategoryTpye</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"categoryTpyeList"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> categoryTpyeList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>collection： 指定要遍历的集合（三种情况 list，array，map） ！！！！在这种使用注解sql的情况下，这里请填写mapper方法中集合的名称</p><p>item：将当前遍历出的元素赋值给指定的变量 （相当于for循环中的i）</p><p>separator:每个元素之间的分隔符</p><p>index:索引。遍历list的时候是index就是索引，item就是当前值</p><p>#{变量名}就能取出变量的值也就是当前遍历出的元素</p>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ORM </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
